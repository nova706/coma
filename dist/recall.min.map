{"version":3,"file":"recall.min.js","sources":["../src/_module.js","../src/adapterResponse.js","../src/adapters/indexedDB.adapter.js","../src/adapters/odataREST.adapter.js","../src/adapters/sync.adapter.js","../src/association.js","../src/entity.js","../src/localStorage.js","../src/model.js","../src/modelField.js","../src/polyfill.js","../src/predicate.js","../src/preparedQueryOptions.js","../src/recallService.js"],"names":["angular","module","factory","AdapterResponse","data","count","status","headers","config","this","OK","CREATED","ACCEPTED","NO_CONTENT","BAD_REQUEST","UNAUTHORIZED","NOT_FOUND","CONFLICT","INTERNAL_SERVER_ERROR","NOT_IMPLEMENTED","provider","providerConfig","dbName","setDbName","dbVersion","setDbVersion","pkGenerator","s4","Math","floor","random","toString","substring","setPkGenerator","dropDatabase","window","indexedDB","deleteDatabase","e","$get","$log","$q","$window","recall","db","adapter","generatePrimaryKey","migrate","i","model","field","indexName","objectStore","models","getModels","length","objectStoreNames","contains","dataSourceName","createObjectStore","keyPath","primaryKeyFieldName","fields","hasOwnProperty","unique","index","createIndex","useDatabase","theDb","onversionchange","close","error","alert","connect","dfd","defer","resolve","openRequest","open","onupgradeneeded","event","info","target","result","onsuccess","debug","onerror","reject","errorCode","promise","create","theModel","modelInstance","response","buildError","modelName","getRawModelObject","lastModifiedFieldName","Date","toISOString","then","tables","tx","transaction","store","req","add","findOne","pk","queryOptions","includeDeleted","concat","getTablesFromQueryOptions","get","deletedFieldName","performExpand","find","filterPredicate","openCursor","results","$filter","cursor","value","resultMatchesFilters","push","promises","all","applyFilter","applyOrderBy","totalCount","applyPaging","update","extend","updateReq","put","remove","synchronize","dataToSync","hardRemove","createOrUpdate","createReq","getTablesFromExpandPath","expandPath","pathsToExpand","split","toExpand","association","getAssociationByAlias","getModel","indexOf","$expand","paths","expandHasOne","undefined","mappedBy","pathToExpand","join","alias","expandHasMany","key","filter","getOptions","type","predicate","test","a","orderBy","$orderBy","property","direction","sort","b","toLowerCase","top","$top","skip","$skip","slice","serverAPILocation","setServerAPILocation","resultsField","setResultsField","totalCountFiled","setTotalCountFiled","$http","getUrlWithOptions","url","parseOptions","post","success","method","lastSync","masterAdapter","setMaster","slaveAdapter","setSlave","$injector","localStorage","Predicate","PreparedQueryOptions","modelValidationHook","master","getMaster","slave","getSlave","preferMaster","processSyncRequest","getAdapter","SyncResult","sent","returned","totalProcessed","getLastSyncTime","keys","LAST_SYNC","updateLastSyncTimeToNow","set","sendSyncRequestData","processSyncResponseData","syncRequestData","syncResponseData","totalItemsProcessed","handleError","handleComplete","greaterThanOrEqualTo","syncResponse","Association","definition","invalid","hasOne","hasMany","as","foreignKey","prototype","recallService","expand","entity","self","Model","$entity","storedState","equals","$getPrimaryKey","existingPredicate","and","base","stored","Entity","object","persisted","extendFromRawObject","Object","defineProperty","lastDirtyCheck","getTime","lastDirtyState","saveInProgress","$convertAssociationsToEntities","$storeState","$model","ForeignModel","associations","Array","associationName","$isValid","fieldIsUndefined","matchesType","notNull","isNaN","parse","validate","$save","warn","$reset","itemToSave","preSave","updateSavedState","succeeded","preUpdate","transformResult","preCreate","$remove","$isDirty","now","delta","dirtyCheckThreshold","viewValue","storedValue","prop","changedProperties","name","before","after","$document","storage","keyExists","addKeyModifier","modifier","registerKey","keyModifier","supportsLocalStorage","setItem","life","v","encodeURIComponent","cookie","getItem","regexp","RegExp","c","exec","decodeURIComponent","removeItem","ModelField","propagateError","modelDefinition","writable","configurable","obj","setLastModifiedFieldName","setDeletedFieldName","setAdapter","setDirtyCheckThreshold","initializeModelFields","modelField","lastModifiedField","deletedField","modelDefinitionFields","primaryKey","initializeAssociations","modelDefinitionAssociations","rawObject","modelEntity","includeExpandedAssociations","applyDefaultValues","getDefaultValue","resultEntity","rawEntity","clientResponse","pad","number","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","toFixed","parser","predicates","groupOperator","setProperty","escapeValue","notEqualTo","greaterThan","lessThan","lessThanOrEqualTo","startsWith","endsWith","initialPredicate","newPredicates","joinedPredicates","unshift","or","failOnMissingAssociation","testPredicate","parsePredicate","nested","urlString","predicateString","fromString","conditionMatcher","filters","match","getPredicateFromSegment","replace","buildPredicateFromMap","predicateMap","closeParenthesisIndex","openParenthesisIndex","groupString","filterIndexes","groupFilters","operator","groupPredicate","testNextLevel","lastIndexOf","Number","convertValueToType","testPredicateGroup","propertyPath","objectValue","condition","testComplexPredicate","testSimplePredicate","substr","start","end","conditionParams","getComplexPredicateFromSegment","parenPos","getSimplePredicateFromSegment","options","isPredicate","arguments","$orderby","$select","$inlineCount","enable","$inlinecount","custom","optionName","preparedQueryOptions","option","parameters","appendSeparator","fromObject","service","theModels","defineModel","fieldsValid"],"mappings":"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","sourcesContent":["angular.module('recall', []);","angular.module('recall').factory(\"recallAdapterResponse\", [\r\n    function () {\r\n\r\n        /**\r\n         * The AdapterResponse class represents a response that is coming back from an adapter. Every Adapter should\r\n         * resolve and reject with a properly formed AdapterResponse so that the Model can handle the response.\r\n         *\r\n         * @param {Object|Array|String} data The raw data from the adapter or an error message\r\n         * @param {Number} [count=0] The number of records affected by the action\r\n         * @param {Number} [status=200] The status of the response\r\n         * @param {Object} [headers] The response headers (used by $http)\r\n         * @param {Object} [config] The configuration of the request (used by $http)\r\n         * @constructor\r\n         */\r\n        var AdapterResponse = function (data, count, status, headers, config) {\r\n            this.data = data;\r\n            this.count = count || 0;\r\n            this.status = status || AdapterResponse.OK;\r\n            this.headers = headers;\r\n            this.config = config;\r\n        };\r\n\r\n        // 2xx status codes used in OOTB adapters\r\n        AdapterResponse.OK = 200;\r\n        AdapterResponse.CREATED = 201;\r\n        AdapterResponse.ACCEPTED = 202;\r\n        AdapterResponse.NO_CONTENT = 204;\r\n\r\n        // 4xx status codes used in OOTB adapters\r\n        AdapterResponse.BAD_REQUEST = 400;\r\n        AdapterResponse.UNAUTHORIZED = 401;\r\n        AdapterResponse.NOT_FOUND = 404;\r\n        AdapterResponse.CONFLICT = 409;\r\n\r\n        // 5xx status codes used in OOTB adapters\r\n        AdapterResponse.INTERNAL_SERVER_ERROR = 500;\r\n        AdapterResponse.NOT_IMPLEMENTED = 501;\r\n\r\n        return AdapterResponse;\r\n    }\r\n]);","angular.module('recall.adapter.indexedDB', ['recall']).provider('recallIndexedDBAdapter', [\r\n    function () {\r\n\r\n        var providerConfig = {};\r\n\r\n        // Sets the name of the IndexedDB database to use\r\n        providerConfig.dbName = 'recall';\r\n        this.setDbName = function (dbName) {\r\n            providerConfig.dbName = dbName;\r\n            return this;\r\n        };\r\n\r\n        // Sets the version of the IndexedDB to use\r\n        providerConfig.dbVersion = 1;\r\n        this.setDbVersion = function (dbVersion) {\r\n            providerConfig.dbVersion = dbVersion;\r\n            return this;\r\n        };\r\n\r\n        // Sets the default function to be used as a \"GUID\" generator\r\n        providerConfig.pkGenerator = function () {\r\n            function s4() {\r\n                return Math.floor((1 + Math.random()) * 0x10000)\r\n                    .toString(16)\r\n                    .substring(1);\r\n            }\r\n\r\n            return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\r\n                s4() + '-' + s4() + s4() + s4();\r\n        };\r\n        this.setPkGenerator = function (pkGenerator) {\r\n            providerConfig.pkGenerator = pkGenerator;\r\n            return this;\r\n        };\r\n\r\n        // Drops the IndexedDB database\r\n        this.dropDatabase = function () {\r\n            try {\r\n                window.indexedDB.deleteDatabase(providerConfig.dbName);\r\n            } catch (e) {\r\n                return e;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        this.$get = [\r\n            '$log',\r\n            '$q',\r\n            '$window',\r\n            'recall',\r\n            'recallAdapterResponse',\r\n\r\n            function ($log, $q, $window, recall, AdapterResponse) {\r\n\r\n                var adapter = {};\r\n                var db;\r\n\r\n                var generatePrimaryKey = providerConfig.pkGenerator;\r\n\r\n                // Handles version differences in the database and initializes or migrates the db\r\n                var migrate = function (db) {\r\n                    var i;\r\n                    var model;\r\n                    var field;\r\n                    var indexName;\r\n                    var objectStore;\r\n                    var models = recall.getModels();\r\n                    for (i = 0; i < models.length; i++) {\r\n                        model = models[i];\r\n\r\n                        if (!db.objectStoreNames.contains(model.dataSourceName)) {\r\n                            objectStore = db.createObjectStore(model.dataSourceName, { keyPath: model.primaryKeyFieldName });\r\n                            for (field in model.fields) {\r\n                                if (model.fields.hasOwnProperty(field)) {\r\n                                    if (model.fields[field].unique === true || model.fields[field].index !== false) {\r\n                                        indexName = (model.fields[field].index === true) ? field : model.fields[field].index;\r\n                                        objectStore.createIndex(field, indexName, { unique: model.fields[field].unique });\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n                // Sets the database to use in the adapter\r\n                var useDatabase = function (theDb) {\r\n                    db = theDb;\r\n\r\n                    // Handler for when the DB version is changed in another tab\r\n                    db.onversionchange = function () {\r\n                        db.close();\r\n                        $log.error('IndexedDBAdapter: DB version changed in a different window');\r\n                        alert(\"A new version of this page is ready. Please reload!\");\r\n                    };\r\n                };\r\n\r\n                // Connects to the database\r\n                var connect = function () {\r\n                    var dfd = $q.defer();\r\n\r\n                    if (db) {\r\n                        dfd.resolve(db);\r\n                    } else {\r\n                        var openRequest = $window.indexedDB.open(providerConfig.dbName, providerConfig.dbVersion);\r\n\r\n                        openRequest.onupgradeneeded = function (event) {\r\n                            $log.info('IndexedDBAdapter: Migrating...', event);\r\n                            useDatabase(event.target.result);\r\n                            migrate(event.target.result);\r\n                        };\r\n\r\n                        openRequest.onsuccess = function (event) {\r\n                            $log.debug('IndexedDBAdapter: Connection Success', event);\r\n                            useDatabase(event.target.result);\r\n                            dfd.resolve(db);\r\n                        };\r\n\r\n                        openRequest.onerror = function (event) {\r\n                            $log.error('IndexedDBAdapter: Connection Error', event);\r\n                            dfd.reject(event.target.errorCode);\r\n                        };\r\n                    }\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Creates a new Entity\r\n                 * @param {Object} theModel The model of the entity to create\r\n                 * @param {Object} modelInstance The entity to create\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.create = function (theModel, modelInstance) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var buildError = function (e) {\r\n                        response = new AdapterResponse(e, 0, AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                        $log.error('IndexedDBAdapter: Create ' + theModel.modelName, response, modelInstance);\r\n                        return response;\r\n                    };\r\n\r\n                    modelInstance[theModel.primaryKeyFieldName] = generatePrimaryKey();\r\n\r\n                    // TODO: Manage Cascade Create\r\n                    modelInstance = theModel.getRawModelObject(modelInstance, false);\r\n\r\n                    // TODO: Store all dates in ISO format\r\n                    modelInstance[theModel.lastModifiedFieldName] = new Date().toISOString();\r\n\r\n                    connect().then(function () {\r\n                        var tables = [theModel.dataSourceName];\r\n                        var tx = db.transaction(tables, \"readwrite\");\r\n                        var store = tx.objectStore(theModel.dataSourceName);\r\n                        var req = store.add(modelInstance);\r\n                        req.onsuccess = function () {\r\n                            response = new AdapterResponse(modelInstance, 1, AdapterResponse.CREATED);\r\n                            $log.debug('IndexedDBAdapter: Create ' + theModel.modelName, response);\r\n                            dfd.resolve(response);\r\n                        };\r\n                        req.onerror = function () {\r\n                            dfd.reject(buildError(this.error));\r\n                        };\r\n                    }, function (e) {\r\n                        dfd.reject(buildError(e));\r\n                    });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Finds a single entity given a primary key\r\n                 * @param {Object} theModel The model of the entity to find\r\n                 * @param {String|Number} pk The primary key of the entity to find\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use for $expand\r\n                 * @param {Boolean} [includeDeleted=false] If true, includes soft-deleted entities\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.findOne = function (theModel, pk, queryOptions, includeDeleted) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var buildError = function (e, status) {\r\n                        response = new AdapterResponse(e, 0, status || AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                        $log.error('IndexedDBAdapter: FindOne ' + theModel.modelName, response, pk, queryOptions);\r\n                        return response;\r\n                    };\r\n\r\n                    connect().then(function () {\r\n                        var tables = [theModel.dataSourceName].concat(getTablesFromQueryOptions(theModel, queryOptions));\r\n                        var tx = db.transaction(tables);\r\n                        var store = tx.objectStore(theModel.dataSourceName);\r\n                        var req = store.get(pk);\r\n\r\n                        // TODO: Apply Select\r\n                        req.onsuccess = function () {\r\n                            if (req.result && (includeDeleted || !req.result[theModel.deletedFieldName])) {\r\n                                performExpand(req.result, theModel, queryOptions, tx).then(function () {\r\n                                    response = new AdapterResponse(req.result, 1);\r\n                                    $log.debug('IndexedDBAdapter: FindOne ' + theModel.modelName, response, pk, queryOptions);\r\n                                    dfd.resolve(response);\r\n                                }, function (e) {\r\n                                    dfd.reject(buildError(e));\r\n                                });\r\n                            } else {\r\n                                dfd.reject(buildError('Not Found', AdapterResponse.NOT_FOUND));\r\n                            }\r\n                        };\r\n                        req.onerror = function () {\r\n                            dfd.reject(buildError(this.error));\r\n                        };\r\n                    }, function (e) {\r\n                        dfd.reject(buildError(e));\r\n                    });\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Finds a set of Model entities\r\n                 * @param {Object} theModel The model of the entities to find\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use\r\n                 * @param {Boolean} [includeDeleted=false] If true, includes soft-deleted entities\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.find = function (theModel, queryOptions, includeDeleted) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var buildError = function (e) {\r\n                        response = new AdapterResponse(e, 0, AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                        $log.error('IndexedDBAdapter: Find ' + theModel.modelName, response, queryOptions);\r\n                        return response;\r\n                    };\r\n\r\n                    connect().then(function () {\r\n                        // TODO: Filter using an index if possible\r\n                        var tables = [theModel.dataSourceName].concat(getTablesFromQueryOptions(theModel, queryOptions));\r\n                        var tx = db.transaction(tables);\r\n                        var store = tx.objectStore(theModel.dataSourceName);\r\n                        var req = store.openCursor();\r\n                        var results = [];\r\n                        var filterPredicate;\r\n\r\n                        if (queryOptions && queryOptions.$filter()) {\r\n                            filterPredicate = queryOptions.$filter();\r\n                        }\r\n\r\n                        // TODO: Apply Select\r\n                        req.onsuccess = function (event) {\r\n                            var cursor = event.target.result;\r\n                            if (cursor) {\r\n                                if (includeDeleted || !cursor.value[theModel.deletedFieldName]) {\r\n                                    if (filterPredicate) {\r\n                                        if (resultMatchesFilters(cursor.value, filterPredicate)) {\r\n                                            results.push(cursor.value);\r\n                                        }\r\n                                    } else {\r\n                                        results.push(cursor.value);\r\n                                    }\r\n                                }\r\n                                cursor.continue();\r\n                            } else {\r\n                                var i;\r\n                                var promises = [];\r\n                                for (i = 0; i < results.length; i++) {\r\n                                    promises.push(performExpand(results[i], theModel, queryOptions, tx));\r\n                                }\r\n                                $q.all(promises).then(function () {\r\n                                    results = applyFilter(results, filterPredicate);\r\n\r\n                                    results = applyOrderBy(results, queryOptions);\r\n\r\n                                    var totalCount = results.length;\r\n\r\n                                    // TODO: This is not very efficient but indexedDB does not seem to support a better way with filters and ordering\r\n                                    results = applyPaging(results, queryOptions);\r\n\r\n                                    response = new AdapterResponse(results, totalCount);\r\n\r\n                                    $log.debug('IndexedDBAdapter: Find ' + theModel.modelName, response, queryOptions);\r\n                                    dfd.resolve(response);\r\n                                }, function (e) {\r\n                                    dfd.reject(buildError(e));\r\n                                });\r\n                            }\r\n                        };\r\n                        req.onerror = function () {\r\n                            dfd.reject(buildError(this.error));\r\n                        };\r\n                    }, function (e) {\r\n                        dfd.reject(buildError(e));\r\n                    });\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Updates a Model entity given the primary key of the entity\r\n                 * @param {Object} theModel The model of the entity to update\r\n                 * @param {String|Number} pk The primary key of the entity\r\n                 * @param {Object} modelInstance The entity to update\r\n                 * @param {Boolean} [includeDeleted=false] If true, includes soft-deleted entities\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.update = function (theModel, pk, modelInstance, includeDeleted) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var buildError = function (e) {\r\n                        response = new AdapterResponse(e, 0, AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                        $log.error('IndexedDBAdapter: Update ' + theModel.modelName, response, modelInstance);\r\n                        return response;\r\n                    };\r\n\r\n                    connect().then(function () {\r\n                        var tables = [theModel.dataSourceName];\r\n                        var tx = db.transaction(tables, \"readwrite\");\r\n                        var store = tx.objectStore(theModel.dataSourceName);\r\n                        var req = store.get(pk);\r\n                        req.onsuccess = function () {\r\n                            if (req.result && (includeDeleted || !req.result[theModel.deletedFieldName])) {\r\n                                var result = req.result;\r\n                                delete modelInstance[theModel.primaryKeyFieldName];\r\n                                angular.extend(result, modelInstance);\r\n\r\n                                // TODO: Convert all dates to ISO Format\r\n                                result[theModel.lastModifiedFieldName] = new Date().toISOString();\r\n\r\n                                // TODO: Manage Cascade Create/Update/Delete\r\n                                result = theModel.getRawModelObject(result, false);\r\n\r\n                                var updateReq = store.put(result);\r\n\r\n                                updateReq.onsuccess = function () {\r\n                                    response = new AdapterResponse(result, 1);\r\n                                    $log.debug('IndexedDBAdapter: Update ' + theModel.modelName, response, modelInstance);\r\n                                    dfd.resolve(response);\r\n                                };\r\n                                updateReq.onerror = function () {\r\n                                    dfd.reject(buildError(this.error));\r\n                                };\r\n                            } else {\r\n                                dfd.reject(buildError('Not Found', AdapterResponse.NOT_FOUND));\r\n                            }\r\n                        };\r\n                        req.onerror = function () {\r\n                            dfd.reject(buildError(this.error));\r\n                        };\r\n\r\n                    }, function (e) {\r\n                        dfd.reject(buildError(e));\r\n                    });\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // TODO: Cascade Delete\r\n                /**\r\n                 * Removes an Entity given the primary key of the entity to remove\r\n                 * @param {Object} theModel The model of the entity to remove\r\n                 * @param {String|Number} pk The primary key of the entity\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.remove = function (theModel, pk) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var buildError = function (e) {\r\n                        response = new AdapterResponse(e, 0, AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                        $log.error('IndexedDBAdapter: Remove ' + theModel.modelName, response);\r\n                        return response;\r\n                    };\r\n\r\n                    connect().then(function () {\r\n                        var tables = [theModel.dataSourceName];\r\n                        var tx = db.transaction(tables, \"readwrite\");\r\n                        var store = tx.objectStore(theModel.dataSourceName);\r\n                        var req = store.get(pk);\r\n                        req.onsuccess = function () {\r\n                            if (req.result && !req.result[theModel.deletedFieldName]) {\r\n                                var result = req.result;\r\n                                result[theModel.deletedFieldName] = true;\r\n                                result[theModel.lastModifiedFieldName] = new Date().toISOString();\r\n                                var updateReq = store.put(result);\r\n                                updateReq.onsuccess = function () {\r\n                                    response = new AdapterResponse(null, 1, AdapterResponse.NO_CONTENT);\r\n                                    $log.debug('IndexedDBAdapter: Remove ' + theModel.modelName, response);\r\n                                    dfd.resolve(response);\r\n                                };\r\n                                updateReq.onerror = function () {\r\n                                    dfd.reject(buildError(this.error));\r\n                                };\r\n                            } else {\r\n                                dfd.reject(buildError('Not Found', AdapterResponse.NOT_FOUND));\r\n                            }\r\n                        };\r\n                        req.onerror = function () {\r\n                            dfd.reject(buildError(this.error));\r\n                        };\r\n                    }, function (e) {\r\n                        dfd.reject(buildError(e));\r\n                    });\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Takes an Array of entities and creates/updates/deletes them\r\n                 * @param {Object} theModel The model of the entities to synchronize\r\n                 * @param {Array} dataToSync An array of objects to create/update/delete\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.synchronize = function (theModel, dataToSync) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var buildError = function (e) {\r\n                        response = new AdapterResponse(e, 0, AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                        $log.error('IndexedDBAdapter: Synchronize ' + theModel.modelName, response, dataToSync);\r\n                        return response;\r\n                    };\r\n\r\n                    connect().then(function () {\r\n                        var tables = [theModel.dataSourceName];\r\n                        var tx = db.transaction(tables, \"readwrite\");\r\n\r\n                        var i;\r\n                        var promises = [];\r\n                        for (i = 0; i < dataToSync.length; i++) {\r\n                            if (dataToSync[i][theModel.deletedFieldName]) {\r\n                                promises.push(hardRemove(theModel, tx, dataToSync[i][theModel.primaryKeyFieldName]));\r\n                            } else {\r\n                                promises.push(createOrUpdate(theModel, tx, dataToSync[i]));\r\n                            }\r\n                        }\r\n\r\n                        $q.all(promises).then(function (results) {\r\n                            response = new AdapterResponse(results, results.length, AdapterResponse.OK);\r\n                            $log.debug('IndexedDBAdapter: Synchronize ' + theModel.modelName, response, dataToSync);\r\n                            dfd.resolve(response);\r\n                        }, function (e) {\r\n                            dfd.reject(buildError(e));\r\n                        });\r\n                    }, function (e) {\r\n                        dfd.reject(buildError(e));\r\n                    });\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Creates a new Entity if not found or updates the existing one. Used in synchronization.\r\n                var createOrUpdate = function (theModel, tx, modelInstance) {\r\n                    var dfd = $q.defer();\r\n\r\n                    var objectStore = tx.objectStore(theModel.dataSourceName);\r\n                    var req = objectStore.get(modelInstance[theModel.primaryKeyFieldName]);\r\n                    req.onsuccess = function () {\r\n                        var result = req.result;\r\n                        if (result) {\r\n                            angular.extend(result, modelInstance);\r\n                            result = theModel.getRawModelObject(result, false);\r\n\r\n                            var updateReq = objectStore.put(result);\r\n                            updateReq.onsuccess = function () {\r\n                                dfd.resolve(result);\r\n                            };\r\n                            updateReq.onerror = function () {\r\n                                dfd.reject(this.error);\r\n                            };\r\n                        } else {\r\n                            var createReq = objectStore.add(modelInstance);\r\n                            createReq.onsuccess = function () {\r\n                                dfd.resolve(modelInstance);\r\n                            };\r\n                            createReq.onerror = function () {\r\n                                dfd.reject(this.error);\r\n                            };\r\n                        }\r\n                    };\r\n                    req.onerror = function () {\r\n                        dfd.reject(this.error);\r\n                    };\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Hard deletes an Entity. Used in synchronization.\r\n                var hardRemove = function (theModel, tx, pk) {\r\n                    var dfd = $q.defer();\r\n\r\n                    var store = tx.objectStore(theModel.dataSourceName);\r\n                    var req = store.delete(pk);\r\n                    req.onsuccess = function () {\r\n                        dfd.resolve();\r\n                    };\r\n                    req.onerror = function () {\r\n                        dfd.reject(this.error);\r\n                    };\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Given an expand path, finds all the DB tables required for the transaction\r\n                // Recursive\r\n                var getTablesFromExpandPath = function (theModel, expandPath) {\r\n                    var tables = [];\r\n                    var pathsToExpand = expandPath.split('.');\r\n                    var toExpand = pathsToExpand[0];\r\n                    if (toExpand) {\r\n                        var association = theModel.getAssociationByAlias(toExpand);\r\n                        var model = association.getModel();\r\n                        if (association && model) {\r\n                            tables.push(model.dataSourceName);\r\n                            if (pathsToExpand.length > 1) {\r\n                                tables = tables.concat(getTablesFromExpandPath(model, pathsToExpand.substring(pathsToExpand.indexOf('.') + 1)));\r\n                            }\r\n                        }\r\n                    }\r\n                    return tables;\r\n                };\r\n\r\n                // Given queryOptions, finds all the DB tables required for the transaction\r\n                var getTablesFromQueryOptions = function (theModel, queryOptions) {\r\n                    var tables = [];\r\n                    var $expand;\r\n\r\n                    if (queryOptions) {\r\n                        $expand = queryOptions.$expand();\r\n                    }\r\n                    if ($expand) {\r\n                        var paths = $expand.split(',');\r\n                        var i;\r\n                        for (i = 0; i < paths.length; i++) {\r\n                            tables = tables.concat(getTablesFromExpandPath(theModel, paths[i]));\r\n                        }\r\n                    }\r\n                    return tables;\r\n                };\r\n\r\n                // Expands a has one model association\r\n                var expandHasOne = function (model, result, association, tx, pathsToExpand) {\r\n                    var dfd = $q.defer();\r\n\r\n                    if (result[association.mappedBy] === undefined) {\r\n                        result[association.mappedBy] = null;\r\n                        dfd.resolve();\r\n                        return dfd.promise;\r\n                    }\r\n\r\n                    var store = tx.objectStore(model.dataSourceName);\r\n                    var pathToExpand = pathsToExpand.join('.');\r\n                    var req = store.get(result[association.mappedBy]);\r\n\r\n                    req.onsuccess = function () {\r\n                        if (req.result && !req.result[model.deletedFieldName]) {\r\n                            result[association.alias] = req.result;\r\n                            if (pathsToExpand.length > 1) {\r\n                                expandPath(req.result, model, pathToExpand.substring(pathToExpand.indexOf('.') + 1), tx).then(function () {\r\n                                    dfd.resolve();\r\n                                }, function (e) {\r\n                                    dfd.reject(e);\r\n                                });\r\n                            } else {\r\n                                dfd.resolve();\r\n                            }\r\n                        } else {\r\n                            result[association.alias] = null;\r\n                            dfd.resolve();\r\n                        }\r\n                    };\r\n                    req.onerror = function () {\r\n                        dfd.reject(this.error);\r\n                    };\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Expands a has many model association\r\n                var expandHasMany = function (model, result, association, tx, pathsToExpand) {\r\n                    var dfd = $q.defer();\r\n                    var store = tx.objectStore(model.dataSourceName);\r\n                    var pathToExpand = pathsToExpand.join('.');\r\n                    var index = store.index(association.mappedBy);\r\n                    var req = index.openCursor();\r\n                    var results = [];\r\n\r\n                    req.onsuccess = function (event) {\r\n                        var cursor = event.target.result;\r\n                        if (cursor) {\r\n                            if (!cursor.value[model.deletedFieldName] && cursor.key === result[model.primaryKeyFieldName]) {\r\n                                results.push(cursor.value);\r\n                            }\r\n                            cursor.continue();\r\n                        } else {\r\n\r\n                            var filter = association.getOptions(result).$filter();\r\n                            if (filter) {\r\n                                results = applyFilter(results, filter);\r\n                            }\r\n\r\n                            result[association.alias] = results;\r\n                            if (pathsToExpand.length > 1) {\r\n                                var i;\r\n                                var promises = [];\r\n                                for (i = 0; i < results.length; i++) {\r\n                                    promises.push(expandPath(results[i], model, pathToExpand.substring(pathToExpand.indexOf('.') + 1), tx));\r\n                                }\r\n                                $q.all(promises).then(function () {\r\n                                    dfd.resolve();\r\n                                }, function (e) {\r\n                                    dfd.reject(e);\r\n                                });\r\n                            } else {\r\n                                dfd.resolve();\r\n                            }\r\n                        }\r\n                    };\r\n                    req.onerror = function () {\r\n                        dfd.reject(this.error);\r\n                    };\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Expands a Model association given an expand path\r\n                // Recursive\r\n                var expandPath = function (result, theModel, pathToExpand, tx) {\r\n                    var pathsToExpand = pathToExpand.split('.');\r\n                    var toExpand = pathsToExpand[0];\r\n\r\n                    if (toExpand) {\r\n                        var association = theModel.getAssociationByAlias(toExpand);\r\n                        var model = association.getModel();\r\n                        if (association && model) {\r\n                            if (association.type === 'hasOne') {\r\n                                return expandHasOne(model, result, association, tx, pathsToExpand);\r\n                            } else if (association.type === 'hasMany') {\r\n                                return expandHasMany(model, result, association, tx, pathsToExpand);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // There is nothing left to expand, just resolve.\r\n                    var dfd = $q.defer();\r\n                    dfd.resolve();\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Expands all Model associations defined in the query options $expand clause\r\n                var performExpand = function (result, theModel, queryOptions, tx) {\r\n                    var dfd = $q.defer();\r\n                    var $expand;\r\n                    var promises = [];\r\n\r\n                    if (queryOptions) {\r\n                        $expand = queryOptions.$expand();\r\n                    }\r\n                    if ($expand) {\r\n                        var paths = $expand.split(',');\r\n                        var i;\r\n                        for (i = 0; i < paths.length; i++) {\r\n                            promises.push(expandPath(result, theModel, paths[i], tx));\r\n                        }\r\n                        $q.all(promises).then(function () {\r\n                            dfd.resolve();\r\n                        }, function (e) {\r\n                            $log.error('IndexedDBAdapter: PerformExpand', e, $expand, result);\r\n                            dfd.reject(e);\r\n                        });\r\n                    } else {\r\n                        dfd.resolve();\r\n                    }\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Checks if a result matches a predicate filter\r\n                var resultMatchesFilters = function (result, predicate) {\r\n                    return predicate.test(result);\r\n                };\r\n\r\n                // Applies a filter predicate to a set of results and returns an array of the matching results\r\n                var applyFilter = function (results, filterPredicate) {\r\n                    if (filterPredicate && results) {\r\n                        results = results.filter(function (a) {\r\n                            return resultMatchesFilters(a, filterPredicate);\r\n                        });\r\n                    }\r\n                    return results;\r\n                };\r\n\r\n                // Sorts the data given an $orderBy clause in query options\r\n                var applyOrderBy = function (results, queryOptions) {\r\n                    if (!queryOptions) {\r\n                        return results;\r\n                    }\r\n                    var orderBy = queryOptions.$orderBy();\r\n                    if (orderBy) {\r\n                        var property = orderBy.split(' ')[0];\r\n                        var direction = orderBy.split(' ')[1] || \"\";\r\n                        results.sort(function (a, b) {\r\n                            if (a[property] > b[property]) {\r\n                                return (direction.toLowerCase() === 'desc') ? -1 : 1;\r\n                            }\r\n                            if (b[property] > a[property]) {\r\n                                return (direction.toLowerCase() === 'desc') ? 1 : -1;\r\n                            }\r\n                            return 0;\r\n                        });\r\n                    }\r\n                    return results;\r\n                };\r\n\r\n                // Applies paging to a set of results and returns a sliced array of results\r\n                var applyPaging = function (results, queryOptions) {\r\n                    if (!queryOptions) {\r\n                        return results;\r\n                    }\r\n                    var top = queryOptions.$top();\r\n                    var skip = queryOptions.$skip();\r\n                    if (top > 0 && skip >= 0) {\r\n                        results = results.slice(skip, skip + top);\r\n                    }\r\n                    return results;\r\n                };\r\n\r\n                return adapter;\r\n            }\r\n        ];\r\n    }\r\n]);","angular.module('recall.adapter.oDataREST', ['recall']).provider('recallODataRESTAdapter', [\r\n    function () {\r\n\r\n        var providerConfig = {};\r\n\r\n        // Sets the location of the server api endpoint\r\n        providerConfig.serverAPILocation = \"/api/\";\r\n        this.setServerAPILocation = function (serverAPILocation) {\r\n            if (serverAPILocation.substring(serverAPILocation.length - 1) !== \"/\") {\r\n                serverAPILocation += '/';\r\n            }\r\n            providerConfig.serverAPILocation = serverAPILocation;\r\n            return this;\r\n        };\r\n\r\n        // Sets the name of the results property in the server's response\r\n        providerConfig.resultsField = \"results\";\r\n        this.setResultsField = function (resultsField) {\r\n            providerConfig.resultsField = resultsField;\r\n            return this;\r\n        };\r\n\r\n        // Sets the name of the total count property in the server's response\r\n        providerConfig.totalCountFiled = \"totalCount\";\r\n        this.setTotalCountFiled = function (totalCountFiled) {\r\n            providerConfig.totalCountFiled = totalCountFiled;\r\n            return this;\r\n        };\r\n\r\n        this.$get = [\r\n            '$http',\r\n            '$log',\r\n            '$q',\r\n            'recallAdapterResponse',\r\n\r\n            function ($http,\r\n                      $log,\r\n                      $q,\r\n                      AdapterResponse) {\r\n\r\n                var adapter = {};\r\n\r\n                // Appends the query options to the URL\r\n                var getUrlWithOptions = function (url, queryOptions) {\r\n                    url += queryOptions ? queryOptions.parseOptions() : \"\";\r\n                    return url;\r\n                };\r\n\r\n                /**\r\n                 * Creates a new Entity\r\n                 * @param {Object} theModel The model of the entity to create\r\n                 * @param {Object} modelInstance The entity to create\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.create = function (theModel, modelInstance) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var url = providerConfig.serverAPILocation + theModel.dataSourceName;\r\n\r\n                    $http.post(url, modelInstance)\r\n                        .success(function (data, status, headers, config) {\r\n                            response = new AdapterResponse(data, 1, status, headers, config);\r\n                            $log.debug('ODataRESTAdapter: Create ' + theModel.modelName, response);\r\n                            dfd.resolve(response);\r\n                        })\r\n                        .error(function (error, status, headers, config) {\r\n                            response = new AdapterResponse(error, 0, status, headers, config);\r\n                            $log.error('ODataRESTAdapter: Create ' + theModel.modelName, response, modelInstance);\r\n                            dfd.reject(response);\r\n                        });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Finds a single entity given a primary key\r\n                 * @param {Object} theModel The model of the entity to find\r\n                 * @param {String|Number} pk The primary key of the entity to find\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use for $expand\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.findOne = function (theModel, pk, queryOptions) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    if (!pk) {\r\n                        response = new AdapterResponse(\"No Primary Key was supplied\", 0, AdapterResponse.BAD_REQUEST);\r\n                        $log.error('ODataRESTAdapter: FindOne ' + theModel.modelName, response, pk, queryOptions);\r\n                        return $q.reject(response);\r\n                    }\r\n\r\n                    var url = getUrlWithOptions(providerConfig.serverAPILocation + theModel.dataSourceName + \"/\" + pk, queryOptions);\r\n\r\n                    $http.get(url)\r\n                        .success(function (data, status, headers, config) {\r\n                            response = new AdapterResponse(data, 1, status, headers, config);\r\n                            $log.debug('ODataRESTAdapter: FindOne ' + theModel.modelName, response, pk, queryOptions);\r\n                            dfd.resolve(response);\r\n                        })\r\n                        .error(function (error, status, headers, config) {\r\n                            response = new AdapterResponse(error, 0, status, headers, config);\r\n                            $log.error('ODataRESTAdapter: FindOne ' + theModel.modelName, response, pk, queryOptions);\r\n                            dfd.reject(response);\r\n                        });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Finds a set of Model entities\r\n                 * @param {Object} theModel The model of the entities to find\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.find = function (theModel, queryOptions) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var url = getUrlWithOptions(providerConfig.serverAPILocation + theModel.dataSourceName, queryOptions);\r\n\r\n                    $http.get(url)\r\n                        .success(function (data, status, headers, config) {\r\n                            var results = data;\r\n                            var totalCount;\r\n\r\n                            if (providerConfig.resultsField) {\r\n                                if (data[providerConfig.resultsField]) {\r\n                                    results = data[providerConfig.resultsField];\r\n                                }\r\n                                if (providerConfig.totalCountFiled && data[providerConfig.totalCountFiled]) {\r\n                                    totalCount = data[providerConfig.totalCountFiled];\r\n                                }\r\n                            }\r\n\r\n                            response = new AdapterResponse(results, totalCount, status, headers, config);\r\n                            $log.debug('ODataRESTAdapter: Find ' + theModel.modelName, response, queryOptions);\r\n                            dfd.resolve(response);\r\n                        })\r\n                        .error(function (error, status, headers, config) {\r\n                            response = new AdapterResponse(error, 0, status, headers, config);\r\n                            $log.error('ODataRESTAdapter: Find ' + theModel.modelName, response, queryOptions);\r\n                            dfd.reject(response);\r\n                        });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Updates a Model entity given the primary key of the entity\r\n                 * @param {Object} theModel The model of the entity to update\r\n                 * @param {String|Number} pk The primary key of the entity\r\n                 * @param {Object} modelInstance The entity to update\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.update = function (theModel, pk, modelInstance) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    if (!pk) {\r\n                        response = new AdapterResponse(\"No Primary Key was supplied\", 0, AdapterResponse.BAD_REQUEST);\r\n                        $log.error('ODataRESTAdapter: Update ' + theModel.modelName, response, modelInstance);\r\n                        return $q.reject(response);\r\n                    }\r\n\r\n                    var url = providerConfig.serverAPILocation + theModel.dataSourceName + \"/\" + pk;\r\n\r\n                    $http.put(url, modelInstance)\r\n                        .success(function (data, status, headers, config) {\r\n                            response = new AdapterResponse(data, 1, status, headers, config);\r\n                            $log.debug('ODataRESTAdapter: Update ' + theModel.modelName, response, modelInstance);\r\n                            dfd.resolve(response);\r\n                        })\r\n                        .error(function (error, status, headers, config) {\r\n                            response = new AdapterResponse(error, 0, status, headers, config);\r\n                            $log.error('ODataRESTAdapter: Update ' + theModel.modelName, response, modelInstance);\r\n                            dfd.reject(response);\r\n                        });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Removes an Entity given the primary key of the entity to remove\r\n                 * @param {Object} theModel The model of the entity to remove\r\n                 * @param {String|Number} pk The primary key of the entity\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.remove = function (theModel, pk) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    if (!pk) {\r\n                        response = new AdapterResponse(\"No Primary Key was supplied\", 0, AdapterResponse.BAD_REQUEST);\r\n                        $log.error('ODataRESTAdapter: Remove ' + theModel.modelName, response, pk);\r\n                        return $q.reject(response);\r\n                    }\r\n\r\n                    var url = providerConfig.serverAPILocation + theModel.dataSourceName + \"/\" + pk;\r\n\r\n                    $http({method: 'DELETE', url: url})\r\n                        .success(function (data, status, headers, config) {\r\n                            response = new AdapterResponse(data, 1, status, headers, config);\r\n                            $log.debug('ODataRESTAdapter: Remove ' + theModel.modelName, response, pk);\r\n                            dfd.resolve(response);\r\n                        })\r\n                        .error(function (error, status, headers, config) {\r\n                            response = new AdapterResponse(error, 0, status, headers, config);\r\n                            $log.error('ODataRESTAdapter: Remove ' + theModel.modelName, response, pk);\r\n                            dfd.reject(response);\r\n                        });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Takes an Array of entities and creates/updates/deletes them\r\n                 * @param {Object} theModel The model of the entities to synchronize\r\n                 * @param {Array} dataToSync An array of objects to create/update/delete\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.synchronize = function (theModel, dataToSync, lastSync) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var url = providerConfig.serverAPILocation + theModel.dataSourceName;\r\n\r\n                    $http.put(url, {data: dataToSync, lastSync: lastSync})\r\n                        .success(function (data, status, headers, config) {\r\n                            var results = data;\r\n                            var totalCount;\r\n\r\n                            if (providerConfig.resultsField) {\r\n                                if (data[providerConfig.resultsField]) {\r\n                                    results = data[providerConfig.resultsField];\r\n                                }\r\n                                if (providerConfig.totalCountFiled && data[providerConfig.totalCountFiled]) {\r\n                                    totalCount = data[providerConfig.totalCountFiled];\r\n                                }\r\n                            }\r\n\r\n                            response = new AdapterResponse(results, totalCount, status, headers, config);\r\n                            $log.debug('ODataRESTAdapter: Synchronize ' + theModel.modelName, response, dataToSync);\r\n                            dfd.resolve(response);\r\n                        })\r\n                        .error(function (error, status, headers, config) {\r\n                            response = new AdapterResponse(error, 0, status, headers, config);\r\n                            $log.error('ODataRESTAdapter: Synchronize ' + theModel.modelName, response, dataToSync);\r\n                            dfd.reject(response);\r\n                        });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                return adapter;\r\n            }\r\n        ];\r\n    }\r\n]);","angular.module('recall.adapter.sync', ['recall']).provider('recallSyncAdapter', [\r\n    function () {\r\n\r\n        var providerConfig = {};\r\n\r\n        // Sets the master adapter\r\n        providerConfig.masterAdapter = \"\";\r\n        this.setMaster = function (masterAdapter) {\r\n            providerConfig.masterAdapter = masterAdapter;\r\n            return this;\r\n        };\r\n\r\n        // Sets the slave adapter\r\n        providerConfig.slaveAdapter = \"\";\r\n        this.setSlave = function (slaveAdapter) {\r\n            providerConfig.slaveAdapter = slaveAdapter;\r\n            return this;\r\n        };\r\n\r\n        this.$get = [\r\n            '$injector',\r\n            '$log',\r\n            '$q',\r\n            'recallAdapterResponse',\r\n            'recallLocalStorage',\r\n            'recallPredicate',\r\n            'recallPreparedQueryOptions',\r\n\r\n            function ($injector,\r\n                      $log,\r\n                      $q,\r\n                      AdapterResponse,\r\n                      localStorage,\r\n                      Predicate,\r\n                      PreparedQueryOptions) {\r\n\r\n                var adapter = {};\r\n\r\n                /**\r\n                 * Validates the Model during creation\r\n                 * @param {Object} theModel\r\n                 * @returns {Boolean} True if the model passes validation\r\n                 */\r\n                adapter.modelValidationHook = function (theModel) {\r\n                    var master = getMaster();\r\n                    var slave = getSlave();\r\n\r\n                    if (!master) {\r\n                        $log.error('SyncAdapter: Master Adapter not Set', this, theModel);\r\n                        return false;\r\n                    }\r\n                    if (!slave) {\r\n                        $log.error('SyncAdapter: Slave Adapter not Set', this, theModel);\r\n                        return false;\r\n                    }\r\n\r\n                    if (typeof master.synchronize !== 'function') {\r\n                        $log.error('SyncAdapter: Synchronize handler not found on the master adapter', this, theModel);\r\n                        return false;\r\n                    }\r\n                    if (typeof slave.synchronize !== 'function') {\r\n                        $log.error('SyncAdapter: Synchronize handler not found on the slave adapter', this, theModel);\r\n                        return false;\r\n                    }\r\n\r\n                    if (typeof master.modelValidationHook === 'function' && !master.modelValidationHook(theModel)) {\r\n                        return false;\r\n                    }\r\n                    if (typeof slave.modelValidationHook === 'function' && !slave.modelValidationHook(theModel)) {\r\n                        return false;\r\n                    }\r\n\r\n                    return true;\r\n                };\r\n\r\n                /**\r\n                 * Creates a new Entity on the Slave and attempts to sync to the Master\r\n                 * @param {Object} theModel The model of the entity to create\r\n                 * @param {Object} modelInstance The entity to create\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use for preferMaster\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.create = function (theModel, modelInstance, queryOptions) {\r\n                    if (queryOptions && queryOptions.preferMaster() === true) {\r\n                        return getMaster().create(theModel, modelInstance);\r\n                    } else {\r\n                        return getSlave().create(theModel, modelInstance);\r\n                    }\r\n                    // TODO: Sync\r\n                };\r\n\r\n                /**\r\n                 * Finds a single entity given a primary key on the Slave\r\n                 * @param {Object} theModel The model of the entity to find\r\n                 * @param {String|Number} pk The primary key of the entity to find\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use for $expand and preferMaster\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.findOne = function (theModel, pk, queryOptions) {\r\n                    var response;\r\n\r\n                    if (!pk) {\r\n                        response = new AdapterResponse(\"No Primary Key was supplied\", 0, AdapterResponse.BAD_REQUEST);\r\n                        $log.error('SyncAdapter: FindOne ' + theModel.modelName, response, pk, queryOptions);\r\n                        return $q.reject(response);\r\n                    }\r\n\r\n                    if (queryOptions && queryOptions.preferMaster() === true) {\r\n                        return getMaster().findOne(theModel, pk, queryOptions);\r\n                    } else {\r\n                        return getSlave().findOne(theModel, pk, queryOptions);\r\n                    }\r\n                };\r\n\r\n                /**\r\n                 * Finds a set of Model entities on the Slave\r\n                 * @param {Object} theModel The model of the entities to find\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.find = function (theModel, queryOptions) {\r\n                    if (queryOptions && queryOptions.preferMaster() === true) {\r\n                        return getMaster().find(theModel, queryOptions);\r\n                    } else {\r\n                        return getSlave().find(theModel, queryOptions);\r\n                    }\r\n                };\r\n\r\n                /**\r\n                 * Updates a Model entity on the Slave given the primary key of the entity. Attempts to sync to the Master.\r\n                 * @param {Object} theModel The model of the entity to update\r\n                 * @param {String|Number} pk The primary key of the entity\r\n                 * @param {Object} modelInstance The entity to update\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use for preferMaster\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.update = function (theModel, pk, modelInstance, queryOptions) {\r\n                    var response;\r\n\r\n                    if (!pk) {\r\n                        response = new AdapterResponse(\"No Primary Key was supplied\", 0, AdapterResponse.BAD_REQUEST);\r\n                        $log.error('SyncAdapter: Update ' + theModel.modelName, response, modelInstance);\r\n                        return $q.reject(response);\r\n                    }\r\n\r\n                    if (queryOptions && queryOptions.preferMaster() === true) {\r\n                        return getMaster().update(theModel, pk, modelInstance);\r\n                    } else {\r\n                        return getSlave().update(theModel, pk, modelInstance);\r\n                    }\r\n                    // TODO: Sync\r\n                };\r\n\r\n                /**\r\n                 * Removes an Entity from the Slave given the primary key of the entity to remove. Attempts to sync to the Master.\r\n                 * @param {Object} theModel The model of the entity to remove\r\n                 * @param {String|Number} pk The primary key of the entity\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use for preferMaster\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.remove = function (theModel, pk, queryOptions) {\r\n                    var response;\r\n\r\n                    if (!pk) {\r\n                        response = new AdapterResponse(\"No Primary Key was supplied\", 0, AdapterResponse.BAD_REQUEST);\r\n                        $log.error('SyncAdapter: Remove ' + theModel.modelName, response, pk);\r\n                        return $q.reject(response);\r\n                    }\r\n\r\n                    if (queryOptions && queryOptions.preferMaster() === true) {\r\n                        return getMaster().remove(theModel, pk);\r\n                    } else {\r\n                        return getSlave().remove(theModel, pk);\r\n                    }\r\n                    // TODO: Sync\r\n                };\r\n\r\n                /**\r\n                 * Manually Syncs the Slave and Master adapters\r\n                 * @param {Object} theModel The model of the entities to synchronize\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.synchronize = function (theModel) {\r\n                    return processSyncRequest(theModel);\r\n                };\r\n\r\n                var getAdapter = function (adapter) {\r\n                    return (typeof adapter === 'string') ? $injector.get(adapter) : adapter;\r\n                };\r\n                var getMaster = function () {\r\n                    return getAdapter(providerConfig.masterAdapter);\r\n                };\r\n                var getSlave = function () {\r\n                    return getAdapter(providerConfig.slaveAdapter);\r\n                };\r\n\r\n                /**\r\n                 * Represents the result of a sync operation\r\n                 * @param {Array} sent An array of entities sent to the remote adapter\r\n                 * @param {Array} returned An array of data objects returned from the remote adapter\r\n                 * @param {Number} totalProcessed The total number of entities processed in the sync operation\r\n                 * @param {String} status The operation's status message\r\n                 * @constructor\r\n                 */\r\n                var SyncResult = function (sent, returned, totalProcessed, status) {\r\n                    this.sent = sent;\r\n                    this.returned = returned;\r\n                    this.totalProcessed = totalProcessed;\r\n                    this.status = status;\r\n                };\r\n\r\n                /**\r\n                 * Retrieves the last sync time for a given model in ISO format\r\n                 * @param {Object} theModel The model initiating the sync (the sync time is stored per model)\r\n                 * @returns {String} The last sync date in ISO format\r\n                 */\r\n                var getLastSyncTime = function (theModel) {\r\n                    return localStorage.get(localStorage.keys.LAST_SYNC, theModel.modelName);\r\n                };\r\n\r\n                /**\r\n                 * Updates the last sync time for a model\r\n                 * @param {Object} theModel The model initiating the sync\r\n                 */\r\n                var updateLastSyncTimeToNow = function (theModel) {\r\n                    localStorage.set(localStorage.keys.LAST_SYNC, new Date().toISOString(), theModel.modelName);\r\n                };\r\n\r\n                /**\r\n                 * Sends data from the local adapter to the remote adapter to update.\r\n                 * @param {Object} theModel The model initiating the sync\r\n                 * @param {Array} data An array of objects to send to the remote adapter to sync\r\n                 * @returns {promise}\r\n                 */\r\n                var sendSyncRequestData = function (theModel, data) {\r\n                    var lastSync = getLastSyncTime(theModel);\r\n                    return getMaster().synchronize(theModel, data, lastSync);\r\n                };\r\n\r\n                /**\r\n                 * Processes the data sent back from the remote adapter. This will update/create/delete records in the local\r\n                 * adapter\r\n                 * @param {Object} theModel The model initiating the sync\r\n                 * @param {Array} data An array of data objects to update/create/delete\r\n                 * @returns {promise}\r\n                 */\r\n                var processSyncResponseData = function (theModel, data) {\r\n                    var lastSync = getLastSyncTime(theModel);\r\n                    return getSlave().synchronize(theModel, data, lastSync);\r\n                };\r\n\r\n                /**\r\n                 * Initializes a sync request\r\n                 * @param {Object} theModel The model initiating the sync\r\n                 * @returns {promise}\r\n                 */\r\n                var processSyncRequest = function (theModel) {\r\n                    var dfd = $q.defer();\r\n                    var result;\r\n\r\n                    var syncRequestData = [];\r\n                    var syncResponseData = [];\r\n                    var totalItemsProcessed = 0;\r\n\r\n                    var handleError = function (e) {\r\n                        result = new SyncResult(syncRequestData, syncResponseData, totalItemsProcessed, e);\r\n                        $log.error('SyncAdapter: ' + theModel.modelName, result);\r\n                        dfd.reject(result);\r\n                    };\r\n\r\n                    var handleComplete = function () {\r\n                        result = new SyncResult(syncRequestData, syncResponseData, totalItemsProcessed, 'Complete');\r\n                        $log.debug('SyncAdapter: ' + theModel.modelName, 'Sync Complete', result);\r\n                        updateLastSyncTimeToNow(theModel);\r\n                        dfd.resolve(result);\r\n                    };\r\n\r\n                    $log.debug('SyncAdapter: ' + theModel.modelName + ' Sync Started');\r\n\r\n                    var lastSync = getLastSyncTime(theModel);\r\n                    var queryOptions = new PreparedQueryOptions();\r\n                    if (lastSync) {\r\n                        var predicate = new Predicate('lastModified').greaterThanOrEqualTo(lastSync);\r\n                        queryOptions.$filter(predicate);\r\n                    }\r\n\r\n                    getSlave().find(theModel, queryOptions, true).then(function (response) {\r\n                        $log.debug('SyncAdapter: Sending ' + response.count + ' local item(s) to sync');\r\n                        totalItemsProcessed += response.count;\r\n                        syncRequestData = response.data;\r\n                        sendSyncRequestData(theModel, response.data).then(function (syncResponse) {\r\n                            // TODO: Handle Conflicts\r\n\r\n                            $log.debug('SyncAdapter: Found ' + syncResponse.data.length + ' remote item(s) to sync');\r\n                            totalItemsProcessed += syncResponse.data.length;\r\n                            syncResponseData = syncResponse.data;\r\n\r\n                            if (syncResponse.data.length > 0) {\r\n                                processSyncResponseData(theModel, syncResponse.data).then(handleComplete, handleError);\r\n                            } else {\r\n                                // No data from server to sync\r\n                                handleComplete();\r\n                            }\r\n                        }, handleError);\r\n                    }, handleError);\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                return adapter;\r\n            }\r\n        ];\r\n    }\r\n]);","angular.module('recall').factory(\"recallAssociation\", [\r\n    '$injector',\r\n    '$log',\r\n    '$q',\r\n    'recallPredicate',\r\n    'recallPreparedQueryOptions',\r\n\r\n    function ($injector, $log, $q, Predicate, PreparedQueryOptions) {\r\n\r\n        /**\r\n         * Association class\r\n         * @param {Object|Association} definition\r\n         * @constructor\r\n         */\r\n        var Association = function (definition) {\r\n            this.invalid = false;\r\n\r\n            if (definition.type) {\r\n                this.type = definition.type;\r\n            } else if (typeof definition.hasOne === 'string') {\r\n                this.type = 'hasOne';\r\n            } else if (typeof definition.hasMany === 'string') {\r\n                this.type = 'hasMany';\r\n            }\r\n\r\n            this.modelName = definition.modelName || definition.hasOne || definition.hasMany;\r\n            this.alias = definition.as || definition.alias || this.modelName;\r\n            this.mappedBy = definition.mappedBy || definition.foreignKey;\r\n            this.getOptions = definition.getOptions || function () { return new PreparedQueryOptions() };\r\n\r\n            if (!this.modelName || !this.type || !this.mappedBy) {\r\n                $log.error('Association: The association definition is invalid', definition);\r\n                this.invalid = true;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Gets the Association's Model\r\n         * @returns {Object} The model\r\n         */\r\n        Association.prototype.getModel = function () {\r\n            var recallService = $injector.get('recall');\r\n            return recallService.getModel(this.modelName);\r\n        };\r\n\r\n        /**\r\n         * Expands the association and adds it to the entity\r\n         * @param {Entity} entity The entity to add the expanded association to\r\n         * @returns {promise}\r\n         */\r\n        Association.prototype.expand = function (entity) {\r\n            var dfd = $q.defer();\r\n            var self = this;\r\n            var Model = self.getModel();\r\n\r\n            if (!Model) {\r\n                return $q.reject('Association: Expand could not find the association\\'s Model');\r\n            }\r\n\r\n            var queryOptions = self.getOptions(entity);\r\n\r\n            if (self.type === 'hasOne') {\r\n\r\n                Model.adapter.findOne(Model, entity[self.mappedBy], queryOptions).then(function (response) {\r\n                    entity[self.alias] = Model.getRawModelObject(response.data);\r\n                    // TODO: The association should be an entity and should have transformResult called\r\n                    entity.$entity.storedState[self.alias] = Model.getRawModelObject(response.data);\r\n                    $log.debug(\"Association: Expand\", self.type, self.alias, entity, response);\r\n                    dfd.resolve();\r\n                }, function (e) {\r\n                    $log.error(\"Association: Expand\", self.type, self.alias, entity, e);\r\n                    dfd.reject(e);\r\n                });\r\n\r\n            } else if (self.type === 'hasMany') {\r\n\r\n                var predicate = new Predicate(self.mappedBy).equals(entity.$getPrimaryKey());\r\n                var existingPredicate = queryOptions.$filter();\r\n                if (existingPredicate) {\r\n                    predicate = Predicate.and([predicate, existingPredicate]);\r\n                }\r\n                queryOptions.$filter(predicate);\r\n\r\n                Model.adapter.find(Model, queryOptions).then(function (response) {\r\n                    var base = [];\r\n                    var stored = [];\r\n                    // TODO: The associations should be entities and should have transformResult called\r\n                    var i;\r\n                    for (i = 0; i < response.data.length; i++) {\r\n                        base.push(Model.getRawModelObject(response.data[i]));\r\n                        stored.push(Model.getRawModelObject(response.data[i]));\r\n                    }\r\n                    entity[self.alias] = base;\r\n                    entity.$entity.storedState[self.alias] = stored;\r\n                    $log.debug(\"Association: Expand\", self.type, self.alias, entity, response);\r\n                    dfd.resolve();\r\n                }, function (e) {\r\n                    $log.error(\"Association: Expand\", self.type, self.alias, entity, e);\r\n                    dfd.reject(e);\r\n                });\r\n            } else {\r\n                $log.error(\"Association: Expand Association type not supported\", self.type, self.alias, entity);\r\n                dfd.reject(\"Association type not supported\");\r\n            }\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        return Association;\r\n    }\r\n]);","angular.module('recall').factory(\"recallEntity\", [\r\n    '$log',\r\n    '$q',\r\n\r\n    function ($log, $q) {\r\n\r\n        /**\r\n         * An Entity is an object that represents an instance of a Model. The Entity instance exposes save and remove\r\n         * operations as well as dirty checking and validation.\r\n         *\r\n         * @param {Object} object The object to construct the entity from\r\n         * @param {Object} model The model that created the Entity\r\n         * @param {Boolean} [persisted = false] Set to true if this model was created from an object that came from an adapter.\r\n         * @constructor\r\n         */\r\n        var Entity = function (object, model, persisted) {\r\n            model.extendFromRawObject(this, object);\r\n\r\n            Object.defineProperty(this, \"$entity\", {value: {\r\n                lastDirtyCheck: new Date().getTime(),\r\n                lastDirtyState: false,\r\n                persisted: persisted === true,\r\n                saveInProgress: false,\r\n                storedState: null\r\n            }});\r\n            Object.defineProperty(this, \"$model\", {value: model});\r\n\r\n            this.$convertAssociationsToEntities();\r\n            this.$storeState();\r\n        };\r\n\r\n        /**\r\n         * Retrieves the Primary Key for the Entity.\r\n         * @returns {String|Number} The Primary Key\r\n         */\r\n        Entity.prototype.$getPrimaryKey = function () {\r\n            return this[this.$model.primaryKeyFieldName];\r\n        };\r\n\r\n        /**\r\n         *\r\n         */\r\n        Entity.prototype.$convertAssociationsToEntities = function () {\r\n            var i;\r\n            var alias;\r\n            var ForeignModel;\r\n            var a;\r\n            for (i = 0; i < this.$model.associations.length; i++) {\r\n                alias = this.$model.associations[i].alias;\r\n                ForeignModel = this.$model.associations[i].getModel();\r\n\r\n                if (this.$model.associations[i].type === 'hasOne') {\r\n                    if (this[alias] !== undefined && !this[alias].$entity) {\r\n                        this[alias] = new ForeignModel.Entity(this[alias], this.$entity.persisted);\r\n                    }\r\n                } else if (this.$model.associations[i].type === 'hasMany') {\r\n                    if (this[alias] !== undefined && this[alias] instanceof Array) {\r\n                        for (a = 0; a < this[alias].length; a++) {\r\n                            if (!this[alias].$entity) {\r\n                                this[alias][a] = new ForeignModel.Entity(this[alias][a], this.$entity.persisted);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Expands a given association on an Entity\r\n         *\r\n         * @param {String} associationName The alias of the association to expand\r\n         * @returns {promise}\r\n         */\r\n        Entity.prototype.$expand = function (associationName) {\r\n            var association = this.$model.getAssociationByAlias(associationName);\r\n\r\n            if (!association) {\r\n                return $q.reject('Entity: $expand could not find the association.');\r\n            }\r\n\r\n            return association.expand(this);\r\n        };\r\n\r\n        /**\r\n         * Validates an entity against the model's field definition.\r\n         * @returns {Boolean} True if the model validation succeeds\r\n         */\r\n        Entity.prototype.$isValid = function () {\r\n            // TODO: This does not validate associations\r\n            var field;\r\n            var matchesType = false;\r\n            var fieldIsUndefined;\r\n            for (field in this.$model.fields) {\r\n                if (this.$model.fields.hasOwnProperty(field)) {\r\n                    fieldIsUndefined = (this[field] === null || this[field] === undefined);\r\n                    if (this.$model.fields[field].notNull === true && fieldIsUndefined) {\r\n                        $log.debug(\"Entity: $isValid returned false\", \"NotNull field was null\", field, this);\r\n                        return false;\r\n                    }\r\n                    switch (this.$model.fields[field].type) {\r\n                        case 'String':\r\n                            matchesType = typeof this[field] === 'string';\r\n                            break;\r\n                        case 'Number':\r\n                            matchesType = typeof this[field] === 'number';\r\n                            break;\r\n                        case 'Boolean':\r\n                            matchesType = this[field] === true || this[field] === false;\r\n                            break;\r\n                        case 'Date':\r\n                            matchesType = this[field] instanceof Date || !isNaN(Date.parse(this[field]));\r\n                            break;\r\n                    }\r\n                    if (!matchesType && !fieldIsUndefined) {\r\n                        $log.debug(\"Entity: $isValid returned false\", \"The type was not \" + this.$model.fields[field].type, field, this);\r\n                        return false;\r\n                    }\r\n                    if (typeof this.$model.fields[field].validate === \"function\" && !this.$model.fields[field].validate(this[field])) {\r\n                        $log.debug(\"Entity: $isValid returned false\", \"Custom validator failed\", field, this);\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n\r\n        /**\r\n         * Persists the model with the adapter. This will update the model if it exists in the adapter or create\r\n         * the model if it does not exist.\r\n         *\r\n         * @method $save\r\n         * @param {PreparedQueryOptions} queryOptions\r\n         * @returns {promise} Resolves with the model\r\n         */\r\n        Entity.prototype.$save = function (queryOptions) {\r\n            var dfd = $q.defer();\r\n            var self = this;\r\n\r\n            if (!self.$isValid()) {\r\n                $log.warn(\"Entity: $save: aborted\", self, self[self.$model.primaryKeyFieldName]);\r\n                self.$reset();\r\n                return $q.reject(\"aborted\");\r\n            }\r\n\r\n            self.$entity.saveInProgress = true;\r\n            var itemToSave = self.$model.preSave(self);\r\n\r\n            var updateSavedState = function (entity, succeeded) {\r\n                entity.$entity.saveInProgress = false;\r\n                if (succeeded !== false) {\r\n                    entity.$storeState();\r\n                    entity.$entity.persisted = true;\r\n                } else {\r\n                    entity.$reset();\r\n                }\r\n            };\r\n\r\n            // The model exists in the DB\r\n            if (self.$entity.persisted && itemToSave[self.$model.primaryKeyFieldName]) {\r\n                itemToSave = self.$model.preUpdate(itemToSave);\r\n\r\n                var pk = itemToSave[self.$model.primaryKeyFieldName];\r\n                self.$model.adapter.update(self.$model, pk, itemToSave, queryOptions).then(function (response) {\r\n                    var result = self.$model.transformResult(response.data);\r\n                    self.$model.extendFromRawObject(self, result);\r\n                    updateSavedState(self, true);\r\n                    $log.debug(\"Entity: $save: update\", self, itemToSave, response);\r\n                    dfd.resolve(self);\r\n                }, function (e) {\r\n                    updateSavedState(self, false);\r\n                    $log.error(\"Entity: $save: update\", self, itemToSave, e);\r\n                    dfd.reject(e);\r\n                });\r\n            } else {\r\n                // The model is new\r\n                itemToSave = self.$model.preCreate(itemToSave);\r\n                self.$model.adapter.create(self.$model, itemToSave, queryOptions).then(function (response) {\r\n                    var result = self.$model.transformResult(response.data);\r\n                    self.$model.extendFromRawObject(self, result);\r\n                    updateSavedState(self, true);\r\n                    $log.debug(\"Entity: $save: create\", self, itemToSave, response);\r\n                    dfd.resolve(self);\r\n                }, function (e) {\r\n                    updateSavedState(self, false);\r\n                    $log.error(\"Entity: $save: create\", self, itemToSave, e);\r\n                    dfd.reject(e);\r\n                });\r\n            }\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        /**\r\n         * Removes the model from the adapter.\r\n         *\r\n         * @method $remove\r\n         * @param {PreparedQueryOptions} queryOptions\r\n         * @returns {promise}\r\n         */\r\n        Entity.prototype.$remove = function (queryOptions) {\r\n            if (this[this.$model.primaryKeyFieldName]) {\r\n                return this.$model.adapter.remove(this.$model, this[this.$model.primaryKeyFieldName], queryOptions);\r\n            }\r\n            $log.error('Entity: $remove', 'The primary key was not found');\r\n            return $q.reject(\"The primary key was not found.\");\r\n        };\r\n\r\n        /**\r\n         * Stores the model's state so that it can later be reset to the state if needed. This is called\r\n         * on $save so that the model's state is always at the latest save point.\r\n         *\r\n         * @method $storeState\r\n         */\r\n        Entity.prototype.$storeState = function () {\r\n            this.$entity.storedState = this.$model.getRawModelObject(this, false);\r\n            this.$entity.lastDirtyCheck = new Date().getTime();\r\n            this.$entity.lastDirtyState = false;\r\n        };\r\n\r\n        /**\r\n         * Checks to see if the properties have diverged from the stored state. If so, this means that\r\n         * the properties have been changed and have not been saved.\r\n         *\r\n         * @method $isDirty\r\n         * @returns {Boolean} True if the properties are different than what is in the stored state.\r\n         */\r\n        Entity.prototype.$isDirty = function () {\r\n            if (this.$entity.saveInProgress) {\r\n                return false;\r\n            }\r\n\r\n            if (!this.$entity.storedState) {\r\n                return false;\r\n            }\r\n\r\n            var now = new Date().getTime();\r\n            var delta = now - this.$entity.lastDirtyCheck;\r\n            if (this.$entity.lastDirtyCheck && delta < this.$model.dirtyCheckThreshold) {\r\n                return this.$entity.lastDirtyState;\r\n            }\r\n\r\n            this.$entity.lastDirtyCheck = new Date().getTime();\r\n\r\n            // TODO: This does not dirty check associations\r\n            var field;\r\n            var viewValue;\r\n            var storedValue;\r\n            for (field in this.$model.fields) {\r\n                if (this.$model.fields.hasOwnProperty(field)) {\r\n                    storedValue = this.$entity.storedState[field];\r\n                    viewValue = this[field];\r\n\r\n                    if (storedValue !== viewValue) {\r\n                        $log.debug(\"Entity: $isDirty\", this[this.$model.primaryKeyFieldName], true, delta);\r\n                        this.$entity.lastDirtyState = true;\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            $log.debug(\"Entity: $isDirty\", this[this.$model.primaryKeyFieldName], false, delta);\r\n            this.$entity.lastDirtyState = false;\r\n            return false;\r\n        };\r\n\r\n        /**\r\n         * Resets a model back to its stored state. This will reset any pending changes back to the\r\n         * entities last save or initial retrieval.\r\n         *\r\n         * @method $reset\r\n         * @returns {Array} A list of the changed field names and their before and after values\r\n         */\r\n        Entity.prototype.$reset = function () {\r\n            if (!this.$entity.storedState) {\r\n                this.$storeState();\r\n                return [];\r\n            }\r\n\r\n            var prop;\r\n            var changedProperties = [];\r\n\r\n            for (prop in this.$entity.storedState) {\r\n                if (this.$entity.storedState.hasOwnProperty(prop) && this[prop] !== this.$entity.storedState[prop]) {\r\n                    changedProperties.push({\r\n                        name: prop,\r\n                        before: this[prop],\r\n                        after: this.$entity.storedState[prop]\r\n                    });\r\n                    this[prop] = this.$entity.storedState[prop];\r\n                }\r\n            }\r\n\r\n            this.$entity.lastDirtyState = false;\r\n            this.$entity.lastDirtyCheck = new Date().getTime();\r\n\r\n            $log.debug(\"Entity: $reset\", this[this.$model.primaryKeyFieldName], changedProperties);\r\n            return changedProperties;\r\n        };\r\n\r\n        return Entity;\r\n    }\r\n]);","angular.module('recall').factory('recallLocalStorage', [\r\n    '$document',\r\n    '$window',\r\n\r\n    function ($document, $window) {\r\n\r\n        /**\r\n         * The localStorage utility helps manage the storage and retrieval of registered application data.\r\n         */\r\n        var storage = {\r\n            keys: {\r\n                LAST_SYNC: 'LAST_SYNC'\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Checks if the key is registered with the class.\r\n         *\r\n         * @param {String} key\r\n         * @returns {Boolean} True if the key exists\r\n         */\r\n        var keyExists = function (key) {\r\n            return storage.keys[key] !== undefined;\r\n        };\r\n\r\n        /**\r\n         * Appends a modifier to a key\r\n         * @param {String} key\r\n         * @param {String} modifier\r\n         * @returns {String} The key with the modifier appended.\r\n         */\r\n        var addKeyModifier = function (key, modifier) {\r\n            if (modifier) {\r\n                key += \"_\" + modifier;\r\n            }\r\n            return key;\r\n        };\r\n\r\n        /**\r\n         * Register a new key with the local storage service.\r\n         * @param {String} key\r\n         */\r\n        storage.registerKey = function (key) {\r\n            if (!keyExists(key)) {\r\n                storage.keys[key] = key;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Stores data by key in local browser storage.\r\n         *\r\n         * @param {String} key The key to use as the local storage name. Must be a key found in localStorage.keys.\r\n         * @param {String} value The string value to store.\r\n         * @param {String} keyModifier An additional identifier on the key.\r\n         */\r\n        storage.set = function (key, value, keyModifier) {\r\n            if (keyExists(key)) {\r\n                key = addKeyModifier(key, keyModifier);\r\n                if (storage.supportsLocalStorage()) {\r\n                    $window.localStorage.setItem(key, value);\r\n                } else {\r\n                    var life = 60 * 60 * 24 * 5;\r\n                    var v = encodeURIComponent(value);\r\n                    $document.cookie = key + '=' + v + '; max-age=' + life + ';';\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Retrieves stored data by key.\r\n         *\r\n         * @param {String} key The key of the data to retrieve. Must be a key found in localStorage.keys.\r\n         * @param {String} keyModifier An additional identifier on the key.\r\n         * @return {String} The string value stored.\r\n         */\r\n        storage.get = function (key, keyModifier) {\r\n            var value = \"\";\r\n\r\n            if (keyExists(key)) {\r\n                key = addKeyModifier(key, keyModifier);\r\n                if (storage.supportsLocalStorage()) {\r\n                    value = $window.localStorage.getItem(key) || \"\";\r\n                } else {\r\n                    var regexp = new RegExp(key + \"=([^;]+)\", \"g\");\r\n                    var c = regexp.exec($document.cookie);\r\n\r\n                    if (c) {\r\n                        value = decodeURIComponent(c[1]) ;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return value;\r\n        };\r\n\r\n        /**\r\n         * Removes stored data by key.\r\n         *\r\n         * @param {String} key The key of the data to remove. Must be a key found in localStorage.keys.\r\n         * @param {String} keyModifier An additional identifier on the key.\r\n         */\r\n        storage.remove = function (key, keyModifier) {\r\n            if (keyExists(key)) {\r\n                key = addKeyModifier(key, keyModifier);\r\n                if (storage.supportsLocalStorage()) {\r\n                    $window.localStorage.removeItem(key);\r\n                } else {\r\n                    $document.cookie = key + '=; max-age=0;';\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Checks if the browser supports html5 local storage.\r\n         *\r\n         * @private\r\n         * @returns {Boolean} True if the browser does support html5 local storage.\r\n         */\r\n        storage.supportsLocalStorage = function () {\r\n            try {\r\n                return 'localStorage' in $window && $window.localStorage !== null;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        };\r\n\r\n        return storage;\r\n    }\r\n]);","angular.module('recall').factory(\"recallModel\", [\r\n    '$log',\r\n    '$q',\r\n    'recallAssociation',\r\n    'recallEntity',\r\n    'recallModelField',\r\n\r\n    function ($log,\r\n              $q,\r\n              Association,\r\n              Entity,\r\n              ModelField) {\r\n\r\n        // Bubbles an error promise to the top.\r\n        var propagateError = function (e) {\r\n            return $q.reject(e);\r\n        };\r\n\r\n        /**\r\n         * A Model is in charge of defining a structure for a type of Entity. The model provides CRUD operations for\r\n         * that type of Entity as well as some other utility functions.\r\n         *\r\n         * Models should not be created directly. Instead, the recall service should be used as a proxy for creating\r\n         * models.\r\n         *\r\n         * @constructor\r\n         */\r\n        var Model = function (modelDefinition) {\r\n            this.modelName = modelDefinition.name;\r\n            this.dataSourceName = modelDefinition.dataSourceName || modelDefinition.name;\r\n\r\n            // Add the model definition to the Model as read only\r\n            Object.defineProperty(this, \"modelDefinition\", {value: modelDefinition, writable: false});\r\n\r\n            // Add a Constructor method to the Model for constructing new Entities from the Model: new Model.Entity();\r\n            var self = this;\r\n            Object.defineProperty(this, \"Entity\", {writable: false, configurable: false, value: function (obj, persisted) {\r\n                return( new Entity(obj, self, persisted === true) );\r\n            }});\r\n\r\n            this.fields = {};\r\n            this.associations = [];\r\n\r\n            this.dirtyCheckThreshold = 30;\r\n\r\n            this.primaryKeyFieldName = null;\r\n            this.lastModifiedFieldName = null;\r\n            this.deletedFieldName = null;\r\n            this.adapter = null;\r\n        };\r\n\r\n        Model.prototype.setLastModifiedFieldName = function (lastModifiedFieldName) {\r\n            this.lastModifiedFieldName = lastModifiedFieldName;\r\n        };\r\n\r\n        Model.prototype.setDeletedFieldName = function (deletedFieldName) {\r\n            this.deletedFieldName = deletedFieldName;\r\n        };\r\n\r\n        Model.prototype.setAdapter = function (adapter) {\r\n            this.adapter = adapter;\r\n        };\r\n\r\n        Model.prototype.setDirtyCheckThreshold = function (dirtyCheckThreshold) {\r\n            this.dirtyCheckThreshold = dirtyCheckThreshold;\r\n        };\r\n\r\n        // Initializes the fields using the common ModelField class\r\n        Model.prototype.initializeModelFields = function () {\r\n            var modelDefinitionFields = this.modelDefinition.fields;\r\n            var field;\r\n            var modelField;\r\n            var lastModifiedField;\r\n            var deletedField;\r\n            for (field in modelDefinitionFields) {\r\n                if (modelDefinitionFields.hasOwnProperty(field)) {\r\n                    modelField = new ModelField(field, modelDefinitionFields[field]);\r\n\r\n                    if (modelField.primaryKey) {\r\n                        this.primaryKeyFieldName = field;\r\n                    }\r\n\r\n                    if (modelField.invalid) {\r\n                        return false;\r\n                    } else {\r\n                        this.fields[field] = modelField;\r\n                    }\r\n\r\n                    if (field === this.lastModifiedFieldName) {\r\n                        lastModifiedField = modelField;\r\n                    }\r\n\r\n                    if (field === this.deletedFieldName) {\r\n                        deletedField = field;\r\n                    }\r\n                }\r\n            }\r\n            if (lastModifiedField && lastModifiedField.type !== \"Date\") {\r\n                $log.error('Model: The last modified field is not a Date field');\r\n                return false;\r\n            }\r\n            if (this.lastModifiedFieldName && !lastModifiedField) {\r\n                this.fields[this.lastModifiedFieldName] = new ModelField(this.lastModifiedFieldName, {\r\n                    type: \"Date\",\r\n                    index: true\r\n                });\r\n            }\r\n            if (deletedField && deletedField.type !== \"Boolean\") {\r\n                $log.error('Model: The deletedField field is not a Boolean field');\r\n                return false;\r\n            }\r\n            if (this.deletedFieldName && !deletedField) {\r\n                this.fields[this.deletedFieldName] = new ModelField(this.deletedFieldName, {\r\n                    type: \"Boolean\",\r\n                    index: true\r\n                });\r\n            }\r\n            return true;\r\n        };\r\n\r\n        // TODO: Support many to many associations\r\n        // Initialize the Model associations using the HasOneAssociation and HasManyAssociation classes\r\n        Model.prototype.initializeAssociations = function () {\r\n            var modelDefinitionAssociations = this.modelDefinition.associations;\r\n            if (!modelDefinitionAssociations) {\r\n                return;\r\n            }\r\n            var i;\r\n            var association;\r\n            for (i = 0; i < modelDefinitionAssociations.length; i++) {\r\n                association = new Association(modelDefinitionAssociations[i]);\r\n\r\n                if (association && !association.invalid) {\r\n                    if (association.type === 'hasOne') {\r\n                        if (!this.fields[association.mappedBy]) {\r\n                            // If no field is defined for the foreign key, define one assuming the same foreign key type.\r\n                            this.fields[association.mappedBy] = new ModelField(association.mappedBy, {\r\n                                type: this.fields[this.primaryKeyFieldName].type,\r\n                                index: association.mappedBy\r\n                            });\r\n                        } else {\r\n                            this.fields[association.mappedBy].index = association.mappedBy;\r\n                        }\r\n                    }\r\n\r\n                    this.associations.push(association);\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Gets a Model Association by the alias name. The alias is defined as the \"as\" property on an alias if\r\n         * defined and falls back to the model name if \"as\" is not defined.\r\n         *\r\n         * @param {String} alias The association's alias\r\n         * @returns {Object} The association object\r\n         */\r\n        Model.prototype.getAssociationByAlias = function (alias) {\r\n            var i;\r\n            for (i = 0; i < this.associations.length; i++) {\r\n                if (this.associations[i].alias === alias) {\r\n                    return this.associations[i];\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Extends an entity with a raw object. The raw object could be input from a controller or the result from\r\n         * an adapter.\r\n         *\r\n         * @param {Object} entity The entity to extend\r\n         * @param {Object} rawObject The object to extend from.\r\n         */\r\n        Model.prototype.extendFromRawObject = function (entity, rawObject) {\r\n            angular.extend(entity, this.getRawModelObject(rawObject));\r\n        };\r\n\r\n        /**\r\n         * Gets a raw representation of the model object to be used in adapter transactions. This returns an object\r\n         * in which only the Model defined fields are set. This also looks through expanded associations to set the\r\n         * foreignKey field for one to n associations and sets the association to the raw association object.\r\n         *\r\n         * @param {Object} modelEntity\r\n         * @param {Boolean} [includeExpandedAssociations = true] Include the expanded association in the raw object.\r\n         * @returns {Object} The raw object\r\n         */\r\n        Model.prototype.getRawModelObject = function (modelEntity, includeExpandedAssociations) {\r\n            var object = {};\r\n            var field;\r\n            for (field in this.fields) {\r\n                if (this.fields.hasOwnProperty(field)) {\r\n                    object[field] = modelEntity[field];\r\n                }\r\n            }\r\n            var i;\r\n            var alias;\r\n            var foreignKey;\r\n            var ForeignModel;\r\n            var a;\r\n            for (i = 0; i < this.associations.length; i++) {\r\n                alias = this.associations[i].alias;\r\n                ForeignModel = this.associations[i].getModel();\r\n\r\n                if (this.associations[i].type === 'hasOne') {\r\n                    if (modelEntity[alias] !== undefined) {\r\n                        foreignKey = modelEntity[alias][ForeignModel.primaryKeyFieldName];\r\n                        object[this.associations[i].mappedBy] = foreignKey;\r\n\r\n                        if (includeExpandedAssociations !== false) {\r\n                            object[alias] = ForeignModel.getRawModelObject(modelEntity[alias]);\r\n                        }\r\n                    }\r\n                } else if (this.associations[i].type === 'hasMany' && includeExpandedAssociations !== false) {\r\n                    if (modelEntity[alias] !== undefined && modelEntity[alias] instanceof Array) {\r\n                        object[alias] = [];\r\n                        for (a = 0; a < modelEntity[alias].length; a++) {\r\n                            object[alias].push(ForeignModel.getRawModelObject(modelEntity[alias][a]));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Applies the default values on any undefined field in an entity.\r\n         *\r\n         * @param {Object} entity The entity to set the default values on\r\n         */\r\n        Model.prototype.applyDefaultValues = function (entity) {\r\n            var field;\r\n            for (field in this.fields) {\r\n                if (this.fields.hasOwnProperty(field)) {\r\n                    if (typeof this.fields[field].getDefaultValue === 'function' && entity[field] === undefined) {\r\n                        entity[field] = this.fields[field].getDefaultValue(entity);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Transforms all objects returned by adapter transactions. This calls the transformResult function defined\r\n         * in the model. This also recursively calls transformResult on all associations.\r\n         *\r\n         * @method transformResult\r\n         * @param {Object} resultEntity\r\n         * @returns {Object} The transformed result\r\n         */\r\n        Model.prototype.transformResult = function (resultEntity) {\r\n            var i;\r\n            var alias;\r\n            var ForeignModel;\r\n            var a;\r\n            for (i = 0; i < this.associations.length; i++) {\r\n                alias = this.associations[i].alias;\r\n                ForeignModel = this.associations[i].getModel();\r\n\r\n                if (this.associations[i].type === 'hasOne') {\r\n                    if (resultEntity[alias] !== undefined) {\r\n                        resultEntity[alias] = ForeignModel.transformResult(resultEntity[alias]);\r\n                    }\r\n                } else if (this.associations[i].type === 'hasMany') {\r\n                    if (resultEntity[alias] !== undefined && resultEntity[alias] instanceof Array) {\r\n                        for (a = 0; a < resultEntity[alias].length; a++) {\r\n                            resultEntity[alias][a] = ForeignModel.transformResult(resultEntity[alias][a]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            resultEntity = this.getRawModelObject(resultEntity);\r\n            if (typeof this.modelDefinition.transformResult === 'function') {\r\n                resultEntity = this.modelDefinition.transformResult(resultEntity);\r\n            }\r\n            return resultEntity;\r\n        };\r\n\r\n        /**\r\n         * Ran before the create and update adapter transactions. This calls the preSave function defined in the\r\n         * model.\r\n         *\r\n         * @method preSave\r\n         * @param {Object} entity\r\n         * @returns {Object} The raw transformed entity\r\n         */\r\n        Model.prototype.preSave = function (entity) {\r\n            entity = this.getRawModelObject(entity);\r\n            if (typeof this.modelDefinition.preSave === 'function') {\r\n                return this.modelDefinition.preSave(entity);\r\n            }\r\n            return entity;\r\n        };\r\n\r\n        /**\r\n         * Ran before the create adapter transaction. This applies the default values to any undefined fields and\r\n         * then calls the preCreate function defined in the model.\r\n         *\r\n         * @method preCreate\r\n         * @param {Object} rawEntity\r\n         * @returns {Object} The raw transformed entity\r\n         */\r\n        Model.prototype.preCreate = function (rawEntity) {\r\n            this.applyDefaultValues(rawEntity);\r\n            if (typeof this.modelDefinition.preCreate === 'function') {\r\n                return this.modelDefinition.preCreate(rawEntity);\r\n            }\r\n            return rawEntity;\r\n        };\r\n\r\n        /**\r\n         * Ran before the update adapter transaction. This calls the preUpdate function defined in the model.\r\n         *\r\n         * @method preUpdate\r\n         * @param {Object} rawEntity\r\n         * @returns {Object} The raw transformed entity\r\n         */\r\n        Model.prototype.preUpdate = function (rawEntity) {\r\n            if (typeof this.modelDefinition.preUpdate === 'function') {\r\n                return this.modelDefinition.preUpdate(rawEntity);\r\n            }\r\n            return rawEntity;\r\n        };\r\n\r\n        /**\r\n         * Retrieves a single model from the adapter given a primary key. Query options can be passed to determine\r\n         * select and expand operations.\r\n         *\r\n         * @method findOne\r\n         * @param {String} pk The primary key of the model to retrieve\r\n         * @param {Object} [queryOptions] Query options to use for retrieval\r\n         * @returns {promise} Resolves with the Entity\r\n         */\r\n        Model.prototype.findOne = function (pk, queryOptions) {\r\n            var self = this;\r\n            if (!pk) {\r\n                $log.error('Model: FindOne', 'The primary key was not supplied');\r\n                return $q.reject(\"The primary key was not supplied.\");\r\n            }\r\n\r\n            return this.adapter.findOne(this, pk, queryOptions).then(function (response) {\r\n                var result = self.transformResult(response.data);\r\n                var entity = new Entity(result, self, true);\r\n                $log.debug(\"Model: FindOne\", entity, response, queryOptions);\r\n                return entity;\r\n            }, propagateError);\r\n        };\r\n\r\n        /**\r\n         * Retrieves a list of models from the adapter. Query options can be passed to determine top, skip, order by,\r\n         * select, expand, and filter operations.\r\n         *\r\n         * @method find\r\n         * @param {Object} [queryOptions] Query options to use for retrieval\r\n         * @returns {promise} Resolves with data.results and data.totalCount where results are Entities\r\n         */\r\n        Model.prototype.find = function (queryOptions) {\r\n            var self = this;\r\n            return this.adapter.find(this, queryOptions).then(function (response) {\r\n                var results = [];\r\n                var i;\r\n                for (i = 0; i < response.data.length; i++) {\r\n                    results.push(new Entity(self.transformResult(response.data[i]), self, true));\r\n                }\r\n\r\n                var clientResponse = {\r\n                    results: results,\r\n                    totalCount: response.count\r\n                };\r\n                $log.debug(\"Model: Find\", clientResponse, response, queryOptions);\r\n                return clientResponse;\r\n            }, propagateError);\r\n        };\r\n\r\n        /**\r\n         * Removes the model from the adapter given a primary key.\r\n         *\r\n         * @method remove\r\n         * @param {String} pk The primary key of the model to remove\r\n         * @param {Object} [queryOptions] Query options\r\n         * @returns {promise}\r\n         */\r\n        Model.prototype.remove = function (pk, queryOptions) {\r\n            if (!pk) {\r\n                $log.error('Model: Remove', 'The primary key was not supplied');\r\n                return $q.reject(\"The primary key was not supplied.\");\r\n            }\r\n            return this.adapter.remove(this, pk, queryOptions);\r\n        };\r\n\r\n        return Model;\r\n    }\r\n]);","angular.module('recall').factory(\"recallModelField\", [\r\n    '$log',\r\n\r\n    function ($log) {\r\n\r\n        /**\r\n         * Model Field class to make all model fields consistent\r\n         * @param {String} name\r\n         * @param {Object | String} definition The Field Definition or the Field Type\r\n         * @constructor\r\n         */\r\n        var ModelField = function (name, definition) {\r\n            this.invalid = false;\r\n            this.name = name;\r\n\r\n            if (typeof definition === 'string') {\r\n                this.type = definition;\r\n                this.primaryKey = false;\r\n                this.unique = false;\r\n                this.index = false;\r\n                this.notNull = false;\r\n            } else {\r\n                this.type = definition.type;\r\n                this.validate = definition.validate;\r\n                this.primaryKey = definition.primaryKey === true;\r\n                this.unique = definition.unique === true;\r\n                this.index = (typeof definition.index === 'string') ? definition.index : (definition.index === true) ? name : false;\r\n                this.notNull = definition.notNull === true;\r\n\r\n                if (typeof definition.getDefaultValue === 'function') {\r\n                    this.getDefaultValue = definition.getDefaultValue;\r\n                }\r\n            }\r\n\r\n            // The adapter or the adapter's handler should enforce uniqueness of the primary key.\r\n            // The index on the primary key should be handled automatically without needing to specify an index.\r\n            // In order to pass validation during creation, the primary key should not be set as notNull.\r\n            // This of course should be enforced by the adapter or the adapter's handler.\r\n            if (this.primaryKey) {\r\n                this.notNull = false;\r\n                this.unique = false;\r\n                this.index = false;\r\n            }\r\n\r\n            // TODO: Better field validation\r\n            if (!this.name || !this.type) {\r\n                this.invalid = true;\r\n                $log.error('ModelField: The field definition is invalid', this, definition);\r\n            }\r\n        };\r\n\r\n        return ModelField;\r\n    }\r\n]);","// Date.toISOString polyfill: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\r\nif (!Date.prototype.toISOString) {\r\n    (function () {\r\n\r\n        function pad(number) {\r\n            if (number < 10) {\r\n                return '0' + number;\r\n            }\r\n            return number;\r\n        }\r\n\r\n        Date.prototype.toISOString = function () {\r\n            return this.getUTCFullYear() +\r\n                '-' + pad(this.getUTCMonth() + 1) +\r\n                '-' + pad(this.getUTCDate()) +\r\n                'T' + pad(this.getUTCHours()) +\r\n                ':' + pad(this.getUTCMinutes()) +\r\n                ':' + pad(this.getUTCSeconds()) +\r\n                '.' + (this.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +\r\n                'Z';\r\n        };\r\n    }());\r\n}","angular.module('recall').factory('recallPredicate', [\r\n    function () {\r\n        /*\r\n         * BASED ON:\r\n         * Predicate\r\n         * version: 1.1.2\r\n         * author: David Hamilton\r\n         * license: https://github.com/nova706/PreparedQueryOptions/blob/master/LICENSE.txt (MIT)\r\n         * https://github.com/nova706/PreparedQueryOptions\r\n         *\r\n         */\r\n\r\n        /**\r\n         * A predicate is used for the $filter operator in a query. Predicates can be joined to query\r\n         * using a group of filters with the 'and' operator.\r\n         *\r\n         * This is a helper class for the PreparedQueryOptions class to assist in building complex\r\n         * filter clauses.\r\n         *\r\n         * @class Predicate\r\n         * @constructor\r\n         * @param {String} [property] The property to filter by.\r\n         * @param {Function} [parser] A function that returns the predicate string.\r\n         */\r\n        function Predicate(property, parser) {\r\n            this.property = property;\r\n            this.parser = parser;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Joins a provided set of predicates using the group operator and returns a new Predicate\r\n         *\r\n         * @method join\r\n         * @param {Predicate[]} predicates Array of predicates to join.\r\n         * @param {String} [groupOperator] The operator for the filter set ('and' 'or').\r\n         * @return {Predicate} Predicate object.\r\n         */\r\n        Predicate.join = function (predicates, groupOperator) {\r\n            if (predicates instanceof Array && predicates.length > 0) {\r\n                return new Predicate().join(predicates, groupOperator);\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Sets the property of a predicate\r\n         *\r\n         * @method setProperty\r\n         * @param {String} property\r\n         * @return {Predicate} Predicate object.\r\n         */\r\n        Predicate.prototype.setProperty = function (property) {\r\n            this.property = property;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operator to 'eq' and the value to the input parameter\r\n         *\r\n         * @method equals\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.equals = function (value) {\r\n            this.parser = function () {\r\n                return this.property + ' eq ' + escapeValue(value);\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operator to 'ne' and the value to the input parameter\r\n         *\r\n         * @method notEqualTo\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.notEqualTo = function (value) {\r\n            this.parser = function () {\r\n                return this.property + ' ne ' +  escapeValue(value);\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operator to 'gt' and the value to the input parameter\r\n         *\r\n         * @method greaterThan\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.greaterThan = function (value) {\r\n            this.parser = function () {\r\n                return this.property + ' gt ' +  escapeValue(value);\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operator to 'ge' and the value to the input parameter\r\n         *\r\n         * @method greaterThanOrEqualTo\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.greaterThanOrEqualTo = function (value) {\r\n            this.parser = function () {\r\n                return this.property + ' ge ' +  escapeValue(value);\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operator to 'lt' and the value to the input parameter\r\n         *\r\n         * @method lessThan\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.lessThan = function (value) {\r\n            this.parser = function () {\r\n                return this.property + ' lt ' +  escapeValue(value);\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operator to 'le' and the value to the input parameter\r\n         *\r\n         * @method lessThanOrEqualTo\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.lessThanOrEqualTo = function (value) {\r\n            this.parser = function () {\r\n                return this.property + ' le ' +  escapeValue(value);\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operation to substringof and the value to the input parameter\r\n         *\r\n         * @method contains\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.contains = function (value) {\r\n            this.parser = function () {\r\n                return 'substringof(' +  escapeValue(value) + ', ' + this.property + ')';\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operation to startswith and the value to the input parameter\r\n         *\r\n         * @method startsWith\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.startsWith = function (value) {\r\n            this.parser = function () {\r\n                return 'startswith(' + this.property + ', ' +  escapeValue(value) + ')';\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operation to endswith and the value to the input parameter\r\n         *\r\n         * @method startsWith\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.endsWith = function (value) {\r\n            this.parser = function () {\r\n                return 'endswith(' + this.property + ', ' +  escapeValue(value) + ')';\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Joins an existing predicate with additional predicates using the group operator\r\n         *\r\n         * @method join\r\n         * @param {Predicate|Predicate[]} predicates A single predicate or an array of predicates to join to the existing one.\r\n         * @param {String} [groupOperator] The operator for the filter set ('and' 'or').\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.join = function (predicates, groupOperator) {\r\n            var initialPredicate;\r\n\r\n            if (this.property && typeof this.parser === 'function') {\r\n                initialPredicate = new Predicate(this.property, this.parser);\r\n            }\r\n\r\n            var newPredicates = [];\r\n            if (predicates instanceof Predicate) {\r\n                newPredicates.push(predicates);\r\n            } else if (predicates instanceof Array && predicates.length > 0) {\r\n                var i;\r\n                for (i = 0; i < predicates.length; i++) {\r\n                    if (predicates[i]) {\r\n                        newPredicates.push(predicates[i]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (newPredicates.length > 0) {\r\n                delete this.parser;\r\n                delete this.property;\r\n\r\n                this.joinedPredicates = (this.joinedPredicates) ? this.joinedPredicates.concat(newPredicates) : newPredicates;\r\n                if (groupOperator || !this.groupOperator) {\r\n                    this.groupOperator = (groupOperator === 'or') ? 'or' : 'and';\r\n                }\r\n                if (initialPredicate) {\r\n                    this.joinedPredicates.unshift(initialPredicate);\r\n                }\r\n            }\r\n\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Joins an existing predicate with additional predicates using the 'and' group operator\r\n         *\r\n         * @method and\r\n         * @param {Predicate|Predicate[]} predicates A single predicate or an array of predicates to join to the existing one.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.and = function (predicates) {\r\n            return this.join(predicates, 'and');\r\n        };\r\n\r\n        /**\r\n         * Joins an existing predicate with additional predicates using the 'or' group operator\r\n         *\r\n         * @method or\r\n         * @param {Predicate|Predicate[]} predicates A single predicate or an array of predicates to join to the existing one.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.or = function (predicates) {\r\n            return this.join(predicates, 'or');\r\n        };\r\n\r\n        /**\r\n         * Evaluate an object to see if it matches the predicate filter conditions.\r\n         *\r\n         * @method test\r\n         * @param {Object} object The object to test against the predicate.\r\n         * @param {Boolean} [failOnMissingAssociation=true] Should the test fail when the a filter is performed against an expanded association that is not present\r\n         * @return {Boolean} True if the object matches the filter conditions.\r\n         */\r\n        Predicate.prototype.test = function (object, failOnMissingAssociation) {\r\n            return testPredicate(this, object, failOnMissingAssociation);\r\n        };\r\n\r\n        /**\r\n         * Builds and returns a URL parameter string based on the predicate.\r\n         *\r\n         * @method parsePredicate\r\n         * @param {Boolean} [nested = false] Used for building the nested group during recursion\r\n         * @returns {String}\r\n         */\r\n        Predicate.prototype.parsePredicate = function (nested) {\r\n            nested = (nested === true);\r\n            var urlString = '';\r\n\r\n            if (this.property && typeof this.parser === 'function') {\r\n                return this.parser();\r\n            }\r\n\r\n            if (this.joinedPredicates && this.joinedPredicates.length > 0) {\r\n                var i;\r\n                var predicate;\r\n                var predicateString;\r\n                for (i = 0; i < this.joinedPredicates.length; i++) {\r\n                    predicate = this.joinedPredicates[i];\r\n                    predicateString = predicate.parsePredicate(true);\r\n                    urlString += (i > 0) ? ' ' + this.groupOperator + ' ' + predicateString : predicateString;\r\n                }\r\n            }\r\n\r\n            return nested ? '(' + urlString + ')' : urlString;\r\n        };\r\n\r\n        /**\r\n         * Creates a predicate structure from a string\r\n         *\r\n         * @method fromString\r\n         * @param {String} predicateString\r\n         * @return {Predicate|null} null if the predicate could not be built from the string\r\n         */\r\n        Predicate.fromString = function (predicateString) {\r\n            if (typeof predicateString !== \"string\") {\r\n                return null;\r\n            }\r\n\r\n            // Extract all the filters out of the predicate string\r\n            var conditionMatcher = new RegExp(\"(substringof\\\\(.+?\\\\)|startswith\\\\(.+?\\\\)|endswith\\\\(.+?\\\\)|[\\\\w\\\\.]+?\\\\s(?:eq|ne|gt|ge|lt|le)\\\\s(?:\\\\w+|\\\\'.+?\\\\'))\", \"g\");\r\n            var filters = predicateString.match(conditionMatcher);\r\n\r\n            if (!filters) {\r\n                return null;\r\n            }\r\n\r\n            // Convert each filter into a predicate\r\n            var i;\r\n            for (i = 0; i < filters.length; i++) {\r\n                filters[i] = getPredicateFromSegment(filters[i]);\r\n                if (filters[i] === null) {\r\n                    return null;\r\n                }\r\n            }\r\n\r\n            if (filters.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            // Remove all predicates from string\r\n            i = 0;\r\n            predicateString = predicateString.replace(conditionMatcher, function () {\r\n                return i++;\r\n            });\r\n\r\n            if (filters.length === 1) {\r\n                if (predicateString.replace(/[0-9]|\\s|and|or/g, \"\") !== \"\") {\r\n                    return null;\r\n                }\r\n                return filters[0];\r\n            }\r\n\r\n            return buildPredicateFromMap(predicateString, filters);\r\n        };\r\n\r\n        /**\r\n         * Builds a predicate based on a predicate map and array of extracted filters\r\n         * @param {String} predicateMap A String representing a map of a predicate where the indexes map to the filters array\r\n         *                              \"1 and (2 or 3)\" where filters.length === 3\r\n         * @param {Predicate[]} filters An array of Predicates whose index map to the indexes on the predicateMap\r\n         * @returns {Predicate|Null} The resulting Predicate or null if the map is invalid\r\n         */\r\n        var buildPredicateFromMap = function (predicateMap, filters) {\r\n            var closeParenthesisIndex;\r\n            var openParenthesisIndex;\r\n            var groupString;\r\n            var filterIndexes;\r\n            var groupPredicate = null;\r\n            var groupFilters;\r\n            var operator;\r\n            var testNextLevel = true;\r\n\r\n            while (testNextLevel) {\r\n                closeParenthesisIndex = predicateMap.indexOf(')');\r\n                if (closeParenthesisIndex !== -1) {\r\n                    openParenthesisIndex = predicateMap.lastIndexOf('(', closeParenthesisIndex);\r\n                    groupString = predicateMap.substring(openParenthesisIndex + 1, closeParenthesisIndex);\r\n                    predicateMap = predicateMap.substring(0, openParenthesisIndex) + filters.length + predicateMap.substring(closeParenthesisIndex + 1);\r\n                } else {\r\n                    groupString = predicateMap;\r\n                    testNextLevel = false;\r\n                }\r\n\r\n                // If the group contains invalid characters then return null as an invalid predicate string.\r\n                if (groupString.replace(/[0-9]|\\s|and|or/g, \"\") !== \"\") {\r\n                    return null;\r\n                }\r\n\r\n                // If the group uses both 'and' and 'or' then return null as an invalid predicate string.\r\n                if (groupString.indexOf('and') >= 0 && groupString.indexOf('or') >= 0) {\r\n                    return null;\r\n                }\r\n\r\n                filterIndexes = groupString.match(/[0-9]+/g);\r\n                groupFilters = [];\r\n                var i;\r\n                for (i = 0; i < filterIndexes.length; i++) {\r\n                    groupFilters.push(filters[Number(filterIndexes[i])]);\r\n                }\r\n                operator = groupString.indexOf('or') >= 0 ? 'or' : 'and';\r\n                groupPredicate = new Predicate().join(groupFilters, operator);\r\n                filters.push(groupPredicate);\r\n            }\r\n\r\n            return groupPredicate;\r\n        };\r\n\r\n        /**\r\n         * Takes a predicate's value and if it is a string, adds single quotes around it.\r\n         *\r\n         * @method escapeValue\r\n         * @param {String|Boolean|Number|Date} value\r\n         * @returns {string} The string value\r\n         */\r\n        var escapeValue = function (value) {\r\n            if (value instanceof Date) {\r\n                value = value.toISOString();\r\n            }\r\n            return (typeof value === 'string') ? \"'\" + value + \"'\" : value.toString();\r\n        };\r\n\r\n        /**\r\n         * Returns the raw value of the predicate string\r\n         *\r\n         * @method convertValueToType\r\n         * @param {String} value\r\n         * @returns {String|Boolean|Number}\r\n         */\r\n        var convertValueToType = function (value) {\r\n            if (typeof value === 'string') {\r\n                if (value.indexOf(\"'\") >= 0) {\r\n                    return value.replace(/\\'/g, '');\r\n                }\r\n                if (value.toLowerCase() === 'true') {\r\n                    return true;\r\n                }\r\n                if (value.toLowerCase() === 'false') {\r\n                    return false;\r\n                }\r\n            }\r\n            if (!isNaN(value)) {\r\n                return Number(value);\r\n            }\r\n            return value;\r\n        };\r\n\r\n        /**\r\n         * Tests a predicate group to see if the object matches\r\n         * @param {Predicate} predicate\r\n         * @param {Object} object\r\n         * @returns {Boolean} True if the object matches the predicate\r\n         */\r\n        var testPredicateGroup = function (predicate, object) {\r\n            var result;\r\n            var i;\r\n            for (i = 0; i < predicate.joinedPredicates.length; i++) {\r\n                result = testPredicate(predicate.joinedPredicates[i], object);\r\n\r\n                // If the operator is 'and' and any of the filters do not match, return false.\r\n                if (predicate.groupOperator === 'and' && result === false) {\r\n                    return false;\r\n                }\r\n\r\n                // If the operator is 'or' and any of the filters match, return true.\r\n                if (predicate.groupOperator === 'or' && result === true) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            // The operator was 'and' and all of the filters matched or the operator was 'or' and none of the filters matched.\r\n            return predicate.groupOperator === 'and';\r\n        };\r\n\r\n        /**\r\n         * Tests an object to see if the filter conditions match a given predicate. Used for recursive tests.\r\n         *\r\n         * @param {Predicate} predicate\r\n         * @param {Object} object\r\n         * @param {Boolean} [failOnMissingAssociation=true] Should the test fail when the a filter is performed against an expanded association that is not present\r\n         */\r\n        var testPredicate = function (predicate, object, failOnMissingAssociation) {\r\n            if (predicate.joinedPredicates && predicate.joinedPredicates.length > 0) {\r\n                return testPredicateGroup(predicate, object);\r\n            }\r\n            if (predicate.property) {\r\n                var propertyPath = predicate.property.split('.');\r\n                var objectValue = object;\r\n                var i;\r\n                for (i = 0; i < propertyPath.length; i++) {\r\n                    if (objectValue.hasOwnProperty(propertyPath[i]) && objectValue[propertyPath[i]] !== undefined) {\r\n                        objectValue = objectValue[propertyPath[i]];\r\n                    } else {\r\n                        return (failOnMissingAssociation === false);\r\n                    }\r\n                }\r\n\r\n                var condition = predicate.parsePredicate();\r\n                if (condition.indexOf('(') >= 0) {\r\n                    return testComplexPredicate(condition, objectValue);\r\n                }\r\n                return testSimplePredicate(condition, objectValue);\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        /**\r\n         * Tests a complex predicate that uses startswith, endswith, or substringof\r\n         * @param {String} condition The Predicate condition\r\n         * @param {String|Number|Boolean} objectValue The value that is being tested\r\n         * @returns {Boolean} True if the object value matches the condition\r\n         */\r\n        var testComplexPredicate = function (condition, objectValue) {\r\n            var value;\r\n            var operator = condition.substr(0, condition.indexOf('('));\r\n            var start = condition.indexOf('(') + 1;\r\n            var end = condition.indexOf(')') - start;\r\n            var conditionParams = condition.substr(start, end);\r\n            conditionParams = conditionParams.replace(/\\'/g, '').split(', ');\r\n\r\n            switch (operator) {\r\n                case 'startswith':\r\n                    value = conditionParams[1].toLowerCase();\r\n                    return (objectValue.indexOf(value) === 0);\r\n                case 'endswith':\r\n                    value = conditionParams[1].toLowerCase();\r\n                    return (objectValue.indexOf(value) === objectValue.length - 1 - value.length);\r\n                case 'substringof':\r\n                    value = conditionParams[0].toLowerCase();\r\n                    return (objectValue.indexOf(value) >= 0);\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        /**\r\n         * Tests a simple predicate that uses lt, gt, le, ge, ne, or eq\r\n         * @param {String} condition The Predicate condition\r\n         * @param {String|Number|Boolean} objectValue The value that is being tested\r\n         * @returns {Boolean} True if the object value matches the condition\r\n         */\r\n        var testSimplePredicate = function (condition, objectValue) {\r\n            var conditionParams = condition.split(' ');\r\n            var operator = conditionParams[1];\r\n\r\n            var value = conditionParams.slice(2).join(' ');\r\n            value = convertValueToType(value);\r\n\r\n            // If both the predicate value and the object values are Date-like, convert them to dates to compare\r\n            if (objectValue instanceof Date && !isNaN(Date.parse(value))) {\r\n                value = Date.parse(value);\r\n                objectValue = objectValue.getTime();\r\n            } else if (typeof objectValue === 'string' && !isNaN(Date.parse(objectValue))) {\r\n                objectValue = Date.parse(objectValue);\r\n                value = Date.parse(value);\r\n            }\r\n\r\n            /* jshint eqeqeq: false */\r\n            switch (operator) {\r\n                case 'lt':\r\n                    return objectValue < value;\r\n                case 'gt':\r\n                    return objectValue > value;\r\n                case 'le':\r\n                    return objectValue <= value;\r\n                case 'ge':\r\n                    return objectValue >= value;\r\n                case 'ne':\r\n                    return objectValue != value;\r\n                case 'eq':\r\n                    return objectValue == value;\r\n            }\r\n            /* jshint eqeqeq: true */\r\n\r\n            return false;\r\n        };\r\n\r\n        /**\r\n         * Builds a predicate from a complex segment that uses startswith, endswith, or substringof\r\n         * @param {String} condition The predicate condition\r\n         * @returns {Predicate} The resulting Predicate\r\n         */\r\n        var getComplexPredicateFromSegment = function (condition) {\r\n            var predicate;\r\n            var value;\r\n            var parenPos = condition.indexOf('(');\r\n            var operator = condition.substring(0, parenPos);\r\n            var conditionParams = condition.substring(parenPos + 1, condition.indexOf(')')).split(', ');\r\n\r\n            switch (operator) {\r\n                case 'startswith':\r\n                    value = convertValueToType(conditionParams[1]);\r\n                    predicate = new Predicate(conditionParams[0]).startsWith(value);\r\n                    break;\r\n                case 'endswith':\r\n                    value = convertValueToType(conditionParams[1]);\r\n                    predicate = new Predicate(conditionParams[0]).endsWith(value);\r\n                    break;\r\n                case 'substringof':\r\n                    value = convertValueToType(conditionParams[0]);\r\n                    predicate = new Predicate(conditionParams[1]).contains(value);\r\n                    break;\r\n            }\r\n\r\n            return predicate;\r\n        };\r\n\r\n        /**\r\n         * Builds a predicate from a simple segment that uses eq, ne, gt, ge, lt, or le\r\n         * @param {String} condition The predicate condition\r\n         * @returns {Predicate} The resulting Predicate\r\n         */\r\n        var getSimplePredicateFromSegment = function (condition) {\r\n            var conditionParams = condition.split(' ');\r\n            var operator = conditionParams[1];\r\n            var value = convertValueToType(conditionParams.slice(2).join(' '));\r\n\r\n            var predicate = new Predicate(conditionParams[0]);\r\n\r\n            switch (operator) {\r\n                case 'eq':\r\n                    predicate.equals(value);\r\n                    break;\r\n                case 'ne':\r\n                    predicate.notEqualTo(value);\r\n                    break;\r\n                case 'gt':\r\n                    predicate.greaterThan(value);\r\n                    break;\r\n                case 'ge':\r\n                    predicate.greaterThanOrEqualTo(value);\r\n                    break;\r\n                case 'lt':\r\n                    predicate.lessThan(value);\r\n                    break;\r\n                case 'le':\r\n                    predicate.lessThanOrEqualTo(value);\r\n                    break;\r\n            }\r\n            return predicate;\r\n        };\r\n\r\n        /**\r\n         * Creates a predicate from a single condition eg: \"property eq 'value'\"\r\n         *\r\n         * @param {String} condition\r\n         * @return {Predicate} The predicate built from the condition\r\n         */\r\n        var getPredicateFromSegment = function (condition) {\r\n            if (condition.indexOf('(') >= 0) {\r\n                return getComplexPredicateFromSegment(condition);\r\n            }\r\n            return getSimplePredicateFromSegment(condition);\r\n        };\r\n\r\n        return Predicate;\r\n    }\r\n]);","angular.module('recall').factory('recallPreparedQueryOptions', [\r\n    'recallPredicate',\r\n\r\n    function (Predicate) {\r\n        /*\r\n         * BASED ON:\r\n         * PreparedQueryOptions\r\n         * version: 1.1.2\r\n         * author: David Hamilton\r\n         * license: https://github.com/nova706/PreparedQueryOptions/blob/master/LICENSE.txt (MIT)\r\n         * https://github.com/nova706/PreparedQueryOptions\r\n         *\r\n         */\r\n\r\n        /**\r\n         * PreparedQueryOptions are used to set, store and parse OData query parameters. Instead of passing\r\n         * multiple arguments to methods for each query option, simply pass the preparedQueryOptions object.\r\n         * Use the parseOptions method on the object to return an OData string for a query.\r\n         *\r\n         * @class PreparedQueryOptions\r\n         * @constructor\r\n         */\r\n        function PreparedQueryOptions() {\r\n            /**\r\n             * Stores the query options that have been set.\r\n             * @property options\r\n             * @type Object\r\n             * @default {}\r\n             */\r\n            this.options = {};\r\n        }\r\n\r\n        var isPredicate = function (object) {\r\n            return object && typeof object === \"object\" && typeof object.parsePredicate === \"function\";\r\n        };\r\n\r\n        /**\r\n         * Used in Sync Adapters to perform the CRUD operation against the Master instead of the Slave.\r\n         *\r\n         * @method preferMaster\r\n         * @param {Boolean} [preferMaster=false] Whether the SyncAdapter should prefer the slave or master.\r\n         * @return {PreparedQueryOptions|Boolean} PreparedQueryOptions object or the current preferMaster value.\r\n         */\r\n        PreparedQueryOptions.prototype.preferMaster = function (preferMaster) {\r\n            if (arguments.length === 0) {\r\n                return this.options.preferMaster || null;\r\n            }\r\n            if (preferMaster === null) {\r\n                delete this.options.preferMaster;\r\n                return this;\r\n            }\r\n            this.options.preferMaster = preferMaster === true;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets the number of results to retrieve. Passing a null top value will clear the top option. Negating the value\r\n         * will return the current top value.\r\n         *\r\n         * @method $top\r\n         * @param {Number} [top] Number of results to query for.\r\n         * @return {PreparedQueryOptions|Number} PreparedQueryOptions object or the current $top value.\r\n         */\r\n        PreparedQueryOptions.prototype.$top = function (top) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$top || null;\r\n            }\r\n            if (typeof top === 'number' && top >= 0) {\r\n                this.options.$top = top;\r\n            }\r\n            if (top === null) {\r\n                delete this.options.$top;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets the index of the first result to retrieve. Passing a null skip value will clear the skip option. Negating the\r\n         * value will return the current skip value.\r\n         *\r\n         * @method $skip\r\n         * @param {Number} [skip] The index of the first result to retrieve\r\n         * @return {PreparedQueryOptions|Number} PreparedQueryOptions object or the current $skip value.\r\n         */\r\n        PreparedQueryOptions.prototype.$skip = function (skip) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$skip || null;\r\n            }\r\n            if (typeof skip === 'number' && skip >= 0) {\r\n                this.options.$skip = skip;\r\n            }\r\n            if (skip === null) {\r\n                delete this.options.$skip;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets orderBy string. Passing a null order by value will clear the order by option. Negating the value will return\r\n         * the current order by value.\r\n         *\r\n         * @method $orderBy\r\n         * @param {String} [orderBy] The orderBy string used to retrieve the results in a sorted order.\r\n         * @return {PreparedQueryOptions|String} PreparedQueryOptions object or the current $orderby value.\r\n         */\r\n        PreparedQueryOptions.prototype.$orderBy = function (orderBy) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$orderby || null;\r\n            }\r\n            if (orderBy && typeof orderBy === 'string') {\r\n                this.options.$orderby = orderBy;\r\n            }\r\n            if (orderBy === null) {\r\n                delete this.options.$orderby;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets expand string. Passing a null expand value will clear the expand option. Negating the value will return the\r\n         * current expand value.\r\n         *\r\n         * @method $expand\r\n         * @param {String | Array} [foreignKey] The foreignKey to expand when retrieving the results.\r\n         * @return {PreparedQueryOptions|String} PreparedQueryOptions object or the current $expand value.\r\n         */\r\n        PreparedQueryOptions.prototype.$expand = function (foreignKey) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$expand || null;\r\n            }\r\n            if (typeof foreignKey === 'string') {\r\n                this.options.$expand = foreignKey;\r\n            } else if (foreignKey instanceof Array) {\r\n                this.options.$expand = foreignKey.join(',');\r\n            }\r\n            if (foreignKey === null) {\r\n                delete this.options.$expand;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets select string. Passing a null select value will clear the select option. Negating the value will return the\r\n         * current select value.\r\n         *\r\n         * @method $select\r\n         * @param {String | Array} [property] A single property name or array of property names to select.\r\n         * @return {PreparedQueryOptions|String} PreparedQueryOptions object or the current $select value.\r\n         */\r\n        PreparedQueryOptions.prototype.$select = function (property) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$select || null;\r\n            }\r\n            if (typeof property === 'string') {\r\n                this.options.$select = property;\r\n            } else if (property instanceof Array) {\r\n                this.options.$select = property.join(',');\r\n            }\r\n            if (property === null) {\r\n                delete this.options.$select;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Enables or disables inline count. Passing a null inline count value will clear the inline count option. Negating\r\n         * the value will return the current inline count value: \"allpages\" or null.\r\n         *\r\n         * @method $inlineCount\r\n         * @param {Boolean} [enable=true] Flag to enable or disable inline count.\r\n         * @return {PreparedQueryOptions|String} PreparedQueryOptions object or the current $inlinecount value.\r\n         */\r\n        PreparedQueryOptions.prototype.$inlineCount = function (enable) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$inlinecount || null;\r\n            }\r\n            if (enable !== false && enable !== null) {\r\n                this.options.$inlinecount = \"allpages\";\r\n            } else {\r\n                delete this.options.$inlinecount;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets the filter option. Include the Predicate class to assist in building complex filter clauses.\r\n         * Passing a null filter value will clear the filter option. Negating the value will return the current filter value.\r\n         *\r\n         * @method $filter\r\n         * @param {String | Predicate} [filter] The filter clause to use when retrieving the results.\r\n         * @return {PreparedQueryOptions|Predicate} PreparedQueryOptions object or the current $filter predicate.\r\n         */\r\n        PreparedQueryOptions.prototype.$filter = function (filter) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$filter || null;\r\n            }\r\n            if (filter && typeof filter === 'string') {\r\n                this.options.$filter = Predicate.fromString(filter);\r\n            } else if (isPredicate(filter)) {\r\n                this.options.$filter = filter;\r\n            }\r\n            if (filter === null) {\r\n                delete this.options.$filter;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets a custom query option parameter. Passing a null value will clear the filter. Negating the value will return\r\n         * the current custom filter value.\r\n         *\r\n         * @method custom\r\n         * @param {String} optionName The name of the option. Must not start with '$'.\r\n         * @param {String|Number|Boolean} [value] The string value of the option.\r\n         * @return {PreparedQueryOptions} PreparedQueryOptions object or the current custom filter value.\r\n         */\r\n        PreparedQueryOptions.prototype.custom = function (optionName, value) {\r\n            if (arguments.length === 1) {\r\n                return this.options[optionName] || null;\r\n            }\r\n            if (optionName && typeof optionName === 'string' && optionName.indexOf('$') !== 0 && value && (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean')) {\r\n                this.options[optionName] = value;\r\n            }\r\n            if (optionName && value === null) {\r\n                delete this.options[optionName];\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Extend existing query with options from another query. Only the original query will be modified. Any\r\n         * matching options will be overridden in the original query.\r\n         *\r\n         * @method extend\r\n         * @param {PreparedQueryOptions} preparedQueryOptions The prepared query objects with the properties to be added.\r\n         * @return {PreparedQueryOptions} PreparedQueryOptions object.\r\n         */\r\n        PreparedQueryOptions.prototype.extend = function (preparedQueryOptions) {\r\n            var key;\r\n            for (key in preparedQueryOptions.options) {\r\n                if (preparedQueryOptions.options.hasOwnProperty(key)) {\r\n                    this.options[key] = preparedQueryOptions.options[key];\r\n                }\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Builds and returns a URL parameter string based on the query options.\r\n         *\r\n         * @method parseOptions\r\n         * @returns {String}\r\n         * @example '$top=25&$skip=0'\r\n         */\r\n        PreparedQueryOptions.prototype.parseOptions = function () {\r\n            var parameters = '';\r\n\r\n            var appendSeparator = function () {\r\n                parameters += (parameters === '') ? '?' : '&';\r\n            };\r\n\r\n            var option;\r\n            for (option in this.options) {\r\n                if (this.options.hasOwnProperty(option)) {\r\n                    appendSeparator();\r\n                    if (isPredicate(this.options[option])) {\r\n                        parameters += option + '=' + this.options[option].parsePredicate();\r\n                    } else {\r\n                        parameters += option + '=' + this.options[option];\r\n                    }\r\n                }\r\n            }\r\n\r\n            return parameters;\r\n        };\r\n\r\n        /**\r\n         * Class method to create a new PreparedQueryOptions object from a simple object\r\n         *\r\n         * @method fromObject\r\n         * @param {Object} object the object to build from\r\n         * @returns {PreparedQueryOptions}\r\n         */\r\n        PreparedQueryOptions.fromObject = function (object) {\r\n            var preparedQueryOptions = new PreparedQueryOptions();\r\n            var property;\r\n            for (property in object) {\r\n                if (object.hasOwnProperty(property) && typeof preparedQueryOptions[property] === \"function\") {\r\n                    preparedQueryOptions[property](object[property]);\r\n                }\r\n            }\r\n            return preparedQueryOptions;\r\n        };\r\n\r\n        return PreparedQueryOptions;\r\n    }\r\n]);","/**\r\n * The recallProvider is the entry point for common configuration options. Specific adapters may have their own\r\n * configuration options\r\n */\r\nangular.module('recall').provider('recall', [\r\n    function () {\r\n        var config = {};\r\n\r\n        // The default adapter to use unless otherwise specified by the model Definition\r\n        config.adapter = null;\r\n        this.setAdapter = function (adapter) {\r\n            config.adapter = adapter;\r\n            return this;\r\n        };\r\n\r\n        // Time in milliseconds to throttle Entity dirty checking. This allows for multiple digest cycles to pass\r\n        // between checking if an Entity is dirty by examining its stored state\r\n        config.dirtyCheckThreshold = 30;\r\n        this.setDirtyCheckThreshold = function (dirtyCheckThreshold) {\r\n            config.dirtyCheckThreshold = dirtyCheckThreshold;\r\n            return this;\r\n        };\r\n\r\n        // The default last modified field name. To enable synchronization, this must be set.\r\n        config.lastModifiedFieldName = null;\r\n        this.setLastModifiedFieldName = function (lastModifiedFieldName) {\r\n            config.lastModifiedFieldName = lastModifiedFieldName;\r\n            return this;\r\n        };\r\n\r\n        // The default soft delete field name. To enable synchronization, this must be set.\r\n        config.deletedFieldName = null;\r\n        this.setDeletedFieldName = function (deletedFieldName) {\r\n            config.deletedFieldName = deletedFieldName;\r\n            return this;\r\n        };\r\n\r\n        this.$get = ['$injector', 'recallModel', function ($injector, Model) {\r\n\r\n            var service = {\r\n                adapter: config.adapter,\r\n                lastModifiedFieldName: config.lastModifiedFieldName,\r\n                deletedFieldName: config.deletedFieldName,\r\n                dirtyCheckThreshold: config.dirtyCheckThreshold,\r\n                models: {}\r\n            };\r\n\r\n            /**\r\n             * Get an array of the defined Models.\r\n             * @returns {Entity[]} The models\r\n             */\r\n            service.getModels = function () {\r\n                var theModels = [];\r\n                var model;\r\n                for (model in this.models) {\r\n                    if (this.models.hasOwnProperty(model)) {\r\n                        theModels.push(this.models[model]);\r\n                    }\r\n                }\r\n                return theModels;\r\n            };\r\n\r\n            /**\r\n             * Gets a defined model by its name\r\n             * @param {String} modelName\r\n             * @returns {Entity} The model or null if the model is not found\r\n             */\r\n            service.getModel = function (modelName) {\r\n                return this.models[modelName] || null;\r\n            };\r\n\r\n            /**\r\n             * Creates a model based on a definition.\r\n             * @param {Object} modelDefinition The definition of the model including fields and associations\r\n             * @param {Object|String} [adapter] The adapter that is used to perform the CRUD actions\r\n             * @returns {Object} The model\r\n             */\r\n            service.defineModel = function (modelDefinition, adapter) {\r\n                adapter = adapter || this.adapter;\r\n\r\n                // If the adapter is a string, assume it is the name of the adapter factory and inject it\r\n                adapter = (typeof adapter === 'string') ? $injector.get(adapter) : adapter;\r\n\r\n                // If there was no adapter set, then return out as the model can not be used.\r\n                if (!adapter) {\r\n                    return null;\r\n                }\r\n\r\n                // TODO: Validated the model definition\r\n                if (!modelDefinition || !modelDefinition.name) {\r\n                    return null;\r\n                }\r\n\r\n                // If the model is already defined, just return it.\r\n                if (this.models[modelDefinition.name]) {\r\n                    return this.models[modelDefinition.name];\r\n                }\r\n\r\n                var model = new Model(modelDefinition);\r\n                model.setLastModifiedFieldName(this.lastModifiedFieldName);\r\n                model.setDeletedFieldName(this.deletedFieldName);\r\n                model.setAdapter(adapter);\r\n                model.setDirtyCheckThreshold(this.dirtyCheckThreshold);\r\n\r\n                var fieldsValid = model.initializeModelFields();\r\n\r\n                if (!fieldsValid) {\r\n                    return null;\r\n                }\r\n\r\n                model.initializeAssociations();\r\n\r\n                // Call the model validation on the adapter after all Entity properties and methods are set.\r\n                if (typeof adapter.modelValidationHook === 'function' && !adapter.modelValidationHook(model)) {\r\n                    return null;\r\n                }\r\n\r\n                this.models[model.modelName] = model;\r\n\r\n                return model;\r\n            };\r\n\r\n            return service;\r\n        }];\r\n    }\r\n]);"]}