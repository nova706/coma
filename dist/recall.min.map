{"version":3,"file":"recall.min.js","sources":["../src/_module.js","../src/adapterResponse.js","../src/adapters/browserStorage/browserStorage.adapter.js","../src/adapters/browserStorage/indexedDB.service.js","../src/adapters/browserStorage/webSQL.service.js","../src/adapters/odataREST.adapter.js","../src/adapters/sync.adapter.js","../src/association.js","../src/entity.js","../src/localStorage.js","../src/model.js","../src/modelField.js","../src/polyfill.js","../src/predicate.js","../src/preparedQueryOptions.js","../src/recallService.js"],"names":["angular","module","factory","AdapterResponse","data","count","status","headers","config","this","OK","CREATED","ACCEPTED","NO_CONTENT","BAD_REQUEST","UNAUTHORIZED","NOT_FOUND","CONFLICT","INTERNAL_SERVER_ERROR","NOT_IMPLEMENTED","provider","providerConfig","preferredBackend","preferIndexedDB","preferWebSQL","dbName","setDbName","dbVersion","setDbVersion","dbSize","setDbSize","pkGenerator","s4","Math","floor","random","toString","substring","setPkGenerator","$get","$log","$q","$window","recall","indexedDBService","webSQLService","connectionPromise","adapter","service","db","generatePrimaryKey","init","undefined","openDatabase","indexedDB","error","connect","dfd","defer","resolve","then","debug","e","reject","promise","create","theModel","modelInstance","response","buildError","modelName","primaryKeyFieldName","getRawModelObject","lastModifiedFieldName","Date","toISOString","result","findOne","pk","queryOptions","includeDeleted","performExpand","find","filterPredicate","$filter","results","i","promises","length","push","all","applyFilter","applyOrderBy","totalCount","applyPaging","update","remove","synchronize","dataToSync","merge","deletedFieldName","expandHasOne","model","instance","association","pathsToExpand","mappedBy","pathToExpand","join","alias","expandPath","indexOf","expandHasMany","filter","getOptions","split","toExpand","getAssociationByAlias","getModel","type","$expand","paths","resultMatchesFilters","predicate","test","a","orderBy","$orderBy","property","direction","isDate","fields","sort","b","aTest","bTest","toLowerCase","top","$top","skip","$skip","slice","migrate","field","indexName","objectStore","models","getModels","objectStoreNames","contains","dataSourceName","createObjectStore","keyPath","hasOwnProperty","unique","index","createIndex","handleVersionChange","onversionchange","close","alert","openRequest","open","onupgradeneeded","event","target","onsuccess","onerror","errorCode","tx","transaction","store","req","add","get","openCursor","cursor","value","extend","updateReq","put","createOrUpdate","hardRemove","key","createReq","createTables","migrateTables","theDb","columns","columnValues","placeholders","convertValueToSQL","sql","executeSql","transformSQLResult","createTable","column","operations","name","primaryKey","notNull","addColumnToTable","modelField","tableName","migrateTable","tableRows","row","tableSQL","tbl_name","missingFields","rows","item","convertValueToModel","sqlResultInstance","getSQLModelObject","obj","serverAPILocation","setServerAPILocation","resultsField","setResultsField","totalCountFiled","setTotalCountFiled","$http","getUrlWithOptions","url","parseOptions","post","success","method","lastSync","masterAdapter","setMaster","slaveAdapter","setSlave","$injector","localStorage","Predicate","PreparedQueryOptions","modelValidationHook","master","getMaster","slave","getSlave","preferMaster","Array","processSyncRequest","getAdapter","SyncResult","sent","returned","totalProcessed","getLastSyncTime","keys","LAST_SYNC","updateLastSyncTimeToNow","set","sendSyncRequestData","processSyncResponseData","syncRequestData","syncResponseData","totalItemsProcessed","handleError","handleComplete","greaterThanOrEqualTo","syncResponse","Association","definition","invalid","hasOne","hasMany","as","foreignKey","prototype","recallService","expand","entity","self","Model","$entity","storedState","equals","$getPrimaryKey","existingPredicate","base","stored","Entity","object","persisted","extendFromRawObject","Object","defineProperty","lastDirtyCheck","getTime","lastDirtyState","saveInProgress","$convertAssociationsToEntities","$storeState","$model","ForeignModel","associations","associationName","$isValid","fieldIsUndefined","matchesType","isNaN","parse","validate","$save","warn","$reset","itemToSave","preSave","updateSavedState","succeeded","preUpdate","transformResult","preCreate","$remove","$isDirty","now","delta","dirtyCheckThreshold","viewValue","storedValue","prop","changedProperties","before","after","$document","storage","keyExists","addKeyModifier","modifier","registerKey","keyModifier","supportsLocalStorage","setItem","life","v","encodeURIComponent","cookie","getItem","regexp","RegExp","c","exec","decodeURIComponent","removeItem","ModelField","propagateError","modelDefinition","writable","configurable","setLastModifiedFieldName","setDeletedFieldName","setAdapter","setDirtyCheckThreshold","initializeModelFields","lastModifiedField","deletedField","modelDefinitionFields","getDefaultValue","initializeAssociations","modelDefinitionAssociations","rawObject","modelEntity","includeExpandedAssociations","applyDefaultValues","resultEntity","rawEntity","clientResponse","toUpperCase","asPrimaryKey","fromDefinition","validateField","match","pad","number","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","toFixed","parser","predicates","groupOperator","setProperty","escapeValue","notEqualTo","greaterThan","lessThan","lessThanOrEqualTo","startsWith","endsWith","initialPredicate","newPredicates","joinedPredicates","concat","unshift","and","or","failOnMissingAssociation","testPredicate","parsePredicate","nested","urlString","predicateString","fromString","conditionMatcher","filters","getPredicateFromSegment","replace","buildPredicateFromMap","predicateMap","closeParenthesisIndex","openParenthesisIndex","groupString","filterIndexes","groupFilters","operator","groupPredicate","testNextLevel","lastIndexOf","Number","convertValueToType","testPredicateGroup","propertyPath","objectValue","condition","testComplexPredicate","testSimplePredicate","substr","start","end","conditionParams","getComplexPredicateFromSegment","parenPos","getSimplePredicateFromSegment","options","isPredicate","arguments","$orderby","$select","$inlineCount","enable","$inlinecount","custom","optionName","preparedQueryOptions","option","parameters","appendSeparator","fromObject","theModels","defineModel","fieldsValid"],"mappings":";;AAAAA,QAAQC,OAAO,aCAfD,QAAQC,OAAO,UAAUC,QAAQ,yBAC7B,WAaI,GAAIC,GAAkB,SAAUC,EAAMC,EAAOC,EAAQC,EAASC,GAC1DC,KAAKL,KAAOA,EACZK,KAAKJ,MAASA,GAAS,EAAKA,EAAQ,KACpCI,KAAKH,OAASA,GAAUH,EAAgBO,GACxCD,KAAKF,QAAUA,EACfE,KAAKD,OAASA,EAmBlB,OAfAL,GAAgBO,GAAK,IACrBP,EAAgBQ,QAAU,IAC1BR,EAAgBS,SAAW,IAC3BT,EAAgBU,WAAa,IAG7BV,EAAgBW,YAAc,IAC9BX,EAAgBY,aAAe,IAC/BZ,EAAgBa,UAAY,IAC5Bb,EAAgBc,SAAW,IAG3Bd,EAAgBe,sBAAwB,IACxCf,EAAgBgB,gBAAkB,IAE3BhB,KCtCfH,QAAQC,OAAO,iCAAkC,WAAWmB,SAAS,+BACjE,WAEI,GAAIC,KAEJA,GAAeC,iBAAmB,YAClCb,KAAKc,gBAAkB,WAEnB,MADAF,GAAeC,iBAAmB,YAC3Bb,MAEXA,KAAKe,aAAe,WAEhB,MADAH,GAAeC,iBAAmB,SAC3Bb,MAIXY,EAAeI,OAAS,SACxBhB,KAAKiB,UAAY,SAAUD,GAEvB,MADAJ,GAAeI,OAASA,EACjBhB,MAIXY,EAAeM,UAAY,EAC3BlB,KAAKmB,aAAe,SAAUD,GAE1B,MADAN,GAAeM,UAAYA,EACpBlB,MAIXY,EAAeQ,OAAS,QACxBpB,KAAKqB,UAAY,SAAUD,GAEvB,MADAR,GAAeQ,OAASA,EACjBpB,MAIXY,EAAeU,YAAc,WACzB,QAASC,KACL,MAAOC,MAAKC,MAA4B,OAArB,EAAID,KAAKE,WACvBC,SAAS,IACTC,UAAU,GAGnB,MAAOL,KAAOA,IAAO,IAAMA,IAAO,IAAMA,IAAO,IAC3CA,IAAO,IAAMA,IAAOA,IAAOA,KAEnCvB,KAAK6B,eAAiB,SAAUP,GAE5B,MADAV,GAAeU,YAAcA,EACtBtB,MAGXA,KAAK8B,MACD,OACA,KACA,UACA,SACA,wBACA,yBACA,sBAEA,SAAUC,EAAMC,EAAIC,EAASC,EAAQxC,EAAiByC,EAAkBC,GAEpE,GAIIC,GAJAC,GACAC,QAAS,KACTC,GAAI,MAIJC,EAAqB7B,EAAeU,YAEpCoB,EAAO,WACiC,WAApC9B,EAAeC,iBACc8B,SAAzBV,EAAQW,aACRN,EAAQC,QAAUH,EACWO,SAAtBV,EAAQY,YACfP,EAAQC,QAAUJ,GAGIQ,SAAtBV,EAAQY,UACRP,EAAQC,QAAUJ,EACcQ,SAAzBV,EAAQW,eACfN,EAAQC,QAAUH,GAIrBE,EAAQC,SACTR,EAAKe,MAAM,kEAKfC,EAAU,WACV,GAAIC,GAAMhB,EAAGiB,OAEb,IAAIX,EAAQE,GACRQ,EAAIE,QAAQZ,EAAQE,QACjB,CAAA,GAAIH,EACP,MAAOA,EAEPC,GAAQC,QAAQQ,QAAQnC,EAAeI,OAAQJ,EAAeM,UAAWN,EAAeQ,QAAQ+B,KAAK,SAAUX,GAC3GT,EAAKqB,MAAM,sDACXd,EAAQE,GAAKA,EACbQ,EAAIE,QAAQZ,EAAQE,KACrB,SAAUa,GACTtB,EAAKe,MAAM,oDAAqDO,GAChEL,EAAIM,OAAOD,KAKnB,MADAhB,GAAoBW,EAAIO,QACjBP,EAAIO,QASfjB,GAAQkB,OAAS,SAAUC,EAAUC,GACjC,GACIC,GADAX,EAAMhB,EAAGiB,QAGTW,EAAa,SAAUP,GAGvB,MAFAM,GAAW,GAAIjE,GAAgB2D,EAAG,EAAG3D,EAAgBe,uBACrDsB,EAAKe,MAAM,iCAAmCW,EAASI,UAAWF,EAAUD,GACrEC,EAuBX,OApBAD,GAAcD,EAASK,qBAAuBrB,IAC9CiB,EAAgBD,EAASM,kBAAkBL,GAAe,GAG1DA,EAAcD,EAASO,wBAAyB,GAAIC,OAAOC,cAE3DnB,IAAUI,KAAK,SAAUX,GAErBF,EAAQC,QAAQiB,OAAOhB,EAAIiB,EAAUC,GAAeP,KAAK,SAAUgB,GAC/DR,EAAW,GAAIjE,GAAgByE,EAAQ,EAAGzE,EAAgBQ,SAC1D6B,EAAKqB,MAAM,iCAAmCK,EAASI,UAAWF,GAClEX,EAAIE,QAAQS,IACb,SAAUN,GACTL,EAAIM,OAAOM,EAAWP,OAG3B,SAAUA,GACTL,EAAIM,OAAOM,EAAWP,MAGnBL,EAAIO,SAWfjB,EAAQ8B,QAAU,SAAUX,EAAUY,EAAIC,EAAcC,GACpD,GACIZ,GADAX,EAAMhB,EAAGiB,QAGTW,EAAa,SAAUP,EAAGxD,GAG1B,MAFA8D,GAAW,GAAIjE,GAAgB2D,EAAG,EAAGxD,GAAUH,EAAgBe,uBAC/DsB,EAAKe,MAAM,kCAAoCW,EAASI,UAAWF,EAAUU,EAAIC,GAC1EX,EA0BX,OAvBAZ,KAAUI,KAAK,SAAUX,GAErBF,EAAQC,QAAQ6B,QAAQ5B,EAAIiB,EAAUY,EAAIE,GAAgBpB,KAAK,SAAUgB,GAEjEA,EACAK,EAAcL,EAAQV,EAAUa,EAAc9B,GAAIW,KAAK,WACnDQ,EAAW,GAAIjE,GAAgByE,EAAQ,GACvCpC,EAAKqB,MAAM,kCAAoCK,EAASI,UAAWF,EAAUU,EAAIC,GACjFtB,EAAIE,QAAQS,IACb,SAAUN,GACTL,EAAIM,OAAOM,EAAWP,MAG1BL,EAAIM,OAAOM,EAAW,YAAalE,EAAgBa,aAGxD,SAAU8C,GACTL,EAAIM,OAAOM,EAAWP,OAG3B,SAAUA,GACTL,EAAIM,OAAOM,EAAWP,MAEnBL,EAAIO,SAUfjB,EAAQmC,KAAO,SAAUhB,EAAUa,EAAcC,GAC7C,GACIZ,GADAX,EAAMhB,EAAGiB,QAGTW,EAAa,SAAUP,GAGvB,MAFAM,GAAW,GAAIjE,GAAgB2D,EAAG,EAAG3D,EAAgBe,uBACrDsB,EAAKe,MAAM,+BAAiCW,EAASI,UAAWF,EAAUW,GACnEX,EAsCX,OAnCAZ,KAAUI,KAAK,SAAUX,GACrB,GAAIkC,EAEAJ,IAAgBA,EAAaK,YAC7BD,EAAkBJ,EAAaK,WAGnCrC,EAAQC,QAAQkC,KAAKjC,EAAIiB,EAAUc,GAAgBpB,KAAK,SAAUyB,GAE9D,GAAIC,GACAC,IACJ,KAAKD,EAAI,EAAGA,EAAID,EAAQG,OAAQF,IAC5BC,EAASE,KAAKR,EAAcI,EAAQC,GAAIpB,EAAUa,EAAc9B,GAEpER,GAAGiD,IAAIH,GAAU3B,KAAK,WAClByB,EAAUM,EAAYN,EAASF,GAC/BE,EAAUO,EAAa1B,EAAUmB,EAASN,EAE1C,IAAIc,GAAaR,EAAQG,MACzBH,GAAUS,EAAYT,EAASN,GAC/BX,EAAW,GAAIjE,GAAgBkF,EAASQ,GAExCrD,EAAKqB,MAAM,+BAAiCK,EAASI,UAAWF,EAAUW,GAC1EtB,EAAIE,QAAQS,IACb,SAAUN,GACTL,EAAIM,OAAOM,EAAWP,OAG3B,SAAUA,GACTL,EAAIM,OAAOM,EAAWP,OAG3B,SAAUA,GACTL,EAAIM,OAAOM,EAAWP,MAEnBL,EAAIO,SAWfjB,EAAQgD,OAAS,SAAU7B,EAAUY,EAAIX,EAAea,GACpD,GACIZ,GADAX,EAAMhB,EAAGiB,QAGTW,EAAa,SAAUP,GAGvB,MAFAM,GAAW,GAAIjE,GAAgB2D,EAAG,EAAG3D,EAAgBe,uBACrDsB,EAAKe,MAAM,iCAAmCW,EAASI,UAAWF,EAAUD,GACrEC,EAsBX,OAnBAZ,KAAUI,KAAK,SAAUX,GAErBF,EAAQC,QAAQ+C,OAAO9C,EAAIiB,EAAUY,EAAIX,EAAea,GAAgBpB,KAAK,SAAUgB,GAE/EA,GACAR,EAAW,GAAIjE,GAAgByE,EAAQ,GACvCpC,EAAKqB,MAAM,iCAAmCK,EAASI,UAAWF,EAAUD,GAC5EV,EAAIE,QAAQS,IAEZX,EAAIM,OAAOM,EAAW,YAAalE,EAAgBa,aAGxD,SAAU8C,GACTL,EAAIM,OAAOM,EAAWP,OAG3B,SAAUA,GACTL,EAAIM,OAAOM,EAAWP,MAEnBL,EAAIO,SASfjB,EAAQiD,OAAS,SAAU9B,EAAUY,GACjC,GACIV,GADAX,EAAMhB,EAAGiB,QAGTW,EAAa,SAAUP,GAGvB,MAFAM,GAAW,GAAIjE,GAAgB2D,EAAG,EAAG3D,EAAgBe,uBACrDsB,EAAKe,MAAM,iCAAmCW,EAASI,UAAWF,GAC3DA,EAgBX,OAbAZ,KAAUI,KAAK,SAAUX,GAErBF,EAAQC,QAAQgD,OAAO/C,EAAIiB,EAAUY,GAAIlB,KAAK,WAC1CQ,EAAW,GAAIjE,GAAgB,KAAM,EAAGA,EAAgBU,YACxD2B,EAAKqB,MAAM,iCAAmCK,EAASI,UAAWF,GAClEX,EAAIE,QAAQS,IACb,SAAUN,GACTL,EAAIM,OAAOM,EAAWP,OAG3B,SAAUA,GACTL,EAAIM,OAAOM,EAAWP,MAEnBL,EAAIO,SASfjB,EAAQkD,YAAc,SAAU/B,EAAUgC,GACtC,GACI9B,GADAX,EAAMhB,EAAGiB,QAGTW,EAAa,SAAUP,GAGvB,MAFAM,GAAW,GAAIjE,GAAgB2D,EAAG,EAAG3D,EAAgBe,uBACrDsB,EAAKe,MAAM,sCAAwCW,EAASI,UAAWF,EAAU8B,GAC1E9B,EAyBX,OAtBAZ,KAAUI,KAAK,SAAUX,GACrB,GAAIqC,GACAa,KACAH,IACJ,KAAKV,EAAI,EAAGA,EAAIY,EAAWV,OAAQF,IAC3BY,EAAWZ,GAAGpB,EAASkC,kBACvBJ,EAAOP,KAAKS,EAAWZ,IAEvBa,EAAMV,KAAKS,EAAWZ,GAI9BvC,GAAQC,QAAQiD,YAAYhD,EAAIiB,EAAUiC,EAAOH,GAAQpC,KAAK,SAAUyB,GACpEjB,EAAW,GAAIjE,GAAgBkF,EAASA,EAAQG,OAAQrF,EAAgBO,IACxE8B,EAAKqB,MAAM,sCAAwCK,EAASI,UAAWF,EAAU8B,GACjFzC,EAAIE,QAAQS,IACb,SAAUN,GACTL,EAAIM,OAAOM,EAAWP,OAE3B,SAAUA,GACTL,EAAIM,OAAOM,EAAWP,MAEnBL,EAAIO,QAIf,IAAIqC,GAAe,SAAUC,EAAOC,EAAUC,EAAavD,EAAIwD,GAC3D,GAAIhD,GAAMhB,EAAGiB,OAEb,OAAuCN,UAAnCmD,EAASC,EAAYE,WACrBH,EAASC,EAAYE,UAAY,KACjCjD,EAAIE,UACGF,EAAIO,UAGfjB,EAAQC,QAAQqD,aAAapD,EAAIqD,EAAOC,EAAUC,GAAa5C,KAAK,SAAUgB,GAE1E,GAAI+B,GAAeF,EAAcG,KAAK,IAElChC,IACA2B,EAASC,EAAYK,OAASjC,EAC1B6B,EAAcjB,OAAS,EACvBsB,EAAWlC,EAAQ0B,EAAOK,EAAatE,UAAUsE,EAAaI,QAAQ,KAAO,GAAI9D,GAAIW,KAAK,WACtFH,EAAIE,WACL,SAAUG,GACTL,EAAIM,OAAOD,KAGfL,EAAIE,YAGR4C,EAASC,EAAYK,OAAS,KAC9BpD,EAAIE,aAILF,EAAIO,UAIXgD,EAAgB,SAAUV,EAAOC,EAAUC,EAAavD,EAAIwD,GAC5D,GAAIhD,GAAMhB,EAAGiB,OA8Bb,OA5BAX,GAAQC,QAAQgE,cAAc/D,EAAIqD,EAAOC,EAAUC,GAAa5C,KAAK,SAAUyB,GAE3E,GAAIsB,GAAeF,EAAcG,KAAK,KAClCK,EAAST,EAAYU,WAAWX,GAAUnB,SAM9C,IALI6B,IACA5B,EAAUM,EAAYN,EAAS4B,IAGnCV,EAASC,EAAYK,OAASxB,EAC1BoB,EAAcjB,OAAS,EAAG,CAC1B,GAAIF,GACAC,IACJ,KAAKD,EAAI,EAAGA,EAAID,EAAQG,OAAQF,IAC5BC,EAASE,KAAKqB,EAAWzB,EAAQC,GAAIgB,EAAOK,EAAatE,UAAUsE,EAAaI,QAAQ,KAAO,GAAI9D,GAEvGR,GAAGiD,IAAIH,GAAU3B,KAAK,WAClBH,EAAIE,WACL,SAAUG,GACTL,EAAIM,OAAOD,SAGfL,GAAIE,WAGT,SAAUG,GACTL,EAAIM,OAAOD,KAGRL,EAAIO,SAKX8C,EAAa,SAAUlC,EAAQV,EAAUyC,EAAc1D,GACvD,GAAIwD,GAAgBE,EAAaQ,MAAM,KACnCC,EAAWX,EAAc,EAE7B,IAAIW,EAAU,CACV,GAAIZ,GAActC,EAASmD,sBAAsBD,GAC7Cd,EAAQE,EAAYc,UACxB,IAAId,GAAeF,EAAO,CACtB,GAAyB,WAArBE,EAAYe,KACZ,MAAOlB,GAAaC,EAAO1B,EAAQ4B,EAAavD,EAAIwD,EACjD,IAAyB,YAArBD,EAAYe,KACnB,MAAOP,GAAcV,EAAO1B,EAAQ4B,EAAavD,EAAIwD,IAMjE,GAAIhD,GAAMhB,EAAGiB,OAEb,OADAD,GAAIE,UACGF,EAAIO,SAIXiB,EAAgB,SAAUL,EAAQV,EAAUa,EAAc9B,GAC1D,GACIuE,GADA/D,EAAMhB,EAAGiB,QAET6B,IAKJ,IAHIR,IACAyC,EAAUzC,EAAayC,WAEvBA,EAAS,CACT,GACIlC,GADAmC,EAAQD,EAAQL,MAAM,IAE1B,KAAK7B,EAAI,EAAGA,EAAImC,EAAMjC,OAAQF,IAC1BC,EAASE,KAAKqB,EAAWlC,EAAQV,EAAUuD,EAAMnC,GAAIrC,GAEzDR,GAAGiD,IAAIH,GAAU3B,KAAK,WAClBH,EAAIE,WACL,SAAUG,GACTtB,EAAKe,MAAM,uCAAwCO,EAAG0D,EAAS5C,GAC/DnB,EAAIM,OAAOD,SAGfL,GAAIE,SAGR,OAAOF,GAAIO,SAIX0D,EAAuB,SAAU9C,EAAQ+C,GACzC,MAAOA,GAAUC,KAAKhD,IAItBe,EAAc,SAAUN,EAASF,GAMjC,MALIA,IAAmBE,IACnBA,EAAUA,EAAQ4B,OAAO,SAAUY,GAC/B,MAAOH,GAAqBG,EAAG1C,MAGhCE,GAIPO,EAAe,SAAU1B,EAAUmB,EAASN,GAC5C,IAAKA,EACD,MAAOM,EAEX,IAAIyC,GAAU/C,EAAagD,UAC3B,IAAID,EAAS,CACT,GAAIE,GAAWF,EAAQX,MAAM,KAAK,GAC9Bc,EAAYH,EAAQX,MAAM,KAAK,IAAM,GACrCe,GAAS,CAEThE,GAASiE,OAAOH,IAAgD,SAAnC9D,EAASiE,OAAOH,GAAUT,OACvDW,GAAS,GAGb7C,EAAQ+C,KAAK,SAAUP,EAAGQ,GACtB,GAAIC,GAAQT,EAAEG,GACVO,EAAQF,EAAEL,EAOd,OALIE,KACAI,EAAQ,GAAI5D,MAAK4D,GACjBC,EAAQ,GAAI7D,MAAK6D,IAGjBD,EAAQC,EAC4B,SAA5BN,EAAUO,cAA4B,GAAK,EAEnDD,EAAQD,EAC4B,SAA5BL,EAAUO,cAA4B,EAAI,GAE/C,IAGf,MAAOnD,IAIPS,EAAc,SAAUT,EAASN,GACjC,IAAKA,EACD,MAAOM,EAEX,IAAIoD,GAAM1D,EAAa2D,OACnBC,EAAO5D,EAAa6D,OAIxB,OAHIH,GAAM,GAAKE,GAAQ,IACnBtD,EAAUA,EAAQwD,MAAMF,EAAMA,EAAOF,IAElCpD,EAKX,OAFAlC,KAEOJ,OCxiBvB/C,QAAQC,OAAO,iCAAiCC,QAAQ,0BACpD,KACA,UACA,SAEA,SAAUuC,EAAIC,EAASC,GAEnB,GAAIC,KAEJA,GAAiBkG,QAAU,SAAU7F,GACjC,GAAIqC,GACAgB,EACAyC,EACAC,EACAC,EACAC,EAASvG,EAAOwG,WACpB,KAAK7D,EAAI,EAAGA,EAAI4D,EAAO1D,OAAQF,IAG3B,GAFAgB,EAAQ4C,EAAO5D,IAEVrC,EAAGmG,iBAAiBC,SAAS/C,EAAMgD,gBAAiB,CACrDL,EAAchG,EAAGsG,kBAAkBjD,EAAMgD,gBAAkBE,QAASlD,EAAM/B,qBAC1E,KAAKwE,IAASzC,GAAM6B,OACZ7B,EAAM6B,OAAOsB,eAAeV,KACxBzC,EAAM6B,OAAOY,GAAOW,UAAW,GAAQpD,EAAM6B,OAAOY,GAAOY,SAAU,KACrEX,EAAa1C,EAAM6B,OAAOY,GAAOY,SAAU,EAAQZ,EAAQzC,EAAM6B,OAAOY,GAAOY,MAC/EV,EAAYW,YAAYb,EAAOC,GAAaU,OAAQpD,EAAM6B,OAAOY,GAAOW,YAShG9G,EAAiBiH,oBAAsB,SAAU5G,GAC7CA,EAAG6G,gBAAkB,WACjB7G,EAAG8G,QACHrH,EAAQsH,MAAM,yDAItBpH,EAAiBY,QAAU,SAAU/B,EAAQE,GACzC,GAAI8B,GAAMhB,EAAGiB,QAETuG,EAAcvH,EAAQY,UAAU4G,KAAKzI,EAAQE,EAiBjD,OAfAsI,GAAYE,gBAAkB,SAAUC,GACpCxH,EAAiBiH,oBAAoBO,EAAMC,OAAOzF,QAClDhC,EAAiBkG,QAAQsB,EAAMC,OAAOzF,QACtCnB,EAAIE,QAAQyG,EAAMC,OAAOzF,SAG7BqF,EAAYK,UAAY,SAAUF,GAC9BxH,EAAiBiH,oBAAoBO,EAAMC,OAAOzF,QAClDnB,EAAIE,QAAQyG,EAAMC,OAAOzF,SAG7BqF,EAAYM,QAAU,SAAUH,GAC5B3G,EAAIM,OAAOqG,EAAMC,OAAOG,YAGrB/G,EAAIO,SAGfpB,EAAiBqB,OAAS,SAAUhB,EAAIiB,EAAUC,GAC9C,GAAIV,GAAMhB,EAAGiB,QAET+G,EAAKxH,EAAGyH,aAAaxG,EAASoF,gBAAiB,aAC/CqB,EAAQF,EAAGxB,YAAY/E,EAASoF,gBAChCsB,EAAMD,EAAME,IAAI1G,EAUpB,OARAyG,GAAIN,UAAY,WACZ7G,EAAIE,QAAQQ,IAGhByG,EAAIL,QAAU,WACV9G,EAAIM,OAAOtD,KAAK8C,QAGbE,EAAIO,SAGfpB,EAAiBiC,QAAU,SAAU5B,EAAIiB,EAAUY,EAAIE,GACnD,GAAIvB,GAAMhB,EAAGiB,QAET+G,EAAKxH,EAAGyH,aAAaxG,EAASoF,iBAC9BqB,EAAQF,EAAGxB,YAAY/E,EAASoF,gBAChCsB,EAAMD,EAAMG,IAAIhG,EAapB,OAXA8F,GAAIN,UAAY,WAIR7G,EAAIE,SAHJiH,EAAIhG,SAAWI,GAAmB4F,EAAIhG,OAAOV,EAASkC,kBAG1C,KAFAwE,EAAIhG,SAKxBgG,EAAIL,QAAU,WACV9G,EAAIM,OAAOtD,KAAK8C,QAGbE,EAAIO,SAGfpB,EAAiBsC,KAAO,SAAUjC,EAAIiB,EAAUc,GAC5C,GAAIvB,GAAMhB,EAAGiB,QAET+G,EAAKxH,EAAGyH,aAAaxG,EAASoF,iBAC9BqB,EAAQF,EAAGxB,YAAY/E,EAASoF,gBAChCsB,EAAMD,EAAMI,aACZ1F,IAiBJ,OAfAuF,GAAIN,UAAY,SAAUF,GACtB,GAAIY,GAASZ,EAAMC,OAAOzF,MACtBoG,KACIhG,IAAmBgG,EAAOC,MAAM/G,EAASkC,oBACzCf,EAAQI,KAAKuF,EAAOC,OAExBD,EAAAA,eAEAvH,EAAIE,QAAQ0B,IAGpBuF,EAAIL,QAAU,WACV9G,EAAIM,OAAOtD,KAAK8C,QAGbE,EAAIO,SAGfpB,EAAiBmD,OAAS,SAAU9C,EAAIiB,EAAUY,EAAIX,EAAea,GACjE,GAAIvB,GAAMhB,EAAGiB,QAET+G,EAAKxH,EAAGyH,aAAaxG,EAASoF,gBAAiB,aAC/CqB,EAAQF,EAAGxB,YAAY/E,EAASoF,gBAChCsB,EAAMD,EAAMG,IAAIhG,EA2BpB,OAzBA8F,GAAIN,UAAY,WACZ,IAAIM,EAAIhG,SAAWI,GAAmB4F,EAAIhG,OAAOV,EAASkC,kBAiBtD3C,EAAIE,QAAQ,UAjB8D,CAC1E,GAAIiB,GAASgG,EAAIhG,aACVT,GAAcD,EAASK,qBAC9BvE,QAAQkL,OAAOtG,EAAQT,GAGvBS,EAAOV,EAASO,wBAAyB,GAAIC,OAAOC,cACpDC,EAASV,EAASM,kBAAkBI,GAAQ,EAE5C,IAAIuG,GAAYR,EAAMS,IAAIxG,EAC1BuG,GAAUb,UAAY,WAClB7G,EAAIE,QAAQiB,IAEhBuG,EAAUZ,QAAU,WAChB9G,EAAIM,OAAOtD,KAAK8C,UAM5BqH,EAAIL,QAAU,WACV9G,EAAIM,OAAOtD,KAAK8C,QAGbE,EAAIO,SAGfpB,EAAiBoD,OAAS,SAAU/C,EAAIiB,EAAUY,GAC9C,GAAIrB,GAAMhB,EAAGiB,QAET+G,EAAKxH,EAAGyH,aAAaxG,EAASoF,gBAAiB,aAC/CqB,EAAQF,EAAGxB,YAAY/E,EAASoF,gBAChCsB,EAAMD,EAAMG,IAAIhG,EAwBpB,OAtBA8F,GAAIN,UAAY,WACZ,GAAIM,EAAIhG,SAAWgG,EAAIhG,OAAOV,EAASkC,kBAAmB,CACtD,GAAIxB,GAASgG,EAAIhG,MAEjBA,GAAOV,EAASkC,mBAAoB,EACpCxB,EAAOV,EAASO,wBAAyB,GAAIC,OAAOC,aAEpD,IAAIwG,GAAYR,EAAMS,IAAIxG,EAC1BuG,GAAUb,UAAY,WAClB7G,EAAIE,QAAQ,OAEhBwH,EAAUZ,QAAU,WAChB9G,EAAIM,OAAOtD,KAAK8C,YAGpBE,GAAIE,QAAQ,OAGpBiH,EAAIL,QAAU,WACV9G,EAAIM,OAAOtD,KAAK8C,QAGbE,EAAIO,SAGfpB,EAAiBqD,YAAc,SAAUhD,EAAIiB,EAAUiC,EAAOH,GAC1DG,EAAQA,MACRH,EAASA,KAET,IAGIV,GAHAmF,EAAKxH,EAAGyH,aAAaxG,EAASoF,gBAAiB,aAC/CL,EAAcwB,EAAGxB,YAAY/E,EAASoF,gBAGtC/D,IACJ,KAAKD,EAAI,EAAGA,EAAIa,EAAMX,OAAQF,IAC1BC,EAASE,KAAK4F,EAAepC,EAAa/E,EAAUiC,EAAMb,IAE9D,KAAKA,EAAI,EAAGA,EAAIU,EAAOR,OAAQF,IAC3BC,EAASE,KAAK6F,EAAWrC,EAAa/E,EAAU8B,EAAOV,GAAGpB,EAASK,sBAGvE,OAAO9B,GAAGiD,IAAIH,IAGlB3C,EAAiByD,aAAe,SAAUpD,EAAIqD,EAAO1B,EAAQ4B,GACzD,GAAI/C,GAAMhB,EAAGiB,QAET+G,EAAKxH,EAAGyH,aAAapE,EAAMgD,iBAC3BqB,EAAQF,EAAGxB,YAAY3C,EAAMgD,gBAC7BsB,EAAMD,EAAMG,IAAIlG,EAAO4B,EAAYE,UAavC,OAXAkE,GAAIN,UAAY,WAER7G,EAAIE,QADJiH,EAAIhG,SAAWgG,EAAIhG,OAAO0B,EAAMF,kBACpBwE,EAAIhG,OAEJ,OAGpBgG,EAAIL,QAAU,WACV9G,EAAIM,OAAOtD,KAAK8C,QAGbE,EAAIO,SAGfpB,EAAiBoE,cAAgB,SAAU/D,EAAIqD,EAAO1B,EAAQ4B,GAC1D,GAAI/C,GAAMhB,EAAGiB,QAET+G,EAAKxH,EAAGyH,aAAapE,EAAMgD,iBAC3BqB,EAAQF,EAAGxB,YAAY3C,EAAMgD,gBAC7BK,EAAQgB,EAAMhB,MAAMnD,EAAYE,UAChCkE,EAAMjB,EAAMoB,aACZ1F,IAiBJ,OAfAuF,GAAIN,UAAY,SAAUF,GACtB,GAAIY,GAASZ,EAAMC,OAAOzF,MACtBoG,IACKA,EAAOC,MAAM3E,EAAMF,mBAAqB4E,EAAOO,MAAQ3G,EAAO0B,EAAM/B,sBACrEc,EAAQI,KAAKuF,EAAOC,OAExBD,EAAAA,eAEAvH,EAAIE,QAAQ0B,IAGpBuF,EAAIL,QAAU,WACV9G,EAAIM,OAAOtD,KAAK8C,QAGbE,EAAIO,QAGf,IAAIqH,GAAiB,SAAUpC,EAAa/E,EAAUC,GAClD,GAAIV,GAAMhB,EAAGiB,QAETkH,EAAM3B,EAAY6B,IAAI3G,EAAcD,EAASK,qBA4BjD,OA3BAqG,GAAIN,UAAY,WACZ,GAAI1F,GAASgG,EAAIhG,MACjB,IAAIA,EAAQ,CACR5E,QAAQkL,OAAOtG,EAAQT,GACvBS,EAASV,EAASM,kBAAkBI,GAAQ,EAE5C,IAAIuG,GAAYlC,EAAYmC,IAAIxG,EAChCuG,GAAUb,UAAY,WAClB7G,EAAIE,QAAQiB,IAEhBuG,EAAUZ,QAAU,WAChB9G,EAAIM,OAAOtD,KAAK8C,YAEjB,CACH,GAAIiI,GAAYvC,EAAY4B,IAAI1G,EAChCqH,GAAUlB,UAAY,WAClB7G,EAAIE,QAAQQ,IAEhBqH,EAAUjB,QAAU,WAChB9G,EAAIM,OAAOtD,KAAK8C,UAI5BqH,EAAIL,QAAU,WACV9G,EAAIM,OAAOtD,KAAK8C,QAGbE,EAAIO,SAGXsH,EAAa,SAAUrC,EAAa/E,EAAUY,GAC9C,GAAIrB,GAAMhB,EAAGiB,QAETkH,EAAM3B,EAAAA,UAAmBnE,EAQ7B,OAPA8F,GAAIN,UAAY,WACZ7G,EAAIE,QAAQ,OAEhBiH,EAAIL,QAAU,WACV9G,EAAIM,OAAOtD,KAAK8C,QAGbE,EAAIO,QAGf,OAAOpB,MCvTf5C,QAAQC,OAAO,iCAAiCC,QAAQ,uBACpD,OACA,KACA,UACA,SAEA,SAAUsC,EAAMC,EAAIC,EAASC,GAEzB,GAAIE,KAEJA,GAAciG,QAAU,SAAU7F,GAC9B,GAAIQ,GAAMhB,EAAGiB,OAYb,OAVAb,GAAc4I,aAAaxI,GAAIW,KAAK,WAChCf,EAAc6I,cAAczI,GAAIW,KAAK,WACjCH,EAAIE,QAAQ,OACb,SAAUG,GACTL,EAAIM,OAAOD,MAEhB,SAAUA,GACTL,EAAIM,OAAOD,KAGRL,EAAIO,SAGfnB,EAAcW,QAAU,SAAU/B,EAAQE,EAAWE,GACjD,GAAI4B,GAAMhB,EAAGiB,OAEb,KACI,GAAIiI,GAAQjJ,EAAQW,aAAa5B,EAAQE,EAAUS,WAAY,yBAA0BP,EACzFgB,GAAciG,QAAQ6C,GAAO/H,KAAK,WAC9BH,EAAIE,QAAQgI,IACb,SAAU7H,GACTL,EAAIM,OAAOD,KAEjB,MAAOA,GACLL,EAAIM,OAAOD,GAGf,MAAOL,GAAIO,SAGfnB,EAAcoB,OAAS,SAAUhB,EAAIiB,EAAUC,GAC3C,GAAIV,GAAMhB,EAAGiB,OAuBb,OArBAT,GAAGyH,YAAY,SAAUD,GACrB,GAGI1B,GAHA6C,KACAC,KACAC,IAEJ,KAAK/C,IAAS7E,GAASiE,OACfjE,EAASiE,OAAOsB,eAAeV,IAAU5E,EAAcsF,eAAeV,KACtE6C,EAAQnG,KAAK,IAAMsD,EAAQ,KAC3B8C,EAAapG,KAAKsG,EAAkB7H,EAASiE,OAAOY,GAAQ5E,IAC5D2H,EAAarG,KAAK,KAG1B,IAAIuG,GAAM,gBAAkB9H,EAASoF,eAAiB,MAAQsC,EAAQhF,KAAK,KAAO,aAAekF,EAAalF,KAAK,KAAM,GACzHpE,GAAKqB,MAAM,kBAAoBmI,EAAKH,GACpCpB,EAAGwB,WAAWD,EAAKH,EAAc,WAC7BpI,EAAIE,QAAQQ,IACb,SAAUsG,EAAI3G,GACbL,EAAIM,OAAOD,OAIZL,EAAIO,SAGfnB,EAAcgC,QAAU,SAAU5B,EAAIiB,EAAUY,EAAIE,GAChD,GAAIvB,GAAMhB,EAAGiB,OAsBb,OApBAT,GAAGyH,YAAY,SAAUD,GAErB,GAAIuB,GAAM,kBAAoB9H,EAASoF,eAAiB,YAAcpF,EAASK,oBAAsB,OAChGS,GAAkBd,EAASkC,mBAC5B4F,GAAO,SAAW9H,EAASkC,iBAAmB,OAGlD5D,EAAKqB,MAAM,kBAAoBmI,GAAMlH,IACrC2F,EAAGwB,WAAWD,GAAMlH,GAAK,SAAU2F,EAAI7F,GACnC,GAAIS,GAAU6G,EAAmBhI,EAAUU,EACvCS,GAAQ,GACR5B,EAAIE,QAAQ0B,EAAQ,IAEpB5B,EAAIM,OAAO,OAEhB,SAAU0G,EAAI3G,GACbL,EAAIM,OAAOD,OAIZL,EAAIO,SAGfnB,EAAcqC,KAAO,SAAUjC,EAAIiB,EAAUc,GACzC,GAAIvB,GAAMhB,EAAGiB,OAkBb,OAhBAT,GAAGyH,YAAY,SAAUD,GAErB,GAAIuB,GAAM,kBAAoB9H,EAASoF,eAAiB,KACnDtE,GAAkBd,EAASkC,mBAC5B4F,GAAO,WAAa9H,EAASkC,iBAAmB,OAGpD5D,EAAKqB,MAAM,kBAAoBmI,GAC/BvB,EAAGwB,WAAWD,KAAS,SAAUvB,EAAI7F,GACjC,GAAIS,GAAU6G,EAAmBhI,EAAUU,EAC3CnB,GAAIE,QAAQ0B,IACb,SAAUoF,EAAI3G,GACbL,EAAIM,OAAOD,OAIZL,EAAIO,SAGfnB,EAAckD,OAAS,SAAU9C,EAAIiB,EAAUY,EAAIX,EAAea,GAC9D,GAAIvB,GAAMhB,EAAGiB,OA8Bb,OA5BAS,GAAgBD,EAASM,kBAAkBL,GAAe,GAC1DA,EAAcD,EAASO,uBAAyB,GAAIC,MAEpDzB,EAAGyH,YAAY,SAAUD,GACrB,GAEI1B,GAFA6C,KACAC,IAEJ,KAAK9C,IAAS7E,GAASiE,OACfjE,EAASiE,OAAOsB,eAAeV,IAAU5E,EAAcsF,eAAeV,IAAUA,IAAU7E,EAASK,sBACnGqH,EAAQnG,KAAK,IAAMsD,EAAQ,OAC3B8C,EAAapG,KAAKsG,EAAkB7H,EAASiE,OAAOY,GAAQ5E,IAGpE0H,GAAapG,KAAKX,EAClB,IAAIkH,GAAM,WAAa9H,EAASoF,eAAiB,SAAWsC,EAAQhF,KAAK,KAAO,WAAa1C,EAASK,oBAAsB,OAEvHS,GAAkBd,EAASkC,mBAC5B4F,GAAO,SAAW9H,EAASkC,iBAAmB,OAGlD5D,EAAKqB,MAAM,kBAAoBmI,EAAKH,GACpCpB,EAAGwB,WAAWD,EAAKH,EAAc,WAC7BpI,EAAIE,QAAQQ,IACb,SAAUsG,EAAI3G,GACbL,EAAIM,OAAOD,OAIZL,EAAIO,SAGfnB,EAAcmD,OAAS,SAAU/C,EAAIiB,EAAUY,GAC3C,GAAIrB,GAAMhB,EAAGiB,QAETkI,GAAW,IAAM1H,EAASO,sBAAwB,MAAO,IAAMP,EAASkC,iBAAmB,OAC3FyF,IAAgB,GAAInH,OAAOC,cAAe,EAAGG,EAcjD,OAZA7B,GAAGyH,YAAY,SAAUD,GAErB,GAAIuB,GAAM,WAAa9H,EAASoF,eAAiB,SAAWsC,EAAQhF,KAAK,KAAO,WAAa1C,EAASK,oBAAsB,KAE5H/B,GAAKqB,MAAM,kBAAoBmI,EAAKH,GACpCpB,EAAGwB,WAAWD,EAAKH,EAAc,WAC7BpI,EAAIE,QAAQ,OACb,SAAU8G,EAAI3G,GACbL,EAAIM,OAAOD,OAIZL,EAAIO,SAGfnB,EAAcoD,YAAc,SAAUhD,EAAIiB,EAAUiC,EAAOH,GACvD,GAAIvC,GAAMhB,EAAGiB,OAsBb,OApBAyC,GAAQA,MACRH,EAASA,MAET/C,EAAGyH,YAAY,SAAUD,GACrB,GAAInF,GACAC,IACJ,KAAKD,EAAI,EAAGA,EAAIa,EAAMX,OAAQF,IAC1BC,EAASE,KAAK4F,EAAeZ,EAAIvG,EAAUiC,EAAMb,IAErD,KAAKA,EAAI,EAAGA,EAAIU,EAAOR,OAAQF,IAC3BC,EAASE,KAAK6F,EAAWb,EAAIvG,EAAU8B,EAAOV,GAAGpB,EAASK,sBAG9D9B,GAAGiD,IAAIH,GAAU3B,KAAK,SAAUyB,GAC5B5B,EAAIE,QAAQ0B,IACb,SAAUvB,GACTL,EAAIM,OAAOD,OAIZL,EAAIO,SAGfnB,EAAcwD,aAAe,SAAUpD,EAAIqD,EAAO1B,EAAQ4B,GACtD,GAAI/C,GAAMhB,EAAGiB,QAETsI,EAAM,kBAAoB1F,EAAMgD,eAAiB,YAAchD,EAAM/B,oBAAsB,KAoB/F,OAnBI+B,GAAMF,mBACN4F,GAAO,SAAW1F,EAAMF,iBAAmB,OAG/C5D,EAAKqB,MAAM,kBAAoBmI,GAAMpH,EAAO4B,EAAYE,YAExDzD,EAAGyH,YAAY,SAAUD,GACrBA,EAAGwB,WAAWD,GAAMpH,EAAO4B,EAAYE,WAAY,SAAU+D,EAAIrG,GAC7D,GAAIiB,GAAU6G,EAAmB5F,EAAOlC,EAEpCX,GAAIE,QADJ0B,EAAQ,GACIA,EAAQ,GAER,OAEjB,SAAUoF,EAAI3G,GACbL,EAAIM,OAAOD,OAIZL,EAAIO,SAGfnB,EAAcmE,cAAgB,SAAU/D,EAAIqD,EAAO1B,EAAQ4B,GACvD,GAAI/C,GAAMhB,EAAGiB,QAETsI,EAAM,kBAAoB1F,EAAMgD,eAAiB,YAAc9C,EAAYE,SAAW,KAgB1F,OAfIJ,GAAMF,mBACN4F,GAAO,SAAW1F,EAAMF,iBAAmB,OAG/C5D,EAAKqB,MAAM,kBAAoBmI,GAAMpH,EAAO0B,EAAM/B,uBAElDtB,EAAGyH,YAAY,SAAUD,GACrBA,EAAGwB,WAAWD,GAAMpH,EAAO0B,EAAM/B,sBAAuB,SAAUkG,EAAIrG,GAClE,GAAIiB,GAAU6G,EAAmB5F,EAAOlC,EACxCX,GAAIE,QAAQ0B,IACb,SAAUoF,EAAI3G,GACbL,EAAIM,OAAOD,OAIZL,EAAIO,QAGf,IAAImI,GAAc,SAAU7F,EAAO6B,EAAQsC,GACvC,GAAIhH,GAAMhB,EAAGiB,QAETsI,EAAM,+BAAiC1F,EAAMgD,eAAiB,MAAQnB,EAAOvB,KAAK,MAAQ,GAQ9F,OAPApE,GAAKqB,MAAM,kBAAoBmI,GAC/BvB,EAAGwB,WAAWD,KAAS,WACnBvI,EAAIE,WACL,SAAU8G,EAAI3G,GACbL,EAAIM,OAAOD,KAGRL,EAAIO,QAGfnB,GAAc4I,aAAe,SAAUxI,GACnC,GAGIqC,GACAgB,EACAyC,EACAqD,EACAjE,EAPA5C,KACA8G,KAOAnD,EAASvG,EAAOwG,WAEpB,KAAK7D,EAAI,EAAGA,EAAI4D,EAAO1D,OAAQF,IAAK,CAChCgB,EAAQ4C,EAAO5D,GAEf6C,IACA,KAAKY,IAASzC,GAAM6B,OAChB,GAAI7B,EAAM6B,OAAOsB,eAAeV,GAAQ,CAEpC,OADAqD,EAAS,IAAM9F,EAAM6B,OAAOY,GAAOuD,KAAO,IAClChG,EAAM6B,OAAOY,GAAOxB,MAC5B,IAAK,SACD6E,GAAU,OACV,MACJ,KAAK,SACDA,GAAU,OACV,MACJ,KAAK,OACDA,GAAU,OACV,MACJ,KAAK,UACDA,GAAU,UACV,MACJ,SACI,MAAO3J,GAAGsB,OAAO,6DAGjBuC,EAAM6B,OAAOY,GAAOwD,aACpBH,GAAU,gBAEV9F,EAAM6B,OAAOY,GAAOW,SACpB0C,GAAU,WAEV9F,EAAM6B,OAAOY,GAAOyD,UACpBJ,GAAU,aAEdjE,EAAO1C,KAAK2G,GAGpBC,EAAW5G,MAAMa,MAAOA,EAAO6B,OAAQA,IAS3C,MANAlF,GAAGyH,YAAY,SAAUD,GACrB,IAAKnF,EAAI,EAAGA,EAAI+G,EAAW7G,OAAQF,IAC/BC,EAASE,KAAK0G,EAAYE,EAAW/G,GAAGgB,MAAO+F,EAAW/G,GAAG6C,OAAQsC,MAItEhI,EAAGiD,IAAIH,GAGlB,IAAIkH,GAAmB,SAAUC,EAAYC,EAAWlC,GACpD,GAAIhH,GAAMhB,EAAGiB,QAET0I,EAAS,IAAMM,EAAWJ,KAAO,GACrC,QAAQI,EAAWnF,MACnB,IAAK,SACD6E,GAAU,OACV,MACJ,KAAK,SACDA,GAAU,OACV,MACJ,KAAK,OACDA,GAAU,OACV,MACJ,KAAK,UACDA,GAAU,UACV,MACJ,SACI,MAAO3J,GAAGsB,OAAO,6DAGjB2I,EAAWH,aACXH,GAAU,gBAEVM,EAAWhD,SACX0C,GAAU,WAEVM,EAAWF,UACXJ,GAAU,YAGd,IAAIJ,GAAM,gBAAkBW,EAAY,SAAWP,CAQnD,OAPA5J,GAAKqB,MAAM,kBAAoBmI,GAC/BvB,EAAGwB,WAAWD,KAAS,WACnBvI,EAAIE,WACL,SAAU8G,EAAI3G,GACbL,EAAIM,OAAOD,KAGRL,EAAIO,SAGX4I,EAAe,SAAUtG,EAAOuG,EAAWpC,GAC3C,GAEInF,GACAwH,EAHAvH,KAIAwH,EAAW,IACf,KAAKzH,EAAI,EAAGA,EAAIuH,EAAUrH,OAAQF,IAE9B,GADAwH,EAAMD,EAAUvH,GACZwH,EAAIE,WAAa1G,EAAMgD,eAAgB,CACvCyD,EAAWD,EAAId,GACf,OAIR,GAAIe,EAAU,CACV,GAAIhE,GACAkE,IACJ,KAAKlE,IAASzC,GAAM6B,OAEZ7B,EAAM6B,OAAOsB,eAAeV,IAAkD,KAAxCgE,EAAShG,QAAQ,IAAMgC,EAAQ,MACrEkE,EAAcxH,KAAKa,EAAM6B,OAAOY,GAIxC,KAAKzD,EAAI,EAAGA,EAAI2H,EAAczH,OAAQF,IAClCC,EAASE,KAAKgH,EAAiBQ,EAAc3H,GAAIgB,EAAMgD,eAAgBmB,IAI/E,MAAOhI,GAAGiD,IAAIH,GAGlB1C,GAAc6I,cAAgB,SAAUzI,GACpC,GAAIQ,GAAMhB,EAAGiB,OA+Bb,OA7BAT,GAAGyH,YAAY,SAAUD,GACrB,GAAIuB,GAAM,8DACVxJ,GAAKqB,MAAM,kBAAoBmI,GAC/BvB,EAAGwB,WAAWD,KAAS,SAAUvB,EAAI7F,GACjC,GAAI0B,GAIAhB,EAHA4D,EAASvG,EAAOwG,YAChB5D,KAGAsH,IACJ,KAAKvH,EAAI,EAAGA,EAAIV,EAAOsI,KAAK1H,OAAQF,IAChCuH,EAAUpH,KAAKb,EAAOsI,KAAKC,KAAK7H,GAGpC,KAAKA,EAAI,EAAGA,EAAI4D,EAAO1D,OAAQF,IAC3BgB,EAAQ4C,EAAO5D,GACfC,EAASE,KAAKmH,EAAatG,EAAOuG,EAAWpC,GAGjDhI,GAAGiD,IAAIH,GAAU3B,KAAK,WAClBH,EAAIE,WACL,SAAUG,GACTL,EAAIM,OAAOD,MAEhB,SAAU2G,EAAI3G,GACbL,EAAIM,OAAOD,OAIZL,EAAIO,QAGf,IAAIqH,GAAiB,SAAUZ,EAAIvG,EAAUC,GACzC,GAKI4E,GALAtF,EAAMhB,EAAGiB,QAETkI,KACAC,KACAC,IAEJ,KAAK/C,IAAS7E,GAASiE,OACfjE,EAASiE,OAAOsB,eAAeV,IAAU5E,EAAcsF,eAAeV,KACtE6C,EAAQnG,KAAK,IAAMsD,EAAQ,KAC3B8C,EAAapG,KAAKsG,EAAkB7H,EAASiE,OAAOY,GAAQ5E,IAC5D2H,EAAarG,KAAK,KAG1B,IAAIuG,GAAM,2BAA6B9H,EAASoF,eAAiB,MAAQsC,EAAQhF,KAAK,KAAO,aAAekF,EAAalF,KAAK,KAAM,GASpI,OARApE,GAAKqB,MAAM,kBAAoBmI,EAAKH,GACpCpB,EAAGwB,WAAWD,EAAKH,EAAc,SAAUpB,EAAI7F,GAC3C,GAAIS,GAAU6G,EAAmBhI,EAAUU,EAC3CnB,GAAIE,QAAQ0B,EAAQ,KACrB,SAAUoF,EAAI3G,GACbL,EAAIM,OAAOD,KAGRL,EAAIO,SAGXsH,EAAa,SAAUb,EAAIvG,EAAUY,GACrC,GAAIrB,GAAMhB,EAAGiB,QAETsI,EAAM,gBAAkB9H,EAASoF,eAAiB,YAAcpF,EAASK,oBAAsB,KAQnG,OAPA/B,GAAKqB,MAAM,kBAAoBmI,GAAMlH,IACrC2F,EAAGwB,WAAWD,GAAMlH,GAAK,WACrBrB,EAAIE,WACL,SAAU8G,EAAI3G,GACbL,EAAIM,OAAOD,KAGRL,EAAIO,SAGX+H,EAAoB,SAAUhD,EAAO5E,GACrC,OAAQ4E,EAAMxB,MACd,IAAK,SACL,IAAK,SACD,MAAOpD,GAAc4E,EAAMuD,KAC/B,KAAK,OACD,MAAInI,GAAc4E,EAAMuD,eAAiB5H,MAC9BP,EAAc4E,EAAMuD,MAAM3H,cAE9B,GAAID,MAAKP,EAAc4E,EAAMuD,OAAO3H,aAC/C,KAAK,UACD,MAAIR,GAAc4E,EAAMuD,SAAU,GAAsC,IAA9BnI,EAAc4E,EAAMuD,MACnD,EAEJ,IAIXc,EAAsB,SAAUrE,EAAOsE,GACvC,MAAmB,YAAftE,EAAMxB,KACmC,IAAlC8F,EAAkBtE,EAAMuD,MAE5Be,EAAkBtE,EAAMuD,OAG/BgB,EAAoB,SAAUpJ,EAAUU,GACxC,GAAImE,GACAwE,IACJ,KAAKxE,IAAS7E,GAASiE,OACfjE,EAASiE,OAAOsB,eAAeV,IAAUnE,EAAO6E,eAAeV,KAC/DwE,EAAIxE,GAASqE,EAAoBlJ,EAASiE,OAAOY,GAAQnE,GAGjE,OAAO2I,IAGPrB,EAAqB,SAAUhI,EAAUU,GACzC,GACIU,GADAD,IAEJ,KAAKC,EAAI,EAAGA,EAAIV,EAAOsI,KAAK1H,OAAQF,IAChCD,EAAQI,KAAK6H,EAAkBpJ,EAAUU,EAAOsI,KAAKC,KAAK7H,IAG9D,OAAOD,GAGX,OAAOxC,MCngBf7C,QAAQC,OAAO,4BAA6B,WAAWmB,SAAS,0BAC5D,WAEI,GAAIC,KAGJA,GAAemM,kBAAoB,QACnC/M,KAAKgN,qBAAuB,SAAUD,GAKlC,MAJkE,MAA9DA,EAAkBnL,UAAUmL,EAAkBhI,OAAS,KACvDgI,GAAqB,KAEzBnM,EAAemM,kBAAoBA,EAC5B/M,MAIXY,EAAeqM,aAAe,UAC9BjN,KAAKkN,gBAAkB,SAAUD,GAE7B,MADArM,GAAeqM,aAAeA,EACvBjN,MAIXY,EAAeuM,gBAAkB,aACjCnN,KAAKoN,mBAAqB,SAAUD,GAEhC,MADAvM,GAAeuM,gBAAkBA,EAC1BnN,MAGXA,KAAK8B,MACD,QACA,OACA,KACA,wBAEA,SAAUuL,EACAtL,EACAC,EACAtC,GAEN,GAAI4C,MAGAgL,EAAoB,SAAUC,EAAKjJ,GAEnC,MADAiJ,IAAOjJ,EAAeA,EAAakJ,eAAiB,GA+MxD,OArMAlL,GAAQkB,OAAS,SAAUC,EAAUC,GACjC,GACIC,GADAX,EAAMhB,EAAGiB,QAGTsK,EAAM3M,EAAemM,kBAAoBtJ,EAASoF,cActD,OAZAwE,GAAMI,KAAKF,EAAK7J,GACXgK,QAAQ,SAAU/N,EAAME,EAAQC,EAASC,GACtC4D,EAAW,GAAIjE,GAAgBC,EAAM,EAAGE,EAAQC,EAASC,GACzDgC,EAAKqB,MAAM,4BAA8BK,EAASI,UAAWF,GAC7DX,EAAIE,QAAQS,KAEfb,MAAM,SAAUA,EAAOjD,EAAQC,EAASC,GACrC4D,EAAW,GAAIjE,GAAgBoD,EAAO,EAAGjD,EAAQC,EAASC,GAC1DgC,EAAKe,MAAM,4BAA8BW,EAASI,UAAWF,EAAUD,GACvEV,EAAIM,OAAOK,KAGZX,EAAIO,SAUfjB,EAAQ8B,QAAU,SAAUX,EAAUY,EAAIC,GACtC,GACIX,GADAX,EAAMhB,EAAGiB,OAGb,KAAKoB,EAGD,MAFAV,GAAW,GAAIjE,GAAgB,8BAA+B,EAAGA,EAAgBW,aACjF0B,EAAKe,MAAM,6BAA+BW,EAASI,UAAWF,EAAUU,EAAIC,GACrEtC,EAAGsB,OAAOK,EAGrB,IAAI4J,GAAMD,EAAkB1M,EAAemM,kBAAoBtJ,EAASoF,eAAiB,IAAMxE,EAAIC,EAcnG,OAZA+I,GAAMhD,IAAIkD,GACLG,QAAQ,SAAU/N,EAAME,EAAQC,EAASC,GACtC4D,EAAW,GAAIjE,GAAgBC,EAAM,EAAGE,EAAQC,EAASC,GACzDgC,EAAKqB,MAAM,6BAA+BK,EAASI,UAAWF,EAAUU,EAAIC,GAC5EtB,EAAIE,QAAQS,KAEfb,MAAM,SAAUA,EAAOjD,EAAQC,EAASC,GACrC4D,EAAW,GAAIjE,GAAgBoD,EAAO,EAAGjD,EAAQC,EAASC,GAC1DgC,EAAKe,MAAM,6BAA+BW,EAASI,UAAWF,EAAUU,EAAIC,GAC5EtB,EAAIM,OAAOK,KAGZX,EAAIO,SASfjB,EAAQmC,KAAO,SAAUhB,EAAUa,GAC/B,GACIX,GADAX,EAAMhB,EAAGiB,QAGTsK,EAAMD,EAAkB1M,EAAemM,kBAAoBtJ,EAASoF,eAAgBvE,EAwBxF,OAtBA+I,GAAMhD,IAAIkD,GACLG,QAAQ,SAAU/N,EAAME,EAAQC,EAASC,GACtC,GACIqF,GADAR,EAAUjF,CAGViB,GAAeqM,eACfrI,EAAUjF,EAAKiB,EAAeqM,cAC1BrM,EAAeuM,iBAAmBxN,EAAKiB,EAAeuM,mBACtD/H,EAAazF,EAAKiB,EAAeuM,mBAIzCxJ,EAAW,GAAIjE,GAAgBkF,EAASQ,EAAYvF,EAAQC,EAASC,GACrEgC,EAAKqB,MAAM,0BAA4BK,EAASI,UAAWF,EAAUW,GACrEtB,EAAIE,QAAQS,KAEfb,MAAM,SAAUA,EAAOjD,EAAQC,EAASC,GACrC4D,EAAW,GAAIjE,GAAgBoD,EAAO,EAAGjD,EAAQC,EAASC,GAC1DgC,EAAKe,MAAM,0BAA4BW,EAASI,UAAWF,EAAUW,GACrEtB,EAAIM,OAAOK,KAGZX,EAAIO,SAUfjB,EAAQgD,OAAS,SAAU7B,EAAUY,EAAIX,GACrC,GACIC,GADAX,EAAMhB,EAAGiB,OAGb,KAAKoB,EAGD,MAFAV,GAAW,GAAIjE,GAAgB,8BAA+B,EAAGA,EAAgBW,aACjF0B,EAAKe,MAAM,4BAA8BW,EAASI,UAAWF,EAAUD,GAChE1B,EAAGsB,OAAOK,EAGrB,IAAI4J,GAAM3M,EAAemM,kBAAoBtJ,EAASoF,eAAiB,IAAMxE,CAc7E,OAZAgJ,GAAM1C,IAAI4C,EAAK7J,GACVgK,QAAQ,SAAU/N,EAAME,EAAQC,EAASC,GACtC4D,EAAW,GAAIjE,GAAgBC,EAAM,EAAGE,EAAQC,EAASC,GACzDgC,EAAKqB,MAAM,4BAA8BK,EAASI,UAAWF,EAAUD,GACvEV,EAAIE,QAAQS,KAEfb,MAAM,SAAUA,EAAOjD,EAAQC,EAASC,GACrC4D,EAAW,GAAIjE,GAAgBoD,EAAO,EAAGjD,EAAQC,EAASC,GAC1DgC,EAAKe,MAAM,4BAA8BW,EAASI,UAAWF,EAAUD,GACvEV,EAAIM,OAAOK,KAGZX,EAAIO,SASfjB,EAAQiD,OAAS,SAAU9B,EAAUY,GACjC,GACIV,GADAX,EAAMhB,EAAGiB,OAGb,KAAKoB,EAGD,MAFAV,GAAW,GAAIjE,GAAgB,8BAA+B,EAAGA,EAAgBW,aACjF0B,EAAKe,MAAM,4BAA8BW,EAASI,UAAWF,EAAUU,GAChErC,EAAGsB,OAAOK,EAGrB,IAAI4J,GAAM3M,EAAemM,kBAAoBtJ,EAASoF,eAAiB,IAAMxE,CAc7E,OAZAgJ,IAAOM,OAAQ,SAAUJ,IAAKA,IACzBG,QAAQ,SAAU/N,EAAME,EAAQC,EAASC,GACtC4D,EAAW,GAAIjE,GAAgBC,EAAM,EAAGE,EAAQC,EAASC,GACzDgC,EAAKqB,MAAM,4BAA8BK,EAASI,UAAWF,EAAUU,GACvErB,EAAIE,QAAQS,KAEfb,MAAM,SAAUA,EAAOjD,EAAQC,EAASC,GACrC4D,EAAW,GAAIjE,GAAgBoD,EAAO,EAAGjD,EAAQC,EAASC,GAC1DgC,EAAKe,MAAM,4BAA8BW,EAASI,UAAWF,EAAUU,GACvErB,EAAIM,OAAOK,KAGZX,EAAIO,SAUfjB,EAAQkD,YAAc,SAAU/B,EAAUgC,EAAYmI,GAClD,GACIjK,GADAX,EAAMhB,EAAGiB,QAGTsK,EAAM3M,EAAemM,kBAAoBtJ,EAASoF,cAwBtD,OAtBAwE,GAAM1C,IAAI4C,GAAM5N,KAAM8F,EAAYmI,SAAUA,IACvCF,QAAQ,SAAU/N,EAAME,EAAQC,EAASC,GACtC,GACIqF,GADAR,EAAUjF,CAGViB,GAAeqM,eACfrI,EAAUjF,EAAKiB,EAAeqM,cAC1BrM,EAAeuM,iBAAmBxN,EAAKiB,EAAeuM,mBACtD/H,EAAazF,EAAKiB,EAAeuM,mBAIzCxJ,EAAW,GAAIjE,GAAgBkF,EAASQ,EAAYvF,EAAQC,EAASC,GACrEgC,EAAKqB,MAAM,iCAAmCK,EAASI,UAAWF,EAAU8B,GAC5EzC,EAAIE,QAAQS,KAEfb,MAAM,SAAUA,EAAOjD,EAAQC,EAASC,GACrC4D,EAAW,GAAIjE,GAAgBoD,EAAO,EAAGjD,EAAQC,EAASC,GAC1DgC,EAAKe,MAAM,iCAAmCW,EAASI,UAAWF,EAAU8B,GAC5EzC,EAAIM,OAAOK,KAGZX,EAAIO,SAGRjB,OC3PvB/C,QAAQC,OAAO,uBAAwB,WAAWmB,SAAS,qBACvD,WAEI,GAAIC,KAGJA,GAAeiN,cAAgB,GAC/B7N,KAAK8N,UAAY,SAAUD,GAEvB,MADAjN,GAAeiN,cAAgBA,EACxB7N,MAIXY,EAAemN,aAAe,GAC9B/N,KAAKgO,SAAW,SAAUD,GAEtB,MADAnN,GAAemN,aAAeA,EACvB/N,MAGXA,KAAK8B,MACD,YACA,OACA,KACA,wBACA,qBACA,kBACA,6BAEA,SAAUmM,EACAlM,EACAC,EACAtC,EACAwO,EACAC,EACAC,GAEN,GAAI9L,KAOJA,GAAQ+L,oBAAsB,SAAU5K,GACpC,GAAI6K,GAASC,IACTC,EAAQC,GAEZ,OAAKH,GAIAE,EAK6B,kBAAvBF,GAAO9I,aACdzD,EAAKe,MAAM,mEAAoE9C,KAAMyD,IAC9E,GAEsB,kBAAtB+K,GAAMhJ,aACbzD,EAAKe,MAAM,kEAAmE9C,KAAMyD,IAC7E,IAG+B,kBAA/B6K,GAAOD,qBAAuCC,EAAOD,oBAAoB5K,MAG3C,kBAA9B+K,GAAMH,qBAAuCG,EAAMH,oBAAoB5K,KAI3E,GANI,GAdP1B,EAAKe,MAAM,qCAAsC9C,KAAMyD,IAChD,IALP1B,EAAKe,MAAM,sCAAuC9C,KAAMyD,IACjD,IAiCfnB,EAAQkB,OAAS,SAAUC,EAAUC,EAAeY,GAChD,MAAIA,IAAgBA,EAAaoK,kBAAmB,EACzCH,IAAY/K,OAAOC,EAAUC,GAE7B+K,IAAWjL,OAAOC,EAAUC,IAY3CpB,EAAQ8B,QAAU,SAAUX,EAAUY,EAAIC,GACtC,GAAIX,EAEJ,OAAKU,GAMDC,GAAgBA,EAAaoK,kBAAmB,EACzCH,IAAYnK,QAAQX,EAAUY,EAAIC,GAElCmK,IAAWrK,QAAQX,EAAUY,EAAIC,IARxCX,EAAW,GAAIjE,GAAgB,8BAA+B,EAAGA,EAAgBW,aACjF0B,EAAKe,MAAM,wBAA0BW,EAASI,UAAWF,EAAUU,EAAIC,GAChEtC,EAAGsB,OAAOK,KAgBzBrB,EAAQmC,KAAO,SAAUhB,EAAUa,GAC/B,MAAIA,IAAgBA,EAAaoK,kBAAmB,EACzCH,IAAY9J,KAAKhB,EAAUa,GAE3BmK,IAAWhK,KAAKhB,EAAUa,IAYzChC,EAAQgD,OAAS,SAAU7B,EAAUY,EAAIX,EAAeY,GACpD,GAAIX,EAEJ,OAAKU,GAMDC,GAAgBA,EAAaoK,kBAAmB,EACzCH,IAAYjJ,OAAO7B,EAAUY,EAAIX,GAEjC+K,IAAWnJ,OAAO7B,EAAUY,EAAIX,IARvCC,EAAW,GAAIjE,GAAgB,8BAA+B,EAAGA,EAAgBW,aACjF0B,EAAKe,MAAM,uBAAyBW,EAASI,UAAWF,EAAUD,GAC3D1B,EAAGsB,OAAOK,KAkBzBrB,EAAQiD,OAAS,SAAU9B,EAAUY,EAAIC,GACrC,GAAIX,EAEJ,OAAKU,GAMDC,GAAgBA,EAAaoK,kBAAmB,EACzCH,IAAYhJ,OAAO9B,EAAUY,GAE7BoK,IAAWlJ,OAAO9B,EAAUY,IARnCV,EAAW,GAAIjE,GAAgB,8BAA+B,EAAGA,EAAgBW,aACjF0B,EAAKe,MAAM,uBAAyBW,EAASI,UAAWF,EAAUU,GAC3DrC,EAAGsB,OAAOK,KAgBzBrB,EAAQkD,YAAc,SAAU/B,GAC5B,GAAIA,YAAoBkL,OAAO,CAC3B,GACI9J,GADAC,IAEJ,KAAKD,EAAI,EAAGA,EAAIpB,EAASsB,OAAQF,IAC7BC,EAASE,KAAK4J,EAAmBnL,EAASoB,IAE9C,OAAO7C,GAAGiD,IAAIH,GAElB,MAAO8J,GAAmBnL,GAG9B,IAAIoL,GAAa,SAAUvM,GACvB,MAA2B,gBAAZA,GAAwB2L,EAAU5D,IAAI/H,GAAWA,GAEhEiM,EAAY,WACZ,MAAOM,GAAWjO,EAAeiN,gBAEjCY,EAAW,WACX,MAAOI,GAAWjO,EAAemN,eAWjCe,EAAa,SAAUC,EAAMC,EAAUC,EAAgBpP,GACvDG,KAAK+O,KAAOA,EACZ/O,KAAKgP,SAAWA,EAChBhP,KAAKiP,eAAiBA,EACtBjP,KAAKH,OAASA,GAQdqP,EAAkB,SAAUzL,GAC5B,MAAOyK,GAAa7D,IAAI6D,EAAaiB,KAAKC,UAAW3L,EAASI,YAO9DwL,EAA0B,SAAU5L,GACpCyK,EAAaoB,IAAIpB,EAAaiB,KAAKC,WAAW,GAAInL,OAAOC,cAAeT,EAASI,YASjF0L,EAAsB,SAAU9L,EAAU9D,GAC1C,GAAIiO,GAAWsB,EAAgBzL,EAC/B,OAAO8K,KAAY/I,YAAY/B,EAAU9D,EAAMiO,IAU/C4B,EAA0B,SAAU/L,EAAU9D,GAC9C,GAAIiO,GAAWsB,EAAgBzL,EAC/B,OAAOgL,KAAWjJ,YAAY/B,EAAU9D,EAAMiO,IAQ9CgB,EAAqB,SAAUnL,GAC/B,GACIU,GADAnB,EAAMhB,EAAGiB,QAGTwM,KACAC,KACAC,EAAsB,EAEtBC,EAAc,SAAUvM,GACxBc,EAAS,GAAI2K,GAAWW,EAAiBC,EAAkBC,EAAqBtM,GAChFtB,EAAKe,MAAM,gBAAkBW,EAASI,UAAWM,GACjDnB,EAAIM,OAAOa,IAGX0L,EAAiB,WACjB1L,EAAS,GAAI2K,GAAWW,EAAiBC,EAAkBC,EAAqB,YAChF5N,EAAKqB,MAAM,gBAAkBK,EAASI,UAAW,gBAAiBM,GAClEkL,EAAwB5L,GACxBT,EAAIE,QAAQiB,GAGhBpC,GAAKqB,MAAM,gBAAkBK,EAASI,UAAY,gBAElD,IAAI+J,GAAWsB,EAAgBzL,GAC3Ba,EAAe,GAAI8J,EACvB,IAAIR,EAAU,CACV,GAAI1G,GAAY,GAAIiH,GAAU,gBAAgB2B,qBAAqBlC,EACnEtJ,GAAaK,QAAQuC,GAuBzB,MApBAuH,KAAWhK,KAAKhB,EAAUa,GAAc,GAAMnB,KAAK,SAAUQ,GACzD5B,EAAKqB,MAAM,wBAA0BO,EAAS/D,MAAQ,0BACtD+P,GAAuBhM,EAAS/D,MAChC6P,EAAkB9L,EAAShE,KAC3B4P,EAAoB9L,EAAUE,EAAShE,MAAMwD,KAAK,SAAU4M,GAGxDhO,EAAKqB,MAAM,sBAAwB2M,EAAapQ,KAAKoF,OAAS,2BAC9D4K,GAAuBI,EAAapQ,KAAKoF,OACzC2K,EAAmBK,EAAapQ,KAE5BoQ,EAAapQ,KAAKoF,OAAS,EAC3ByK,EAAwB/L,EAAUsM,EAAapQ,MAAMwD,KAAK0M,EAAgBD,GAG1EC,KAELD,IACJA,GAEI5M,EAAIO,QAGf,OAAOjB,QC7TvB/C,QAAQC,OAAO,UAAUC,QAAQ,qBAC7B,YACA,OACA,KACA,kBACA,6BAEA,SAAUwO,EAAWlM,EAAMC,EAAImM,EAAWC,GAOtC,GAAI4B,GAAc,SAAUC,GACxBjQ,KAAKkQ,SAAU,EAEXD,EAAWnJ,KACX9G,KAAK8G,KAAOmJ,EAAWnJ,KACa,gBAAtBmJ,GAAWE,OACzBnQ,KAAK8G,KAAO,SACyB,gBAAvBmJ,GAAWG,UACzBpQ,KAAK8G,KAAO,WAGhB9G,KAAK6D,UAAYoM,EAAWpM,WAAaoM,EAAWE,QAAUF,EAAWG,QACzEpQ,KAAKoG,MAAQ6J,EAAWI,IAAMJ,EAAW7J,OAASpG,KAAK6D,UACvD7D,KAAKiG,SAAWgK,EAAWhK,UAAYgK,EAAWK,WAClDtQ,KAAKyG,WAAawJ,EAAWxJ,YAAc,WAAc,MAAO,IAAI2H,IAE/DpO,KAAK6D,WAAc7D,KAAK8G,MAAS9G,KAAKiG,WACvClE,EAAKe,MAAM,qDAAsDmN,GACjEjQ,KAAKkQ,SAAU,GA4EvB,OApEAF,GAAYO,UAAU1J,SAAW,WAC7B,GAAI2J,GAAgBvC,EAAU5D,IAAI,SAClC,OAAOmG,GAAc3J,SAAS7G,KAAK6D,YAQvCmM,EAAYO,UAAUE,OAAS,SAAUC,GACrC,GAAI1N,GAAMhB,EAAGiB,QACT0N,EAAO3Q,KACP4Q,EAAQD,EAAK9J,UAEjB,KAAK+J,EACD,MAAO5O,GAAGsB,OAAO,6DAGrB,IAAIgB,GAAeqM,EAAKlK,WAAWiK,EAEnC,IAAkB,WAAdC,EAAK7J,KAEL8J,EAAMtO,QAAQ8B,QAAQwM,EAAOF,EAAOC,EAAK1K,UAAW3B,GAAcnB,KAAK,SAAUQ,GAC7E+M,EAAOC,EAAKvK,OAASwK,EAAM7M,kBAAkBJ,EAAShE,MAEtD+Q,EAAOG,QAAQC,YAAYH,EAAKvK,OAASwK,EAAM7M,kBAAkBJ,EAAShE,MAC1EoC,EAAKqB,MAAM,sBAAuBuN,EAAK7J,KAAM6J,EAAKvK,MAAOsK,EAAQ/M,GACjEX,EAAIE,WACL,SAAUG,GACTtB,EAAKe,MAAM,sBAAuB6N,EAAK7J,KAAM6J,EAAKvK,MAAOsK,EAAQrN,GACjEL,EAAIM,OAAOD,SAGZ,IAAkB,YAAdsN,EAAK7J,KAAoB,CAEhC,GAAII,GAAY,GAAIiH,GAAUwC,EAAK1K,UAAU8K,OAAOL,EAAOM,kBACvDC,EAAoB3M,EAAaK,SACjCsM,KACA/J,EAAYiH,EAAUhI,MAAMe,EAAW+J,KAE3C3M,EAAaK,QAAQuC,GAErB0J,EAAMtO,QAAQmC,KAAKmM,EAAOtM,GAAcnB,KAAK,SAAUQ,GACnD,GAGIkB,GAHAqM,KACAC,IAGJ,KAAKtM,EAAI,EAAGA,EAAIlB,EAAShE,KAAKoF,OAAQF,IAClCqM,EAAKlM,KAAK4L,EAAM7M,kBAAkBJ,EAAShE,KAAKkF,KAChDsM,EAAOnM,KAAK4L,EAAM7M,kBAAkBJ,EAAShE,KAAKkF,IAEtD6L,GAAOC,EAAKvK,OAAS8K,EACrBR,EAAOG,QAAQC,YAAYH,EAAKvK,OAAS+K,EACzCpP,EAAKqB,MAAM,sBAAuBuN,EAAK7J,KAAM6J,EAAKvK,MAAOsK,EAAQ/M,GACjEX,EAAIE,WACL,SAAUG,GACTtB,EAAKe,MAAM,sBAAuB6N,EAAK7J,KAAM6J,EAAKvK,MAAOsK,EAAQrN,GACjEL,EAAIM,OAAOD,SAGftB,GAAKe,MAAM,qDAAsD6N,EAAK7J,KAAM6J,EAAKvK,MAAOsK,GACxF1N,EAAIM,OAAO,iCAGf,OAAON,GAAIO,SAGRyM,KC5GfzQ,QAAQC,OAAO,UAAUC,QAAQ,gBAC7B,OACA,KAEA,SAAUsC,EAAMC,GAWZ,GAAIoP,GAAS,SAAUC,EAAQxL,EAAOyL,GAClCzL,EAAM0L,oBAAoBvR,KAAMqR,OAEhCG,OAAOC,eAAezR,KAAM,WAAYwK,OACpCkH,gBAAgB,GAAIzN,OAAO0N,UAC3BC,gBAAgB,EAChBN,UAAWA,KAAc,EACzBO,gBAAgB,EAChBf,YAAa,QAEjBU,OAAOC,eAAezR,KAAM,UAAWwK,MAAO3E,IAE9C7F,KAAK8R,iCACL9R,KAAK+R,cA+QT,OAxQAX,GAAOb,UAAUS,eAAiB,WAC9B,MAAOhR,MAAKA,KAAKgS,OAAOlO,sBAM5BsN,EAAOb,UAAUuB,+BAAiC,WAC9C,GAAIjN,GACAuB,EACA6L,EACA7K,CACJ,KAAKvC,EAAI,EAAGA,EAAI7E,KAAKgS,OAAOE,aAAanN,OAAQF,IAI7C,GAHAuB,EAAQpG,KAAKgS,OAAOE,aAAarN,GAAGuB,MACpC6L,EAAejS,KAAKgS,OAAOE,aAAarN,GAAGgC,WAEF,WAArC7G,KAAKgS,OAAOE,aAAarN,GAAGiC,KACRnE,SAAhB3C,KAAKoG,IAAyBpG,KAAKoG,GAAOyK,UAC1C7Q,KAAKoG,GAAS,GAAI6L,GAAab,OAAOpR,KAAKoG,GAAQpG,KAAK6Q,QAAQS,gBAEjE,IAAyC,YAArCtR,KAAKgS,OAAOE,aAAarN,GAAGiC,MACfnE,SAAhB3C,KAAKoG,IAAwBpG,KAAKoG,YAAkBuI,OACpD,IAAKvH,EAAI,EAAGA,EAAIpH,KAAKoG,GAAOrB,OAAQqC,IAC3BpH,KAAKoG,GAAOgB,GAAGyJ,UAChB7Q,KAAKoG,GAAOgB,GAAK,GAAI6K,GAAab,OAAOpR,KAAKoG,GAAOgB,GAAIpH,KAAK6Q,QAAQS,aAc9FF,EAAOb,UAAUxJ,QAAU,SAAUoL,GACjC,GAAIpM,GAAc/F,KAAKgS,OAAOpL,sBAAsBuL,EAEpD,OAAKpM,GAIEA,EAAY0K,OAAOzQ,MAHfgC,EAAGsB,OAAO,oDAUzB8N,EAAOb,UAAU6B,SAAW,WAExB,GAAI9J,GAEA+J,EADAC,GAAc,CAElB,KAAKhK,IAAStI,MAAKgS,OAAOtK,OACtB,GAAI1H,KAAKgS,OAAOtK,OAAOsB,eAAeV,GAAQ,CAE1C,GADA+J,EAAoC,OAAhBrS,KAAKsI,IAAmC3F,SAAhB3C,KAAKsI,GAC7CtI,KAAKgS,OAAOtK,OAAOY,GAAOyD,WAAY,GAAQsG,EAE9C,MADAtQ,GAAKqB,MAAM,kCAAmC,yBAA0BkF,EAAOtI,OACxE,CAEX,QAAQA,KAAKgS,OAAOtK,OAAOY,GAAOxB,MAC9B,IAAK,SACDwL,EAAqC,gBAAhBtS,MAAKsI,EAC1B,MACJ,KAAK,SACDgK,EAAqC,gBAAhBtS,MAAKsI,EAC1B,MACJ,KAAK,UACDgK,EAActS,KAAKsI,MAAW,GAAQtI,KAAKsI,MAAW,CACtD,MACJ,KAAK,OACDgK,EAActS,KAAKsI,YAAkBrE,QAASsO,MAAMtO,KAAKuO,MAAMxS,KAAKsI,KAG5E,IAAKgK,IAAgBD,EAEjB,MADAtQ,GAAKqB,MAAM,kCAAmCkF,EAAQ,cAAgBtI,KAAKgS,OAAOtK,OAAOY,GAAOxB,KAAM9G,OAC/F,CAEX,IAAkD,kBAAvCA,MAAKgS,OAAOtK,OAAOY,GAAOmK,WAA4BzS,KAAKgS,OAAOtK,OAAOY,GAAOmK,SAASzS,KAAKsI,IAErG,MADAvG,GAAKqB,MAAM,kCAAmC,0BAA2BkF,EAAOtI,OACzE,EAInB,OAAO,GAWXoR,EAAOb,UAAUmC,MAAQ,SAAUpO,GAC/B,GAAItB,GAAMhB,EAAGiB,QACT0N,EAAO3Q,IAEX,KAAK2Q,EAAKyB,WAGN,MAFArQ,GAAK4Q,KAAK,yBAA0BhC,EAAMA,EAAKA,EAAKqB,OAAOlO,sBAC3D6M,EAAKiC,SACE5Q,EAAGsB,OAAO,UAGrBqN,GAAKE,QAAQgB,gBAAiB,CAC9B,IAAIgB,GAAalC,EAAKqB,OAAOc,QAAQnC,GAEjCoC,EAAmB,SAAUrC,EAAQsC,GACrCtC,EAAOG,QAAQgB,gBAAiB,EAC5BmB,KAAc,GACdtC,EAAOqB,cACPrB,EAAOG,QAAQS,WAAY,GAE3BZ,EAAOkC,SAKf,IAAIjC,EAAKE,QAAQS,WAAauB,EAAWlC,EAAKqB,OAAOlO,qBAAsB,CACvE+O,EAAalC,EAAKqB,OAAOiB,UAAUJ,EAEnC,IAAIxO,GAAKwO,EAAWlC,EAAKqB,OAAOlO,oBAChC6M,GAAKqB,OAAO1P,QAAQgD,OAAOqL,EAAKqB,OAAQ3N,EAAIwO,EAAYvO,GAAcnB,KAAK,SAAUQ,GACjF,GAAIQ,GAASwM,EAAKqB,OAAOkB,gBAAgBvP,EAAShE,KAClDgR,GAAKqB,OAAOT,oBAAoBZ,EAAMxM,GACtC4O,EAAiBpC,GAAM,GACvB5O,EAAKqB,MAAM,wBAAyBuN,EAAMkC,EAAYlP,GACtDX,EAAIE,QAAQyN,IACb,SAAUtN,GACT0P,EAAiBpC,GAAM,GACvB5O,EAAKe,MAAM,wBAAyB6N,EAAMkC,EAAYxP,GACtDL,EAAIM,OAAOD,SAIfwP,GAAalC,EAAKqB,OAAOmB,UAAUN,GACnClC,EAAKqB,OAAO1P,QAAQkB,OAAOmN,EAAKqB,OAAQa,EAAYvO,GAAcnB,KAAK,SAAUQ,GAC7E,GAAIQ,GAASwM,EAAKqB,OAAOkB,gBAAgBvP,EAAShE,KAClDgR,GAAKqB,OAAOT,oBAAoBZ,EAAMxM,GACtC4O,EAAiBpC,GAAM,GACvB5O,EAAKqB,MAAM,wBAAyBuN,EAAMkC,EAAYlP,GACtDX,EAAIE,QAAQyN,IACb,SAAUtN,GACT0P,EAAiBpC,GAAM,GACvB5O,EAAKe,MAAM,wBAAyB6N,EAAMkC,EAAYxP,GACtDL,EAAIM,OAAOD,IAInB,OAAOL,GAAIO,SAUf6N,EAAOb,UAAU6C,QAAU,SAAU9O,GACjC,MAAItE,MAAKA,KAAKgS,OAAOlO,qBACV9D,KAAKgS,OAAO1P,QAAQiD,OAAOvF,KAAKgS,OAAQhS,KAAKA,KAAKgS,OAAOlO,qBAAsBQ,IAE1FvC,EAAKe,MAAM,kBAAmB,iCACvBd,EAAGsB,OAAO,oCASrB8N,EAAOb,UAAUwB,YAAc,WAC3B/R,KAAK6Q,QAAQC,YAAc9Q,KAAKgS,OAAOjO,kBAAkB/D,MAAM,GAC/DA,KAAK6Q,QAAQa,gBAAiB,GAAIzN,OAAO0N,UACzC3R,KAAK6Q,QAAQe,gBAAiB,GAUlCR,EAAOb,UAAU8C,SAAW,WACxB,GAAIrT,KAAK6Q,QAAQgB,eACb,OAAO,CAGX,KAAK7R,KAAK6Q,QAAQC,YACd,OAAO,CAGX,IAAIwC,IAAM,GAAIrP,OAAO0N,UACjB4B,EAAQD,EAAMtT,KAAK6Q,QAAQa,cAC/B,IAAI1R,KAAK6Q,QAAQa,gBAAkB6B,EAAQvT,KAAKgS,OAAOwB,oBACnD,MAAOxT,MAAK6Q,QAAQe,cAGxB5R,MAAK6Q,QAAQa,gBAAiB,GAAIzN,OAAO0N,SAGzC,IAAIrJ,GACAmL,EACAC,CACJ,KAAKpL,IAAStI,MAAKgS,OAAOtK,OACtB,GAAI1H,KAAKgS,OAAOtK,OAAOsB,eAAeV,KAClCoL,EAAc1T,KAAK6Q,QAAQC,YAAYxI,GACvCmL,EAAYzT,KAAKsI,GAEboL,IAAgBD,GAGhB,MAFA1R,GAAKqB,MAAM,mBAAoBpD,KAAKA,KAAKgS,OAAOlO,sBAAsB,EAAMyP,GAC5EvT,KAAK6Q,QAAQe,gBAAiB,GACvB,CAOnB,OAFA7P,GAAKqB,MAAM,mBAAoBpD,KAAKA,KAAKgS,OAAOlO,sBAAsB,EAAOyP,GAC7EvT,KAAK6Q,QAAQe,gBAAiB,GACvB,GAUXR,EAAOb,UAAUqC,OAAS,WACtB,IAAK5S,KAAK6Q,QAAQC,YAEd,MADA9Q,MAAK+R,gBAIT,IAAI4B,GACAC,IAEJ,KAAKD,IAAQ3T,MAAK6Q,QAAQC,YAClB9Q,KAAK6Q,QAAQC,YAAY9H,eAAe2K,IAAS3T,KAAK2T,KAAU3T,KAAK6Q,QAAQC,YAAY6C,KACzFC,EAAkB5O,MACd6G,KAAM8H,EACNE,OAAQ7T,KAAK2T,GACbG,MAAO9T,KAAK6Q,QAAQC,YAAY6C,KAEpC3T,KAAK2T,GAAQ3T,KAAK6Q,QAAQC,YAAY6C,GAQ9C,OAJA3T,MAAK6Q,QAAQe,gBAAiB,EAC9B5R,KAAK6Q,QAAQa,gBAAiB,GAAIzN,OAAO0N,UAEzC5P,EAAKqB,MAAM,iBAAkBpD,KAAKA,KAAKgS,OAAOlO,qBAAsB8P,GAC7DA,GAGJxC,KC3Sf7R,QAAQC,OAAO,UAAUC,QAAQ,sBAC7B,YACA,UAEA,SAAUsU,EAAW9R,GAKjB,GAAI+R,IACA7E,MACIC,UAAW,cAUf6E,EAAY,SAAUnJ,GACtB,MAA6BnI,UAAtBqR,EAAQ7E,KAAKrE,IASpBoJ,EAAiB,SAAUpJ,EAAKqJ,GAIhC,MAHIA,KACArJ,GAAO,IAAMqJ,GAEVrJ,EA2FX,OApFAkJ,GAAQI,YAAc,SAAUtJ,GACvBmJ,EAAUnJ,KACXkJ,EAAQ7E,KAAKrE,GAAOA,IAW5BkJ,EAAQ1E,IAAM,SAAUxE,EAAKN,EAAO6J,GAChC,GAAIJ,EAAUnJ,GAEV,GADAA,EAAMoJ,EAAepJ,EAAKuJ,GACtBL,EAAQM,uBACRrS,EAAQiM,aAAaqG,QAAQzJ,EAAKN,OAC/B,CACH,GAAIgK,GAAO,MACPC,EAAIC,mBAAmBlK,EAC3BuJ,GAAUY,OAAS7J,EAAM,IAAM2J,EAAI,aAAeD,EAAO,MAYrER,EAAQ3J,IAAM,SAAUS,EAAKuJ,GACzB,GAAI7J,GAAQ,EAEZ,IAAIyJ,EAAUnJ,GAEV,GADAA,EAAMoJ,EAAepJ,EAAKuJ,GACtBL,EAAQM,uBACR9J,EAAQvI,EAAQiM,aAAa0G,QAAQ9J,IAAQ,OAC1C,CACH,GAAI+J,GAAS,GAAIC,QAAOhK,EAAM,WAAY,KACtCiK,EAAIF,EAAOG,KAAKjB,EAAUY,OAE1BI,KACAvK,EAAQyK,mBAAmBF,EAAE,KAKzC,MAAOvK,IASXwJ,EAAQzO,OAAS,SAAUuF,EAAKuJ,GACxBJ,EAAUnJ,KACVA,EAAMoJ,EAAepJ,EAAKuJ,GACtBL,EAAQM,uBACRrS,EAAQiM,aAAagH,WAAWpK,GAEhCiJ,EAAUY,OAAS7J,EAAM,kBAWrCkJ,EAAQM,qBAAuB,WAC3B,IACI,MAAO,gBAAkBrS,IAAoC,OAAzBA,EAAQiM,aAC9C,MAAO7K,GACL,OAAO,IAIR2Q,KC9HfzU,QAAQC,OAAO,UAAUC,QAAQ,eAC7B,OACA,KACA,oBACA,eACA,mBAEA,SAAUsC,EACAC,EACAgO,EACAoB,EACA+D,GAGN,GAAIC,GAAiB,SAAU/R,GAC3B,MAAOrB,GAAGsB,OAAOD,IAYjBuN,EAAQ,SAAUyE,GAClBrV,KAAK6D,UAAYwR,EAAgBxJ,KACjC7L,KAAK6I,eAAiBwM,EAAgBxM,gBAAkBwM,EAAgBxJ;AAGxE2F,OAAOC,eAAezR,KAAM,mBAAoBwK,MAAO6K,EAAiBC,UAAU,GAGlF,IAAI3E,GAAO3Q,IACXwR,QAAOC,eAAezR,KAAM,UAAWsV,UAAU,EAAOC,cAAc,EAAO/K,MAAO,SAAUsC,EAAKwE,GAC/F,MAAM,IAAMF,GAAOtE,EAAK6D,EAAMW,KAAc,MAGhDtR,KAAK0H,UACL1H,KAAKkS,gBAELlS,KAAKwT,oBAAsB,GAE3BxT,KAAK8D,oBAAsB,KAC3B9D,KAAKgE,sBAAwB,KAC7BhE,KAAK2F,iBAAmB,KACxB3F,KAAKsC,QAAU,KA4VnB,OAzVAsO,GAAML,UAAUiF,yBAA2B,SAAUxR,GACjDhE,KAAKgE,sBAAwBA,GAGjC4M,EAAML,UAAUkF,oBAAsB,SAAU9P,GAC5C3F,KAAK2F,iBAAmBA,GAG5BiL,EAAML,UAAUmF,WAAa,SAAUpT,GACnCtC,KAAKsC,QAAUA,GAGnBsO,EAAML,UAAUoF,uBAAyB,SAAUnC,GAC/CxT,KAAKwT,oBAAsBA,GAI/B5C,EAAML,UAAUqF,sBAAwB,WACpC,GACItN,GACA2D,EACA4J,EACAC,EAJAC,EAAwB/V,KAAKqV,gBAAgB3N,MAKjD,KAAKY,IAASyN,GACV,GAAIA,EAAsB/M,eAAeV,GAAQ,CAO7C,GANA2D,EAAa,GAAIkJ,GAAW7M,EAAOyN,EAAsBzN,IAErD2D,EAAWH,aACX9L,KAAK8D,oBAAsBwE,GAG3B2D,EAAWiE,QACX,OAAO,CAEPlQ,MAAK0H,OAAOY,GAAS2D,EAGrB3D,IAAUtI,KAAKgE,wBACf6R,EAAoB5J,GAGpB3D,IAAUtI,KAAK2F,mBACfmQ,EAAexN,GAI3B,MAAIuN,IAAgD,SAA3BA,EAAkB/O,MACvC/E,EAAKe,MAAM,uDACJ,IAEP9C,KAAKgE,wBAA0B6R,IAC/B7V,KAAK0H,OAAO1H,KAAKgE,uBAAyB,GAAImR,GAAWnV,KAAKgE,uBAC1D8C,KAAM,OACNoC,OAAO,EACP8M,gBAAiB,WACb,OAAO,GAAI/R,OAAOC,kBAI1B4R,GAAsC,YAAtBA,EAAahP,MAC7B/E,EAAKe,MAAM,yDACJ,IAEP9C,KAAK2F,mBAAqBmQ,IAC1B9V,KAAK0H,OAAO1H,KAAK2F,kBAAoB,GAAIwP,GAAWnV,KAAK2F,kBACrDmB,KAAM,UACNoC,OAAO,EACP8M,gBAAiB,WACb,OAAO,OAIZ,KAKXpF,EAAML,UAAU0F,uBAAyB,WACrC,GAAIC,GAA8BlW,KAAKqV,gBAAgBnD,YACvD,IAAKgE,EAAL,CAGA,GAAIrR,GACAkB,CACJ,KAAKlB,EAAI,EAAGA,EAAIqR,EAA4BnR,OAAQF,IAChDkB,EAAc,GAAIiK,GAAYkG,EAA4BrR,IAEtDkB,IAAgBA,EAAYmK,UACH,WAArBnK,EAAYe,OACP9G,KAAK0H,OAAO3B,EAAYE,UAOzBjG,KAAK0H,OAAO3B,EAAYE,UAAUiD,MAAQnD,EAAYE,SALtDjG,KAAK0H,OAAO3B,EAAYE,UAAY,GAAIkP,GAAWpP,EAAYE,UAC3Da,KAAM9G,KAAK0H,OAAO1H,KAAK8D,qBAAqBgD,KAC5CoC,MAAOnD,EAAYE,YAO/BjG,KAAKkS,aAAalN,KAAKe,MAYnC6K,EAAML,UAAU3J,sBAAwB,SAAUR,GAC9C,GAAIvB,EACJ,KAAKA,EAAI,EAAGA,EAAI7E,KAAKkS,aAAanN,OAAQF,IACtC,GAAI7E,KAAKkS,aAAarN,GAAGuB,QAAUA,EAC/B,MAAOpG,MAAKkS,aAAarN,EAGjC,OAAO,OAUX+L,EAAML,UAAUgB,oBAAsB,SAAUb,EAAQyF,GACpD5W,QAAQkL,OAAOiG,EAAQ1Q,KAAK+D,kBAAkBoS,KAYlDvF,EAAML,UAAUxM,kBAAoB,SAAUqS,EAAaC,GACvD,GACI/N,GADA+I,IAEJ,KAAK/I,IAAStI,MAAK0H,OACX1H,KAAK0H,OAAOsB,eAAeV,KAC3B+I,EAAO/I,GAAS8N,EAAY9N,GAGpC,IAAIzD,GACAuB,EACAkK,EACA2B,EACA7K,CACJ,KAAKvC,EAAI,EAAGA,EAAI7E,KAAKkS,aAAanN,OAAQF,IAItC,GAHAuB,EAAQpG,KAAKkS,aAAarN,GAAGuB,MAC7B6L,EAAejS,KAAKkS,aAAarN,GAAGgC,WAEF,WAA9B7G,KAAKkS,aAAarN,GAAGiC,KACMnE,SAAvByT,EAAYhQ,KACZkK,EAAa8F,EAAYhQ,GAAO6L,EAAanO,qBAC7CuN,EAAOrR,KAAKkS,aAAarN,GAAGoB,UAAYqK,EAEpC+F,KAAgC,IAChChF,EAAOjL,GAAS6L,EAAalO,kBAAkBqS,EAAYhQ,UAGhE,IAAkC,YAA9BpG,KAAKkS,aAAarN,GAAGiC,MAAsBuP,KAAgC,GACvD1T,SAAvByT,EAAYhQ,IAAwBgQ,EAAYhQ,YAAkBuI,OAElE,IADA0C,EAAOjL,MACFgB,EAAI,EAAGA,EAAIgP,EAAYhQ,GAAOrB,OAAQqC,IACvCiK,EAAOjL,GAAOpB,KAAKiN,EAAalO,kBAAkBqS,EAAYhQ,GAAOgB,IAKrF,OAAOiK,IAQXT,EAAML,UAAU+F,mBAAqB,SAAU5F,GAC3C,GAAIpI,EACJ,KAAKA,IAAStI,MAAK0H,OACX1H,KAAK0H,OAAOsB,eAAeV,IACuB,kBAAvCtI,MAAK0H,OAAOY,GAAO0N,iBAAoDrT,SAAlB+N,EAAOpI,KACnEoI,EAAOpI,GAAStI,KAAK0H,OAAOY,GAAO0N,gBAAgBtF,KAcnEE,EAAML,UAAU2C,gBAAkB,SAAUqD,GACxC,GAAI1R,GACAuB,EACA6L,EACA7K,CACJ,KAAKvC,EAAI,EAAGA,EAAI7E,KAAKkS,aAAanN,OAAQF,IAItC,GAHAuB,EAAQpG,KAAKkS,aAAarN,GAAGuB,MAC7B6L,EAAejS,KAAKkS,aAAarN,GAAGgC,WAEF,WAA9B7G,KAAKkS,aAAarN,GAAGiC,KACOnE,SAAxB4T,EAAanQ,KACbmQ,EAAanQ,GAAS6L,EAAaiB,gBAAgBqD,EAAanQ,SAEjE,IAAkC,YAA9BpG,KAAKkS,aAAarN,GAAGiC,MACAnE,SAAxB4T,EAAanQ,IAAwBmQ,EAAanQ,YAAkBuI,OACpE,IAAKvH,EAAI,EAAGA,EAAImP,EAAanQ,GAAOrB,OAAQqC,IACxCmP,EAAanQ,GAAOgB,GAAK6K,EAAaiB,gBAAgBqD,EAAanQ,GAAOgB,GAU1F,OAJAmP,GAAevW,KAAK+D,kBAAkBwS,GACc,kBAAzCvW,MAAKqV,gBAAgBnC,kBAC5BqD,EAAevW,KAAKqV,gBAAgBnC,gBAAgBqD,IAEjDA,GAWX3F,EAAML,UAAUuC,QAAU,SAAUpC,GAEhC,MADAA,GAAS1Q,KAAK+D,kBAAkB2M,GACY,kBAAjC1Q,MAAKqV,gBAAgBvC,QACrB9S,KAAKqV,gBAAgBvC,QAAQpC,GAEjCA,GAWXE,EAAML,UAAU4C,UAAY,SAAUqD,GAElC,MADAxW,MAAKsW,mBAAmBE,GACsB,kBAAnCxW,MAAKqV,gBAAgBlC,UACrBnT,KAAKqV,gBAAgBlC,UAAUqD,GAEnCA,GAUX5F,EAAML,UAAU0C,UAAY,SAAUuD,GAClC,MAA8C,kBAAnCxW,MAAKqV,gBAAgBpC,UACrBjT,KAAKqV,gBAAgBpC,UAAUuD,GAEnCA,GAYX5F,EAAML,UAAUnM,QAAU,SAAUC,EAAIC,GACpC,GAAIqM,GAAO3Q,IACX,OAAKqE,GAKErE,KAAKsC,QAAQ8B,QAAQpE,KAAMqE,EAAIC,GAAcnB,KAAK,SAAUQ,GAC/D,GAAIQ,GAASwM,EAAKuC,gBAAgBvP,EAAShE,MACvC+Q,EAAS,GAAIU,GAAOjN,EAAQwM,GAAM,EAEtC,OADA5O,GAAKqB,MAAM,iBAAkBsN,EAAQ/M,EAAUW,GACxCoM,GACR0E,IATCrT,EAAKe,MAAM,iBAAkB,oCACtBd,EAAGsB,OAAO,uCAmBzBsN,EAAML,UAAU9L,KAAO,SAAUH,GAC7B,GAAIqM,GAAO3Q,IACX,OAAOA,MAAKsC,QAAQmC,KAAKzE,KAAMsE,GAAcnB,KAAK,SAAUQ,GACxD,GACIkB,GADAD,IAEJ,KAAKC,EAAI,EAAGA,EAAIlB,EAAShE,KAAKoF,OAAQF,IAClCD,EAAQI,KAAK,GAAIoM,GAAOT,EAAKuC,gBAAgBvP,EAAShE,KAAKkF,IAAK8L,GAAM,GAG1E,IAAI8F,IACA7R,QAASA,EACTQ,WAAYzB,EAAS/D,MAGzB,OADAmC,GAAKqB,MAAM,cAAeqT,EAAgB9S,EAAUW,GAC7CmS,GACRrB,IAWPxE,EAAML,UAAUhL,OAAS,SAAUlB,EAAIC,GACnC,MAAKD,GAIErE,KAAKsC,QAAQiD,OAAOvF,KAAMqE,EAAIC,IAHjCvC,EAAKe,MAAM,gBAAiB,oCACrBd,EAAGsB,OAAO,uCAKlBsN,KC5YfrR,QAAQC,OAAO,UAAUC,QAAQ,oBAC7B,OAEA,SAAUsC,GAQN,GAAIoT,GAAa,SAAUtJ,EAAMoE,GAC7BjQ,KAAKkQ,SAAU,EACflQ,KAAK6L,KAAOA,EAEZ7L,KAAK8L,YAAa,EAClB9L,KAAKiJ,QAAS,EACdjJ,KAAKkJ,OAAQ,EACblJ,KAAK+L,SAAU,EAEW,gBAAfkE,GACPjQ,KAAK8G,KAAOmJ,EAAWyG,cAChBzG,EAAWnE,cAAe,EACjC6K,EAAa3W,KAAMiQ,GAEnB2G,EAAe5W,KAAMiQ,GAGpBjQ,KAAK6W,iBACN9U,EAAKe,MAAM,8CAA+C9C,KAAMiQ,GAIxEkF,GAAW5E,UAAUsG,cAAgB,WACjC,MAAK7W,MAAK6L,MAAS7L,KAAK8G,KAIU,OAA9B9G,KAAK6L,KAAKiL,MAAM,WAChB9W,KAAKkQ,SAAU,GACR,IAEXlQ,KAAKkQ,SAAU,GACR,IARHlQ,KAAKkQ,SAAU,GACR,GAUf,IAAIyG,GAAe,SAAUrO,EAAO2H,GAKhC3H,EAAMwD,YAAa,EACnBxD,EAAMxB,KAAOmJ,EAAWnJ,KAAOmJ,EAAWnJ,KAAK4P,cAAgB,KAC/DpO,EAAMyD,SAAU,EAChBzD,EAAMW,QAAS,EACfX,EAAMY,OAAQ,EAE4B,kBAA/B+G,GAAW+F,iBAClBjU,EAAK4Q,KAAK,8DAEqB,kBAAxB1C,GAAWwC,UAClB1Q,EAAK4Q,KAAK,wDAIdiE,EAAiB,SAAUtO,EAAO2H,GAClC3H,EAAMxB,KAAOmJ,EAAWnJ,KAAOmJ,EAAWnJ,KAAK4P,cAAgB,KAC/DpO,EAAMW,OAASgH,EAAWhH,UAAW,EACrCX,EAAMY,MAAqC,gBAArB+G,GAAW/G,MAAsB+G,EAAW/G,MAAS+G,EAAW/G,SAAU,EAAQZ,EAAMuD,MAAO,EACrHvD,EAAMyD,QAAUkE,EAAWlE,WAAY,EAEG,kBAA/BkE,GAAW+F,kBAClB1N,EAAM0N,gBAAkB/F,EAAW+F,iBAEJ,kBAAxB/F,GAAWwC,WAClBnK,EAAMmK,SAAWxC,EAAWwC,UAIpC,OAAO0C,MC9EVlR,KAAKsM,UAAUrM,cACf,WAEG,QAAS6S,GAAIC,GACT,MAAa,IAATA,EACO,IAAMA,EAEVA,EAGX/S,KAAKsM,UAAUrM,YAAc,WACzB,MAAOlE,MAAKiX,iBACR,IAAMF,EAAI/W,KAAKkX,cAAgB,GAC/B,IAAMH,EAAI/W,KAAKmX,cACf,IAAMJ,EAAI/W,KAAKoX,eACf,IAAML,EAAI/W,KAAKqX,iBACf,IAAMN,EAAI/W,KAAKsX,iBACf,KAAOtX,KAAKuX,qBAAuB,KAAMC,QAAQ,GAAGpP,MAAM,EAAG,GAC7D,QCnBhB7I,QAAQC,OAAO,UAAUC,QAAQ,mBAC7B,WAuBI,QAAS0O,GAAU5G,EAAUkQ,GAGzB,MAFAzX,MAAKuH,SAAWA,EAChBvH,KAAKyX,OAASA,EACPzX,KAWXmO,EAAUhI,KAAO,SAAUuR,EAAYC,GACnC,MAAID,aAAsB/I,QAAS+I,EAAW3S,OAAS,GAC5C,GAAIoJ,IAAYhI,KAAKuR,EAAYC,GAErC,MAUXxJ,EAAUoC,UAAUqH,YAAc,SAAUrQ,GAExC,MADAvH,MAAKuH,SAAWA,EACTvH,MAUXmO,EAAUoC,UAAUQ,OAAS,SAAUvG,GAInC,MAHAxK,MAAKyX,OAAS,WACV,MAAOzX,MAAKuH,SAAW,OAASsQ,EAAYrN,IAEzCxK,MAUXmO,EAAUoC,UAAUuH,WAAa,SAAUtN,GAIvC,MAHAxK,MAAKyX,OAAS,WACV,MAAOzX,MAAKuH,SAAW,OAAUsQ,EAAYrN,IAE1CxK,MAUXmO,EAAUoC,UAAUwH,YAAc,SAAUvN,GAIxC,MAHAxK,MAAKyX,OAAS,WACV,MAAOzX,MAAKuH,SAAW,OAAUsQ,EAAYrN,IAE1CxK,MAUXmO,EAAUoC,UAAUT,qBAAuB,SAAUtF,GAIjD,MAHAxK,MAAKyX,OAAS,WACV,MAAOzX,MAAKuH,SAAW,OAAUsQ,EAAYrN,IAE1CxK,MAUXmO,EAAUoC,UAAUyH,SAAW,SAAUxN,GAIrC,MAHAxK,MAAKyX,OAAS,WACV,MAAOzX,MAAKuH,SAAW,OAAUsQ,EAAYrN,IAE1CxK,MAUXmO,EAAUoC,UAAU0H,kBAAoB,SAAUzN,GAI9C,MAHAxK,MAAKyX,OAAS,WACV,MAAOzX,MAAKuH,SAAW,OAAUsQ,EAAYrN,IAE1CxK,MAUXmO,EAAUoC,UAAU3H,SAAW,SAAU4B,GAIrC,MAHAxK,MAAKyX,OAAS,WACV,MAAO,eAAkBI,EAAYrN,GAAS,KAAOxK,KAAKuH,SAAW,KAElEvH,MAUXmO,EAAUoC,UAAU2H,WAAa,SAAU1N,GAIvC,MAHAxK,MAAKyX,OAAS,WACV,MAAO,cAAgBzX,KAAKuH,SAAW,KAAQsQ,EAAYrN,GAAS,KAEjExK,MAUXmO,EAAUoC,UAAU4H,SAAW,SAAU3N,GAIrC,MAHAxK,MAAKyX,OAAS,WACV,MAAO,YAAczX,KAAKuH,SAAW,KAAQsQ,EAAYrN,GAAS,KAE/DxK,MAWXmO,EAAUoC,UAAUpK,KAAO,SAAUuR,EAAYC,GAC7C,GAAIS,EAEApY,MAAKuH,UAAmC,kBAAhBvH,MAAKyX,SAC7BW,EAAmB,GAAIjK,GAAUnO,KAAKuH,SAAUvH,KAAKyX,QAGzD,IAAIY,KACJ,IAAIX,YAAsBvJ,GACtBkK,EAAcrT,KAAK0S,OAChB,IAAIA,YAAsB/I,QAAS+I,EAAW3S,OAAS,EAAG,CAC7D,GAAIF,EACJ,KAAKA,EAAI,EAAGA,EAAI6S,EAAW3S,OAAQF,IAC3B6S,EAAW7S,IACXwT,EAAcrT,KAAK0S,EAAW7S,IAkB1C,MAbIwT,GAActT,OAAS,UAChB/E,MAAKyX,aACLzX,MAAKuH,SAEZvH,KAAKsY,iBAAoBtY,KAAqB,iBAAIA,KAAKsY,iBAAiBC,OAAOF,GAAiBA,GAC5FV,IAAkB3X,KAAK2X,iBACvB3X,KAAK2X,cAAmC,OAAlBA,EAA0B,KAAO,OAEvDS,GACApY,KAAKsY,iBAAiBE,QAAQJ,IAI/BpY,MAUXmO,EAAUoC,UAAUkI,IAAM,SAAUf,GAChC,MAAO1X,MAAKmG,KAAKuR,EAAY,QAUjCvJ,EAAUoC,UAAUmI,GAAK,SAAUhB,GAC/B,MAAO1X,MAAKmG,KAAKuR,EAAY,OAWjCvJ,EAAUoC,UAAUpJ,KAAO,SAAUkK,EAAQsH,GACzC,MAAOC,GAAc5Y,KAAMqR,EAAQsH,IAUvCxK,EAAUoC,UAAUsI,eAAiB,SAAUC,GAC3CA,EAAUA,KAAW,CACrB,IAAIC,GAAY,EAEhB,IAAI/Y,KAAKuH,UAAmC,kBAAhBvH,MAAKyX,OAC7B,MAAOzX,MAAKyX,QAGhB,IAAIzX,KAAKsY,kBAAoBtY,KAAKsY,iBAAiBvT,OAAS,EAAG,CAC3D,GAAIF,GACAqC,EACA8R,CACJ,KAAKnU,EAAI,EAAGA,EAAI7E,KAAKsY,iBAAiBvT,OAAQF,IAC1CqC,EAAYlH,KAAKsY,iBAAiBzT,GAClCmU,EAAkB9R,EAAU2R,gBAAe,GAC3CE,GAAclU,EAAI,EAAK,IAAM7E,KAAK2X,cAAgB,IAAMqB,EAAkBA,EAIlF,MAAOF,GAAS,IAAMC,EAAY,IAAMA,GAU5C5K,EAAU8K,WAAa,SAAUD,GAC7B,GAA+B,gBAApBA,GACP,MAAO,KAIX,IAAIE,GAAmB,GAAIpE,QAAO,uHAAwH,KACtJqE,EAAUH,EAAgBlC,MAAMoC,EAEpC,KAAKC,EACD,MAAO,KAIX,IAAItU,EACJ,KAAKA,EAAI,EAAGA,EAAIsU,EAAQpU,OAAQF,IAE5B,GADAsU,EAAQtU,GAAKuU,EAAwBD,EAAQtU,IAC1B,OAAfsU,EAAQtU,GACR,MAAO,KAIf,OAAuB,KAAnBsU,EAAQpU,OACD,MAIXF,EAAI,EACJmU,EAAkBA,EAAgBK,QAAQH,EAAkB,WACxD,MAAOrU,OAGY,IAAnBsU,EAAQpU,OACgD,KAApDiU,EAAgBK,QAAQ,mBAAoB,IACrC,KAEJF,EAAQ,GAGZG,EAAsBN,EAAiBG,IAUlD,IAAIG,GAAwB,SAAUC,EAAcJ,GAUhD,IATA,GAAIK,GACAC,EACAC,EACAC,EAEAC,EACAC,EAFAC,EAAiB,KAGjBC,GAAgB,EAEbA,GAAe,CAYlB,GAXAP,EAAwBD,EAAajT,QAAQ,KACf,KAA1BkT,GACAC,EAAuBF,EAAaS,YAAY,IAAKR,GACrDE,EAAcH,EAAa3X,UAAU6X,EAAuB,EAAGD,GAC/DD,EAAeA,EAAa3X,UAAU,EAAG6X,GAAwBN,EAAQpU,OAASwU,EAAa3X,UAAU4X,EAAwB,KAEjIE,EAAcH,EACdQ,GAAgB,GAIgC,KAAhDL,EAAYL,QAAQ,mBAAoB,IACxC,MAAO,KAIX,IAAIK,EAAYpT,QAAQ,QAAU,GAAKoT,EAAYpT,QAAQ,OAAS,EAChE,MAAO,KAGXqT,GAAgBD,EAAY5C,MAAM,WAClC8C,IACA,IAAI/U,EACJ,KAAKA,EAAI,EAAGA,EAAI8U,EAAc5U,OAAQF,IAClC+U,EAAa5U,KAAKmU,EAAQc,OAAON,EAAc9U,KAEnDgV,GAAWH,EAAYpT,QAAQ,OAAS,EAAI,KAAO,MACnDwT,GAAiB,GAAI3L,IAAYhI,KAAKyT,EAAcC,GACpDV,EAAQnU,KAAK8U,GAGjB,MAAOA,IAUPjC,EAAc,SAAUrN,GAIxB,MAHIA,aAAiBvG,QACjBuG,EAAQA,EAAMtG,eAEO,gBAAVsG,GAAsB,IAAMA,EAAQ,IAAMA,EAAM7I,YAU/DuY,EAAqB,SAAU1P,GAC/B,GAAqB,gBAAVA,GAAoB,CAC3B,GAAIA,EAAMlE,QAAQ,MAAQ,EACtB,MAAOkE,GAAM6O,QAAQ,MAAO,GAEhC,IAA4B,SAAxB7O,EAAMzC,cACN,OAAO,CAEX,IAA4B,UAAxByC,EAAMzC,cACN,OAAO,EAGf,MAAKwK,OAAM/H,GAGJA,EAFIyP,OAAOzP,IAWlB2P,EAAqB,SAAUjT,EAAWmK,GAC1C,GAAIlN,GACAU,CACJ,KAAKA,EAAI,EAAGA,EAAIqC,EAAUoR,iBAAiBvT,OAAQF,IAAK,CAIpD,GAHAV,EAASyU,EAAc1R,EAAUoR,iBAAiBzT,GAAIwM,GAGtB,QAA5BnK,EAAUyQ,eAA2BxT,KAAW,EAChD,OAAO,CAIX,IAAgC,OAA5B+C,EAAUyQ,eAA0BxT,KAAW,EAC/C,OAAO,EAKf,MAAmC,QAA5B+C,EAAUyQ,eAUjBiB,EAAgB,SAAU1R,EAAWmK,EAAQsH,GAC7C,GAAIzR,EAAUoR,kBAAoBpR,EAAUoR,iBAAiBvT,OAAS,EAClE,MAAOoV,GAAmBjT,EAAWmK,EAEzC,IAAInK,EAAUK,SAAU,CACpB,GAEI1C,GAFAuV,EAAelT,EAAUK,SAASb,MAAM,KACxC2T,EAAchJ,CAElB,KAAKxM,EAAI,EAAGA,EAAIuV,EAAarV,OAAQF,IAAK,CACtC,IAAIwV,EAAYrR,eAAeoR,EAAavV,KAAwClC,SAAjC0X,EAAYD,EAAavV,IAGxE,MAAQ8T,MAA6B,CAFrC0B,GAAcA,EAAYD,EAAavV,IAM/C,GAAIyV,GAAYpT,EAAU2R,gBAC1B,OAAIyB,GAAUhU,QAAQ,MAAQ,EACnBiU,EAAqBD,EAAWD,GAEpCG,EAAoBF,EAAWD,GAG1C,OAAO,GASPE,EAAuB,SAAUD,EAAWD,GAC5C,GAAI7P,GACAqP,EAAWS,EAAUG,OAAO,EAAGH,EAAUhU,QAAQ,MACjDoU,EAAQJ,EAAUhU,QAAQ,KAAO,EACjCqU,EAAML,EAAUhU,QAAQ,KAAOoU,EAC/BE,EAAkBN,EAAUG,OAAOC,EAAOC,EAG9C,QAFAC,EAAkBA,EAAgBvB,QAAQ,MAAO,IAAI3S,MAAM,MAEnDmT,GACJ,IAAK,aAED,MADArP,GAAQoQ,EAAgB,GAAG7S,cACY,IAA/BsS,EAAY/T,QAAQkE,EAChC,KAAK,WAED,MADAA,GAAQoQ,EAAgB,GAAG7S,cACnBsS,EAAY/T,QAAQkE,KAAW6P,EAAYtV,OAAS,EAAIyF,EAAMzF,MAC1E,KAAK,cAED,MADAyF,GAAQoQ,EAAgB,GAAG7S,cACnBsS,EAAY/T,QAAQkE,IAAU,EAG9C,OAAO,GASPgQ,EAAsB,SAAUF,EAAWD,GAC3C,GAAIO,GAAkBN,EAAU5T,MAAM,KAClCmT,EAAWe,EAAgB,GAE3BpQ,EAAQoQ,EAAgBxS,MAAM,GAAGjC,KAAK,IAa1C,QAZAqE,EAAQ0P,EAAmB1P,GAGvB6P,YAAuBpW,QAASsO,MAAMtO,KAAKuO,MAAMhI,KACjDA,EAAQvG,KAAKuO,MAAMhI,GACnB6P,EAAcA,EAAY1I,WACI,gBAAhB0I,IAA6B9H,MAAMtO,KAAKuO,MAAM6H,MAC5DA,EAAcpW,KAAKuO,MAAM6H,GACzB7P,EAAQvG,KAAKuO,MAAMhI,IAIfqP,GACJ,IAAK,KACD,MAAqBrP,GAAd6P,CACX,KAAK,KACD,MAAOA,GAAc7P,CACzB,KAAK,KACD,MAAsBA,IAAf6P,CACX,KAAK,KACD,MAAOA,IAAe7P,CAC1B,KAAK,KACD,MAAO6P,IAAe7P,CAC1B,KAAK,KACD,MAAO6P,IAAe7P,EAI9B,OAAO,GAQPqQ,EAAiC,SAAUP,GAC3C,GAAIpT,GACAsD,EACAsQ,EAAWR,EAAUhU,QAAQ,KAC7BuT,EAAWS,EAAU1Y,UAAU,EAAGkZ,GAClCF,EAAkBN,EAAU1Y,UAAUkZ,EAAW,EAAGR,EAAUhU,QAAQ,MAAMI,MAAM,KAEtF,QAAQmT,GACJ,IAAK,aACDrP,EAAQ0P,EAAmBU,EAAgB,IAC3C1T,EAAY,GAAIiH,GAAUyM,EAAgB,IAAI1C,WAAW1N,EACzD,MACJ,KAAK,WACDA,EAAQ0P,EAAmBU,EAAgB,IAC3C1T,EAAY,GAAIiH,GAAUyM,EAAgB,IAAIzC,SAAS3N,EACvD,MACJ,KAAK,cACDA,EAAQ0P,EAAmBU,EAAgB,IAC3C1T,EAAY,GAAIiH,GAAUyM,EAAgB,IAAIhS,SAAS4B,GAI/D,MAAOtD,IAQP6T,EAAgC,SAAUT,GAC1C,GAAIM,GAAkBN,EAAU5T,MAAM,KAClCmT,EAAWe,EAAgB,GAC3BpQ,EAAQ0P,EAAmBU,EAAgBxS,MAAM,GAAGjC,KAAK,MAEzDe,EAAY,GAAIiH,GAAUyM,EAAgB,GAE9C,QAAQf,GACJ,IAAK,KACD3S,EAAU6J,OAAOvG,EACjB,MACJ,KAAK,KACDtD,EAAU4Q,WAAWtN,EACrB,MACJ,KAAK,KACDtD,EAAU6Q,YAAYvN,EACtB,MACJ,KAAK,KACDtD,EAAU4I,qBAAqBtF,EAC/B,MACJ,KAAK,KACDtD,EAAU8Q,SAASxN,EACnB,MACJ,KAAK,KACDtD,EAAU+Q,kBAAkBzN,GAGpC,MAAOtD,IASPkS,EAA0B,SAAUkB,GACpC,MAAIA,GAAUhU,QAAQ,MAAQ,EACnBuU,EAA+BP,GAEnCS,EAA8BT,GAGzC,OAAOnM,MC9nBf5O,QAAQC,OAAO,UAAUC,QAAQ,8BAC7B,kBAEA,SAAU0O,GAmBN,QAASC,KAOLpO,KAAKgb,WAGT,GAAIC,GAAc,SAAU5J,GACxB,MAAOA,IAA4B,gBAAXA,IAAwD,kBAA1BA,GAAOwH,eAqQjE,OA3PAzK,GAAqBmC,UAAU7B,aAAe,SAAUA,GACpD,MAAyB,KAArBwM,UAAUnW,OACH/E,KAAKgb,QAAQtM,cAAgB,KAEnB,OAAjBA,SACO1O,MAAKgb,QAAQtM,aACb1O,OAEXA,KAAKgb,QAAQtM,aAAeA,KAAiB,EACtC1O,OAWXoO,EAAqBmC,UAAUtI,KAAO,SAAUD,GAC5C,MAAyB,KAArBkT,UAAUnW,OACH/E,KAAKgb,QAAQ/S,MAAQ,MAEb,gBAARD,IAAoBA,GAAO,IAClChI,KAAKgb,QAAQ/S,KAAOD,GAEZ,OAARA,SACOhI,MAAKgb,QAAQ/S,KAEjBjI,OAWXoO,EAAqBmC,UAAUpI,MAAQ,SAAUD,GAC7C,MAAyB,KAArBgT,UAAUnW,OACH/E,KAAKgb,QAAQ7S,OAAS,MAEb,gBAATD,IAAqBA,GAAQ,IACpClI,KAAKgb,QAAQ7S,MAAQD,GAEZ,OAATA,SACOlI,MAAKgb,QAAQ7S,MAEjBnI,OAWXoO,EAAqBmC,UAAUjJ,SAAW,SAAUD,GAChD,MAAyB,KAArB6T,UAAUnW,OACH/E,KAAKgb,QAAQG,UAAY,MAEhC9T,GAA8B,gBAAZA,KAClBrH,KAAKgb,QAAQG,SAAW9T,GAEZ,OAAZA,SACOrH,MAAKgb,QAAQG,SAEjBnb,OAWXoO,EAAqBmC,UAAUxJ,QAAU,SAAUuJ,GAC/C,MAAyB,KAArB4K,UAAUnW,OACH/E,KAAKgb,QAAQjU,SAAW,MAET,gBAAfuJ,GACPtQ,KAAKgb,QAAQjU,QAAUuJ,EAChBA,YAAsB3B,SAC7B3O,KAAKgb,QAAQjU,QAAUuJ,EAAWnK,KAAK,MAExB,OAAfmK,SACOtQ,MAAKgb,QAAQjU,QAEjB/G,OAWXoO,EAAqBmC,UAAU6K,QAAU,SAAU7T,GAC/C,MAAyB,KAArB2T,UAAUnW,OACH/E,KAAKgb,QAAQI,SAAW,MAEX,gBAAb7T,GACPvH,KAAKgb,QAAQI,QAAU7T,EAChBA,YAAoBoH,SAC3B3O,KAAKgb,QAAQI,QAAU7T,EAASpB,KAAK,MAExB,OAAboB,SACOvH,MAAKgb,QAAQI,QAEjBpb,OAWXoO,EAAqBmC,UAAU8K,aAAe,SAAUC,GACpD,MAAyB,KAArBJ,UAAUnW,OACH/E,KAAKgb,QAAQO,cAAgB,MAEpCD,KAAW,GAAoB,OAAXA,EACpBtb,KAAKgb,QAAQO,aAAe,iBAErBvb,MAAKgb,QAAQO,aAEjBvb,OAWXoO,EAAqBmC,UAAU5L,QAAU,SAAU6B,GAC/C,MAAyB,KAArB0U,UAAUnW,OACH/E,KAAKgb,QAAQrW,SAAW,MAE/B6B,GAA4B,gBAAXA,GACjBxG,KAAKgb,QAAQrW,QAAUwJ,EAAU8K,WAAWzS,GACrCyU,EAAYzU,KACnBxG,KAAKgb,QAAQrW,QAAU6B,GAEZ,OAAXA,SACOxG,MAAKgb,QAAQrW,QAEjB3E,OAYXoO,EAAqBmC,UAAUiL,OAAS,SAAUC,EAAYjR,GAC1D,MAAyB,KAArB0Q,UAAUnW,OACH/E,KAAKgb,QAAQS,IAAe,MAEnCA,GAAoC,gBAAfA,IAAuD,IAA5BA,EAAWnV,QAAQ,MAAckE,IAA2B,gBAAVA,IAAuC,gBAAVA,IAAuC,iBAAVA,MAC5JxK,KAAKgb,QAAQS,GAAcjR,GAE3BiR,GAAwB,OAAVjR,SACPxK,MAAKgb,QAAQS,GAEjBzb,OAWXoO,EAAqBmC,UAAU9F,OAAS,SAAUiR,GAC9C,GAAI5Q,EACJ,KAAKA,IAAO4Q,GAAqBV,QACzBU,EAAqBV,QAAQhS,eAAe8B,KAC5C9K,KAAKgb,QAAQlQ,GAAO4Q,EAAqBV,QAAQlQ,GAGzD,OAAO9K,OAUXoO,EAAqBmC,UAAU/C,aAAe,WAC1C,GAMImO,GANAC,EAAa,GAEbC,EAAkB,WAClBD,GAA8B,KAAfA,EAAqB,IAAM,IAI9C,KAAKD,IAAU3b,MAAKgb,QACZhb,KAAKgb,QAAQhS,eAAe2S,KAC5BE,IAEID,GADAX,EAAYjb,KAAKgb,QAAQW,IACXA,EAAS,IAAM3b,KAAKgb,QAAQW,GAAQ9C,iBAEpC8C,EAAS,IAAM3b,KAAKgb,QAAQW,GAKtD,OAAOC,IAUXxN,EAAqB0N,WAAa,SAAUzK,GACxC,GACI9J,GADAmU,EAAuB,GAAItN,EAE/B,KAAK7G,IAAY8J,GACTA,EAAOrI,eAAezB,IAAuD,kBAAnCmU,GAAqBnU,IAC/DmU,EAAqBnU,GAAU8J,EAAO9J,GAG9C,OAAOmU,IAGJtN,KClSf7O,QAAQC,OAAO,UAAUmB,SAAS,UAC9B,WACI,GAAIZ,KAGJA,GAAOuC,QAAU,KACjBtC,KAAK0V,WAAa,SAAUpT,GAExB,MADAvC,GAAOuC,QAAUA,EACVtC,MAKXD,EAAOyT,oBAAsB,GAC7BxT,KAAK2V,uBAAyB,SAAUnC,GAEpC,MADAzT,GAAOyT,oBAAsBA,EACtBxT,MAIXD,EAAOiE,sBAAwB,KAC/BhE,KAAKwV,yBAA2B,SAAUxR,GAEtC,MADAjE,GAAOiE,sBAAwBA,EACxBhE,MAIXD,EAAO4F,iBAAmB,KAC1B3F,KAAKyV,oBAAsB,SAAU9P,GAEjC,MADA5F,GAAO4F,iBAAmBA,EACnB3F,MAGXA,KAAK8B,MAAQ,YAAa,cAAe,SAAUmM,EAAW2C,GAE1D,GAAIrO,IACAD,QAASvC,EAAOuC,QAChB0B,sBAAuBjE,EAAOiE,sBAC9B2B,iBAAkB5F,EAAO4F,iBACzB6N,oBAAqBzT,EAAOyT,oBAC5B/K,UA8EJ,OAvEAlG,GAAQmG,UAAY,WAChB,GACI7C,GADAkW,IAEJ,KAAKlW,IAAS7F,MAAKyI,OACXzI,KAAKyI,OAAOO,eAAenD,IAC3BkW,EAAU/W,KAAKhF,KAAKyI,OAAO5C,GAGnC,OAAOkW,IAQXxZ,EAAQsE,SAAW,SAAUhD,GACzB,MAAO7D,MAAKyI,OAAO5E,IAAc,MASrCtB,EAAQyZ,YAAc,SAAU3G,EAAiB/S,GAO7C,GANAA,EAAUA,GAAWtC,KAAKsC,QAG1BA,EAA8B,gBAAZA,GAAwB2L,EAAU5D,IAAI/H,GAAWA,GAG9DA,EACD,MAAO,KAIX,KAAK+S,IAAoBA,EAAgBxJ,KACrC,MAAO,KAIX,IAAI7L,KAAKyI,OAAO4M,EAAgBxJ,MAC5B,MAAO7L,MAAKyI,OAAO4M,EAAgBxJ,KAGvC,IAAIhG,GAAQ,GAAI+K,GAAMyE,EACtBxP,GAAM2P,yBAAyBxV,KAAKgE,uBACpC6B,EAAM4P,oBAAoBzV,KAAK2F,kBAC/BE,EAAM6P,WAAWpT,GACjBuD,EAAM8P,uBAAuB3V,KAAKwT,oBAElC,IAAIyI,GAAcpW,EAAM+P,uBAExB,OAAKqG,IAILpW,EAAMoQ,yBAGqC,kBAAhC3T,GAAQ+L,qBAAuC/L,EAAQ+L,oBAAoBxI,IAItF7F,KAAKyI,OAAO5C,EAAMhC,WAAagC,EAExBA,GALI,MAPA,MAeRtD","sourcesContent":["angular.module('recall', []);","angular.module('recall').factory(\"recallAdapterResponse\", [\r\n    function () {\r\n\r\n        /**\r\n         * The AdapterResponse class represents a response that is coming back from an adapter. Every Adapter should\r\n         * resolve and reject with a properly formed AdapterResponse so that the Model can handle the response.\r\n         *\r\n         * @param {Object|Array|String} data The raw data from the adapter or an error message\r\n         * @param {Number} [count] The number of records affected by the action. Left null if not set\r\n         * @param {Number} [status=200] The status of the response\r\n         * @param {Object} [headers] The response headers (used by $http)\r\n         * @param {Object} [config] The configuration of the request (used by $http)\r\n         * @constructor\r\n         */\r\n        var AdapterResponse = function (data, count, status, headers, config) {\r\n            this.data = data;\r\n            this.count = (count >= 0) ? count : null;\r\n            this.status = status || AdapterResponse.OK;\r\n            this.headers = headers;\r\n            this.config = config;\r\n        };\r\n\r\n        // 2xx status codes used in OOTB adapters\r\n        AdapterResponse.OK = 200;\r\n        AdapterResponse.CREATED = 201;\r\n        AdapterResponse.ACCEPTED = 202;\r\n        AdapterResponse.NO_CONTENT = 204;\r\n\r\n        // 4xx status codes used in OOTB adapters\r\n        AdapterResponse.BAD_REQUEST = 400;\r\n        AdapterResponse.UNAUTHORIZED = 401;\r\n        AdapterResponse.NOT_FOUND = 404;\r\n        AdapterResponse.CONFLICT = 409;\r\n\r\n        // 5xx status codes used in OOTB adapters\r\n        AdapterResponse.INTERNAL_SERVER_ERROR = 500;\r\n        AdapterResponse.NOT_IMPLEMENTED = 501;\r\n\r\n        return AdapterResponse;\r\n    }\r\n]);","angular.module('recall.adapter.browserStorage', ['recall']).provider('recallBrowserStorageAdapter', [\r\n    function () {\r\n\r\n        var providerConfig = {};\r\n\r\n        providerConfig.preferredBackend = 'indexedDB';\r\n        this.preferIndexedDB = function () {\r\n            providerConfig.preferredBackend = 'indexedDB';\r\n            return this;\r\n        };\r\n        this.preferWebSQL = function () {\r\n            providerConfig.preferredBackend = 'webSQL';\r\n            return this;\r\n        };\r\n\r\n        // Sets the name of the database to use\r\n        providerConfig.dbName = 'recall';\r\n        this.setDbName = function (dbName) {\r\n            providerConfig.dbName = dbName;\r\n            return this;\r\n        };\r\n\r\n        // Sets the version of the database\r\n        providerConfig.dbVersion = 1;\r\n        this.setDbVersion = function (dbVersion) {\r\n            providerConfig.dbVersion = dbVersion;\r\n            return this;\r\n        };\r\n\r\n        // Sets the size of the database (WebSQL)\r\n        providerConfig.dbSize = 5 * 1024 * 1024; // 5MB\r\n        this.setDbSize = function (dbSize) {\r\n            providerConfig.dbSize = dbSize;\r\n            return this;\r\n        };\r\n\r\n        // Sets the default function to be used as a \"GUID\" generator\r\n        providerConfig.pkGenerator = function () {\r\n            function s4() {\r\n                return Math.floor((1 + Math.random()) * 0x10000)\r\n                    .toString(16)\r\n                    .substring(1);\r\n            }\r\n\r\n            return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\r\n                s4() + '-' + s4() + s4() + s4();\r\n        };\r\n        this.setPkGenerator = function (pkGenerator) {\r\n            providerConfig.pkGenerator = pkGenerator;\r\n            return this;\r\n        };\r\n\r\n        this.$get = [\r\n            '$log',\r\n            '$q',\r\n            '$window',\r\n            'recall',\r\n            'recallAdapterResponse',\r\n            'recallIndexedDBService',\r\n            'recallWebSQLService',\r\n\r\n            function ($log, $q, $window, recall, AdapterResponse, indexedDBService, webSQLService) {\r\n\r\n                var adapter = {\r\n                    service: null,\r\n                    db: null\r\n                };\r\n                var connectionPromise;\r\n\r\n                var generatePrimaryKey = providerConfig.pkGenerator;\r\n\r\n                var init = function () {\r\n                    if (providerConfig.preferredBackend === 'webSQL') {\r\n                        if ($window.openDatabase !== undefined) {\r\n                            adapter.service = webSQLService;\r\n                        } else if ($window.indexedDB !== undefined) {\r\n                            adapter.service = indexedDBService;\r\n                        }\r\n                    } else {\r\n                        if ($window.indexedDB !== undefined) {\r\n                            adapter.service = indexedDBService;\r\n                        } else if ($window.openDatabase !== undefined) {\r\n                            adapter.service = webSQLService;\r\n                        }\r\n                    }\r\n\r\n                    if (!adapter.service) {\r\n                        $log.error('BrowserStorageAdapter: IndexedDB and WebSQL are not available');\r\n                    }\r\n                };\r\n\r\n                // Connects to the database\r\n                var connect = function () {\r\n                    var dfd = $q.defer();\r\n\r\n                    if (adapter.db) {\r\n                        dfd.resolve(adapter.db);\r\n                    } else if (connectionPromise) {\r\n                        return connectionPromise;\r\n                    } else {\r\n                        adapter.service.connect(providerConfig.dbName, providerConfig.dbVersion, providerConfig.dbSize).then(function (db) {\r\n                            $log.debug('BrowserStorageAdapter: Database Connection Success');\r\n                            adapter.db = db;\r\n                            dfd.resolve(adapter.db);\r\n                        }, function (e) {\r\n                            $log.error('BrowserStorageAdapter: Database Connection Failed', e);\r\n                            dfd.reject(e);\r\n                        });\r\n                    }\r\n\r\n                    connectionPromise = dfd.promise;\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Creates a new Entity\r\n                 * @param {Object} theModel The model of the entity to create\r\n                 * @param {Object} modelInstance The entity to create\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.create = function (theModel, modelInstance) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var buildError = function (e) {\r\n                        response = new AdapterResponse(e, 0, AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                        $log.error('BrowserStorageAdapter: Create ' + theModel.modelName, response, modelInstance);\r\n                        return response;\r\n                    };\r\n\r\n                    modelInstance[theModel.primaryKeyFieldName] = generatePrimaryKey();\r\n                    modelInstance = theModel.getRawModelObject(modelInstance, false);\r\n\r\n                    // TODO: Store all dates in ISO format\r\n                    modelInstance[theModel.lastModifiedFieldName] = new Date().toISOString();\r\n\r\n                    connect().then(function (db) {\r\n\r\n                        adapter.service.create(db, theModel, modelInstance).then(function (result) {\r\n                            response = new AdapterResponse(result, 1, AdapterResponse.CREATED);\r\n                            $log.debug('BrowserStorageAdapter: Create ' + theModel.modelName, response);\r\n                            dfd.resolve(response);\r\n                        }, function (e) {\r\n                            dfd.reject(buildError(e));\r\n                        });\r\n\r\n                    }, function (e) {\r\n                        dfd.reject(buildError(e));\r\n                    });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Finds a single entity given a primary key\r\n                 * @param {Object} theModel The model of the entity to find\r\n                 * @param {String|Number} pk The primary key of the entity to find\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use for $expand\r\n                 * @param {Boolean} [includeDeleted=false] If true, includes soft-deleted entities\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.findOne = function (theModel, pk, queryOptions, includeDeleted) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var buildError = function (e, status) {\r\n                        response = new AdapterResponse(e, 0, status || AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                        $log.error('BrowserStorageAdapter: FindOne ' + theModel.modelName, response, pk, queryOptions);\r\n                        return response;\r\n                    };\r\n\r\n                    connect().then(function (db) {\r\n\r\n                        adapter.service.findOne(db, theModel, pk, includeDeleted).then(function (result) {\r\n\r\n                            if (result) {\r\n                                performExpand(result, theModel, queryOptions, db).then(function () {\r\n                                    response = new AdapterResponse(result, 1);\r\n                                    $log.debug('BrowserStorageAdapter: FindOne ' + theModel.modelName, response, pk, queryOptions);\r\n                                    dfd.resolve(response);\r\n                                }, function (e) {\r\n                                    dfd.reject(buildError(e));\r\n                                });\r\n                            } else {\r\n                                dfd.reject(buildError('Not Found', AdapterResponse.NOT_FOUND));\r\n                            }\r\n\r\n                        }, function (e) {\r\n                            dfd.reject(buildError(e));\r\n                        });\r\n\r\n                    }, function (e) {\r\n                        dfd.reject(buildError(e));\r\n                    });\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Finds a set of Model entities\r\n                 * @param {Object} theModel The model of the entities to find\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use\r\n                 * @param {Boolean} [includeDeleted=false] If true, includes soft-deleted entities\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.find = function (theModel, queryOptions, includeDeleted) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var buildError = function (e) {\r\n                        response = new AdapterResponse(e, 0, AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                        $log.error('BrowserStorageAdapter: Find ' + theModel.modelName, response, queryOptions);\r\n                        return response;\r\n                    };\r\n\r\n                    connect().then(function (db) {\r\n                        var filterPredicate;\r\n\r\n                        if (queryOptions && queryOptions.$filter()) {\r\n                            filterPredicate = queryOptions.$filter();\r\n                        }\r\n\r\n                        adapter.service.find(db, theModel, includeDeleted).then(function (results) {\r\n\r\n                            var i;\r\n                            var promises = [];\r\n                            for (i = 0; i < results.length; i++) {\r\n                                promises.push(performExpand(results[i], theModel, queryOptions, db));\r\n                            }\r\n                            $q.all(promises).then(function () {\r\n                                results = applyFilter(results, filterPredicate);\r\n                                results = applyOrderBy(theModel, results, queryOptions);\r\n\r\n                                var totalCount = results.length;\r\n                                results = applyPaging(results, queryOptions);\r\n                                response = new AdapterResponse(results, totalCount);\r\n\r\n                                $log.debug('BrowserStorageAdapter: Find ' + theModel.modelName, response, queryOptions);\r\n                                dfd.resolve(response);\r\n                            }, function (e) {\r\n                                dfd.reject(buildError(e));\r\n                            });\r\n\r\n                        }, function (e) {\r\n                            dfd.reject(buildError(e));\r\n                        });\r\n\r\n                    }, function (e) {\r\n                        dfd.reject(buildError(e));\r\n                    });\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Updates a Model entity given the primary key of the entity\r\n                 * @param {Object} theModel The model of the entity to update\r\n                 * @param {String|Number} pk The primary key of the entity\r\n                 * @param {Object} modelInstance The entity to update\r\n                 * @param {Boolean} [includeDeleted=false] If true, includes soft-deleted entities\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.update = function (theModel, pk, modelInstance, includeDeleted) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var buildError = function (e) {\r\n                        response = new AdapterResponse(e, 0, AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                        $log.error('BrowserStorageAdapter: Update ' + theModel.modelName, response, modelInstance);\r\n                        return response;\r\n                    };\r\n\r\n                    connect().then(function (db) {\r\n\r\n                        adapter.service.update(db, theModel, pk, modelInstance, includeDeleted).then(function (result) {\r\n\r\n                            if (result) {\r\n                                response = new AdapterResponse(result, 1);\r\n                                $log.debug('BrowserStorageAdapter: Update ' + theModel.modelName, response, modelInstance);\r\n                                dfd.resolve(response);\r\n                            } else {\r\n                                dfd.reject(buildError('Not Found', AdapterResponse.NOT_FOUND));\r\n                            }\r\n\r\n                        }, function (e) {\r\n                            dfd.reject(buildError(e));\r\n                        });\r\n\r\n                    }, function (e) {\r\n                        dfd.reject(buildError(e));\r\n                    });\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Removes an Entity given the primary key of the entity to remove\r\n                 * @param {Object} theModel The model of the entity to remove\r\n                 * @param {String|Number} pk The primary key of the entity\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.remove = function (theModel, pk) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var buildError = function (e) {\r\n                        response = new AdapterResponse(e, 0, AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                        $log.error('BrowserStorageAdapter: Remove ' + theModel.modelName, response);\r\n                        return response;\r\n                    };\r\n\r\n                    connect().then(function (db) {\r\n\r\n                        adapter.service.remove(db, theModel, pk).then(function () {\r\n                            response = new AdapterResponse(null, 1, AdapterResponse.NO_CONTENT);\r\n                            $log.debug('BrowserStorageAdapter: Remove ' + theModel.modelName, response);\r\n                            dfd.resolve(response);\r\n                        }, function (e) {\r\n                            dfd.reject(buildError(e));\r\n                        });\r\n\r\n                    }, function (e) {\r\n                        dfd.reject(buildError(e));\r\n                    });\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Takes an Array of entities and creates/updates/deletes them\r\n                 * @param {Object} theModel The model of the entities to synchronize\r\n                 * @param {Array} dataToSync An array of objects to create/update/delete\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.synchronize = function (theModel, dataToSync) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var buildError = function (e) {\r\n                        response = new AdapterResponse(e, 0, AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                        $log.error('BrowserStorageAdapter: Synchronize ' + theModel.modelName, response, dataToSync);\r\n                        return response;\r\n                    };\r\n\r\n                    connect().then(function (db) {\r\n                        var i;\r\n                        var merge = [];\r\n                        var remove = [];\r\n                        for (i = 0; i < dataToSync.length; i++) {\r\n                            if (dataToSync[i][theModel.deletedFieldName]) {\r\n                                remove.push(dataToSync[i]);\r\n                            } else {\r\n                                merge.push(dataToSync[i]);\r\n                            }\r\n                        }\r\n\r\n                        adapter.service.synchronize(db, theModel, merge, remove).then(function (results) {\r\n                            response = new AdapterResponse(results, results.length, AdapterResponse.OK);\r\n                            $log.debug('BrowserStorageAdapter: Synchronize ' + theModel.modelName, response, dataToSync);\r\n                            dfd.resolve(response);\r\n                        }, function (e) {\r\n                            dfd.reject(buildError(e));\r\n                        });\r\n                    }, function (e) {\r\n                        dfd.reject(buildError(e));\r\n                    });\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Expands a has one model association\r\n                var expandHasOne = function (model, instance, association, db, pathsToExpand) {\r\n                    var dfd = $q.defer();\r\n\r\n                    if (instance[association.mappedBy] === undefined) {\r\n                        instance[association.mappedBy] = null;\r\n                        dfd.resolve();\r\n                        return dfd.promise;\r\n                    }\r\n\r\n                    adapter.service.expandHasOne(db, model, instance, association).then(function (result) {\r\n\r\n                        var pathToExpand = pathsToExpand.join('.');\r\n\r\n                        if (result) {\r\n                            instance[association.alias] = result;\r\n                            if (pathsToExpand.length > 1) {\r\n                                expandPath(result, model, pathToExpand.substring(pathToExpand.indexOf('.') + 1), db).then(function () {\r\n                                    dfd.resolve();\r\n                                }, function (e) {\r\n                                    dfd.reject(e);\r\n                                });\r\n                            } else {\r\n                                dfd.resolve();\r\n                            }\r\n                        } else {\r\n                            instance[association.alias] = null;\r\n                            dfd.resolve();\r\n                        }\r\n                    });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Expands a has many model association\r\n                var expandHasMany = function (model, instance, association, db, pathsToExpand) {\r\n                    var dfd = $q.defer();\r\n\r\n                    adapter.service.expandHasMany(db, model, instance, association).then(function (results) {\r\n\r\n                        var pathToExpand = pathsToExpand.join('.');\r\n                        var filter = association.getOptions(instance).$filter();\r\n                        if (filter) {\r\n                            results = applyFilter(results, filter);\r\n                        }\r\n\r\n                        instance[association.alias] = results;\r\n                        if (pathsToExpand.length > 1) {\r\n                            var i;\r\n                            var promises = [];\r\n                            for (i = 0; i < results.length; i++) {\r\n                                promises.push(expandPath(results[i], model, pathToExpand.substring(pathToExpand.indexOf('.') + 1), db));\r\n                            }\r\n                            $q.all(promises).then(function () {\r\n                                dfd.resolve();\r\n                            }, function (e) {\r\n                                dfd.reject(e);\r\n                            });\r\n                        } else {\r\n                            dfd.resolve();\r\n                        }\r\n\r\n                    }, function (e) {\r\n                        dfd.reject(e);\r\n                    });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Expands a Model association given an expand path\r\n                // Recursive\r\n                var expandPath = function (result, theModel, pathToExpand, db) {\r\n                    var pathsToExpand = pathToExpand.split('.');\r\n                    var toExpand = pathsToExpand[0];\r\n\r\n                    if (toExpand) {\r\n                        var association = theModel.getAssociationByAlias(toExpand);\r\n                        var model = association.getModel();\r\n                        if (association && model) {\r\n                            if (association.type === 'hasOne') {\r\n                                return expandHasOne(model, result, association, db, pathsToExpand);\r\n                            } else if (association.type === 'hasMany') {\r\n                                return expandHasMany(model, result, association, db, pathsToExpand);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // There is nothing left to expand, just resolve.\r\n                    var dfd = $q.defer();\r\n                    dfd.resolve();\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Expands all Model associations defined in the query options $expand clause\r\n                var performExpand = function (result, theModel, queryOptions, db) {\r\n                    var dfd = $q.defer();\r\n                    var $expand;\r\n                    var promises = [];\r\n\r\n                    if (queryOptions) {\r\n                        $expand = queryOptions.$expand();\r\n                    }\r\n                    if ($expand) {\r\n                        var paths = $expand.split(',');\r\n                        var i;\r\n                        for (i = 0; i < paths.length; i++) {\r\n                            promises.push(expandPath(result, theModel, paths[i], db));\r\n                        }\r\n                        $q.all(promises).then(function () {\r\n                            dfd.resolve();\r\n                        }, function (e) {\r\n                            $log.error('BrowserStorageAdapter: PerformExpand', e, $expand, result);\r\n                            dfd.reject(e);\r\n                        });\r\n                    } else {\r\n                        dfd.resolve();\r\n                    }\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Checks if a result matches a predicate filter\r\n                var resultMatchesFilters = function (result, predicate) {\r\n                    return predicate.test(result);\r\n                };\r\n\r\n                // Applies a filter predicate to a set of results and returns an array of the matching results\r\n                var applyFilter = function (results, filterPredicate) {\r\n                    if (filterPredicate && results) {\r\n                        results = results.filter(function (a) {\r\n                            return resultMatchesFilters(a, filterPredicate);\r\n                        });\r\n                    }\r\n                    return results;\r\n                };\r\n\r\n                // Sorts the data given an $orderBy clause in query options\r\n                var applyOrderBy = function (theModel, results, queryOptions) {\r\n                    if (!queryOptions) {\r\n                        return results;\r\n                    }\r\n                    var orderBy = queryOptions.$orderBy();\r\n                    if (orderBy) {\r\n                        var property = orderBy.split(' ')[0];\r\n                        var direction = orderBy.split(' ')[1] || \"\";\r\n                        var isDate = false;\r\n\r\n                        if (theModel.fields[property] && theModel.fields[property].type === \"DATE\") {\r\n                            isDate = true;\r\n                        }\r\n\r\n                        results.sort(function (a, b) {\r\n                            var aTest = a[property];\r\n                            var bTest = b[property];\r\n\r\n                            if (isDate) {\r\n                                aTest = new Date(aTest);\r\n                                bTest = new Date(bTest);\r\n                            }\r\n\r\n                            if (aTest > bTest) {\r\n                                return (direction.toLowerCase() === 'desc') ? -1 : 1;\r\n                            }\r\n                            if (bTest > aTest) {\r\n                                return (direction.toLowerCase() === 'desc') ? 1 : -1;\r\n                            }\r\n                            return 0;\r\n                        });\r\n                    }\r\n                    return results;\r\n                };\r\n\r\n                // Applies paging to a set of results and returns a sliced array of results\r\n                var applyPaging = function (results, queryOptions) {\r\n                    if (!queryOptions) {\r\n                        return results;\r\n                    }\r\n                    var top = queryOptions.$top();\r\n                    var skip = queryOptions.$skip();\r\n                    if (top > 0 && skip >= 0) {\r\n                        results = results.slice(skip, skip + top);\r\n                    }\r\n                    return results;\r\n                };\r\n\r\n                init();\r\n\r\n                return adapter;\r\n            }\r\n        ];\r\n    }\r\n]);","angular.module('recall.adapter.browserStorage').factory('recallIndexedDBService', [\r\n    '$q',\r\n    '$window',\r\n    'recall',\r\n\r\n    function ($q, $window, recall) {\r\n\r\n        var indexedDBService = {};\r\n\r\n        indexedDBService.migrate = function (db) {\r\n            var i;\r\n            var model;\r\n            var field;\r\n            var indexName;\r\n            var objectStore;\r\n            var models = recall.getModels();\r\n            for (i = 0; i < models.length; i++) {\r\n                model = models[i];\r\n\r\n                if (!db.objectStoreNames.contains(model.dataSourceName)) {\r\n                    objectStore = db.createObjectStore(model.dataSourceName, { keyPath: model.primaryKeyFieldName });\r\n                    for (field in model.fields) {\r\n                        if (model.fields.hasOwnProperty(field)) {\r\n                            if (model.fields[field].unique === true || model.fields[field].index !== false) {\r\n                                indexName = (model.fields[field].index === true) ? field : model.fields[field].index;\r\n                                objectStore.createIndex(field, indexName, { unique: model.fields[field].unique });\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        // Handler for when the DB version is changed in another tab\r\n        indexedDBService.handleVersionChange = function (db) {\r\n            db.onversionchange = function () {\r\n                db.close();\r\n                $window.alert(\"A new version of this page is ready. Please reload!\");\r\n            };\r\n        };\r\n\r\n        indexedDBService.connect = function (dbName, dbVersion) {\r\n            var dfd = $q.defer();\r\n\r\n            var openRequest = $window.indexedDB.open(dbName, dbVersion);\r\n\r\n            openRequest.onupgradeneeded = function (event) {\r\n                indexedDBService.handleVersionChange(event.target.result);\r\n                indexedDBService.migrate(event.target.result);\r\n                dfd.resolve(event.target.result);\r\n            };\r\n\r\n            openRequest.onsuccess = function (event) {\r\n                indexedDBService.handleVersionChange(event.target.result);\r\n                dfd.resolve(event.target.result);\r\n            };\r\n\r\n            openRequest.onerror = function (event) {\r\n                dfd.reject(event.target.errorCode);\r\n            };\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        indexedDBService.create = function (db, theModel, modelInstance) {\r\n            var dfd = $q.defer();\r\n\r\n            var tx = db.transaction([theModel.dataSourceName], \"readwrite\");\r\n            var store = tx.objectStore(theModel.dataSourceName);\r\n            var req = store.add(modelInstance);\r\n\r\n            req.onsuccess = function () {\r\n                dfd.resolve(modelInstance);\r\n            };\r\n\r\n            req.onerror = function () {\r\n                dfd.reject(this.error);\r\n            };\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        indexedDBService.findOne = function (db, theModel, pk, includeDeleted) {\r\n            var dfd = $q.defer();\r\n\r\n            var tx = db.transaction([theModel.dataSourceName]);\r\n            var store = tx.objectStore(theModel.dataSourceName);\r\n            var req = store.get(pk);\r\n\r\n            req.onsuccess = function () {\r\n                if (req.result && (includeDeleted || !req.result[theModel.deletedFieldName])) {\r\n                    dfd.resolve(req.result);\r\n                } else {\r\n                    dfd.resolve(null);\r\n                }\r\n            };\r\n            req.onerror = function () {\r\n                dfd.reject(this.error);\r\n            };\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        indexedDBService.find = function (db, theModel, includeDeleted) {\r\n            var dfd = $q.defer();\r\n\r\n            var tx = db.transaction([theModel.dataSourceName]);\r\n            var store = tx.objectStore(theModel.dataSourceName);\r\n            var req = store.openCursor();\r\n            var results = [];\r\n\r\n            req.onsuccess = function (event) {\r\n                var cursor = event.target.result;\r\n                if (cursor) {\r\n                    if (includeDeleted || !cursor.value[theModel.deletedFieldName]) {\r\n                        results.push(cursor.value);\r\n                    }\r\n                    cursor.continue();\r\n                } else {\r\n                    dfd.resolve(results);\r\n                }\r\n            };\r\n            req.onerror = function () {\r\n                dfd.reject(this.error);\r\n            };\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        indexedDBService.update = function (db, theModel, pk, modelInstance, includeDeleted) {\r\n            var dfd = $q.defer();\r\n\r\n            var tx = db.transaction([theModel.dataSourceName], \"readwrite\");\r\n            var store = tx.objectStore(theModel.dataSourceName);\r\n            var req = store.get(pk);\r\n\r\n            req.onsuccess = function () {\r\n                if (req.result && (includeDeleted || !req.result[theModel.deletedFieldName])) {\r\n                    var result = req.result;\r\n                    delete modelInstance[theModel.primaryKeyFieldName];\r\n                    angular.extend(result, modelInstance);\r\n\r\n                    // TODO: Convert all dates to ISO Format\r\n                    result[theModel.lastModifiedFieldName] = new Date().toISOString();\r\n                    result = theModel.getRawModelObject(result, false);\r\n\r\n                    var updateReq = store.put(result);\r\n                    updateReq.onsuccess = function () {\r\n                        dfd.resolve(result);\r\n                    };\r\n                    updateReq.onerror = function () {\r\n                        dfd.reject(this.error);\r\n                    };\r\n                } else {\r\n                    dfd.resolve(null);\r\n                }\r\n            };\r\n            req.onerror = function () {\r\n                dfd.reject(this.error);\r\n            };\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        indexedDBService.remove = function (db, theModel, pk) {\r\n            var dfd = $q.defer();\r\n\r\n            var tx = db.transaction([theModel.dataSourceName], \"readwrite\");\r\n            var store = tx.objectStore(theModel.dataSourceName);\r\n            var req = store.get(pk);\r\n\r\n            req.onsuccess = function () {\r\n                if (req.result && !req.result[theModel.deletedFieldName]) {\r\n                    var result = req.result;\r\n\r\n                    result[theModel.deletedFieldName] = true;\r\n                    result[theModel.lastModifiedFieldName] = new Date().toISOString();\r\n\r\n                    var updateReq = store.put(result);\r\n                    updateReq.onsuccess = function () {\r\n                        dfd.resolve(null);\r\n                    };\r\n                    updateReq.onerror = function () {\r\n                        dfd.reject(this.error);\r\n                    };\r\n                } else {\r\n                    dfd.resolve(null);\r\n                }\r\n            };\r\n            req.onerror = function () {\r\n                dfd.reject(this.error);\r\n            };\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        indexedDBService.synchronize = function (db, theModel, merge, remove) {\r\n            merge = merge || [];\r\n            remove = remove || [];\r\n\r\n            var tx = db.transaction([theModel.dataSourceName], \"readwrite\");\r\n            var objectStore = tx.objectStore(theModel.dataSourceName);\r\n\r\n            var i;\r\n            var promises = [];\r\n            for (i = 0; i < merge.length; i++) {\r\n                promises.push(createOrUpdate(objectStore, theModel, merge[i]));\r\n            }\r\n            for (i = 0; i < remove.length; i++) {\r\n                promises.push(hardRemove(objectStore, theModel, remove[i][theModel.primaryKeyFieldName]));\r\n            }\r\n\r\n            return $q.all(promises);\r\n        };\r\n\r\n        indexedDBService.expandHasOne = function (db, model, result, association) {\r\n            var dfd = $q.defer();\r\n\r\n            var tx = db.transaction([model.dataSourceName]);\r\n            var store = tx.objectStore(model.dataSourceName);\r\n            var req = store.get(result[association.mappedBy]);\r\n\r\n            req.onsuccess = function () {\r\n                if (req.result && !req.result[model.deletedFieldName]) {\r\n                    dfd.resolve(req.result);\r\n                } else {\r\n                    dfd.resolve(null);\r\n                }\r\n            };\r\n            req.onerror = function () {\r\n                dfd.reject(this.error);\r\n            };\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        indexedDBService.expandHasMany = function (db, model, result, association) {\r\n            var dfd = $q.defer();\r\n\r\n            var tx = db.transaction([model.dataSourceName]);\r\n            var store = tx.objectStore(model.dataSourceName);\r\n            var index = store.index(association.mappedBy);\r\n            var req = index.openCursor();\r\n            var results = [];\r\n\r\n            req.onsuccess = function (event) {\r\n                var cursor = event.target.result;\r\n                if (cursor) {\r\n                    if (!cursor.value[model.deletedFieldName] && cursor.key === result[model.primaryKeyFieldName]) {\r\n                        results.push(cursor.value);\r\n                    }\r\n                    cursor.continue();\r\n                } else {\r\n                    dfd.resolve(results);\r\n                }\r\n            };\r\n            req.onerror = function () {\r\n                dfd.reject(this.error);\r\n            };\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        var createOrUpdate = function (objectStore, theModel, modelInstance) {\r\n            var dfd = $q.defer();\r\n\r\n            var req = objectStore.get(modelInstance[theModel.primaryKeyFieldName]);\r\n            req.onsuccess = function () {\r\n                var result = req.result;\r\n                if (result) {\r\n                    angular.extend(result, modelInstance);\r\n                    result = theModel.getRawModelObject(result, false);\r\n\r\n                    var updateReq = objectStore.put(result);\r\n                    updateReq.onsuccess = function () {\r\n                        dfd.resolve(result);\r\n                    };\r\n                    updateReq.onerror = function () {\r\n                        dfd.reject(this.error);\r\n                    };\r\n                } else {\r\n                    var createReq = objectStore.add(modelInstance);\r\n                    createReq.onsuccess = function () {\r\n                        dfd.resolve(modelInstance);\r\n                    };\r\n                    createReq.onerror = function () {\r\n                        dfd.reject(this.error);\r\n                    };\r\n                }\r\n            };\r\n            req.onerror = function () {\r\n                dfd.reject(this.error);\r\n            };\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        var hardRemove = function (objectStore, theModel, pk) {\r\n            var dfd = $q.defer();\r\n\r\n            var req = objectStore.delete(pk);\r\n            req.onsuccess = function () {\r\n                dfd.resolve(null);\r\n            };\r\n            req.onerror = function () {\r\n                dfd.reject(this.error);\r\n            };\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        return indexedDBService;\r\n\r\n    }\r\n]);","angular.module('recall.adapter.browserStorage').factory('recallWebSQLService', [\r\n    '$log',\r\n    '$q',\r\n    '$window',\r\n    'recall',\r\n\r\n    function ($log, $q, $window, recall) {\r\n\r\n        var webSQLService = {};\r\n\r\n        webSQLService.migrate = function (db) {\r\n            var dfd = $q.defer();\r\n\r\n            webSQLService.createTables(db).then(function () {\r\n                webSQLService.migrateTables(db).then(function () {\r\n                    dfd.resolve(null);\r\n                }, function (e) {\r\n                    dfd.reject(e);\r\n                });\r\n            }, function (e) {\r\n                dfd.reject(e);\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        webSQLService.connect = function (dbName, dbVersion, dbSize) {\r\n            var dfd = $q.defer();\r\n\r\n            try {\r\n                var theDb = $window.openDatabase(dbName, dbVersion.toString(), 'Recall WebSQL Database', dbSize);\r\n                webSQLService.migrate(theDb).then(function () {\r\n                    dfd.resolve(theDb);\r\n                }, function (e) {\r\n                    dfd.reject(e);\r\n                });\r\n            } catch (e) {\r\n                dfd.reject(e);\r\n            }\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        webSQLService.create = function (db, theModel, modelInstance) {\r\n            var dfd = $q.defer();\r\n\r\n            db.transaction(function (tx) {\r\n                var columns = [];\r\n                var columnValues = [];\r\n                var placeholders = [];\r\n                var field;\r\n                for (field in theModel.fields) {\r\n                    if (theModel.fields.hasOwnProperty(field) && modelInstance.hasOwnProperty(field)) {\r\n                        columns.push(\"`\" + field + \"`\");\r\n                        columnValues.push(convertValueToSQL(theModel.fields[field], modelInstance));\r\n                        placeholders.push('?');\r\n                    }\r\n                }\r\n                var sql = \"INSERT INTO `\" + theModel.dataSourceName + \"` (\" + columns.join(',') + \") VALUES (\" + placeholders.join(\",\") +\")\";\r\n                $log.debug(\"WebSQLService: \" + sql, columnValues);\r\n                tx.executeSql(sql, columnValues, function () {\r\n                    dfd.resolve(modelInstance);\r\n                }, function (tx, e) {\r\n                    dfd.reject(e);\r\n                });\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        webSQLService.findOne = function (db, theModel, pk, includeDeleted) {\r\n            var dfd = $q.defer();\r\n\r\n            db.transaction(function (tx) {\r\n\r\n                var sql = \"SELECT * FROM `\" + theModel.dataSourceName + \"` WHERE `\" + theModel.primaryKeyFieldName + \"`=?\";\r\n                if (!includeDeleted && theModel.deletedFieldName) {\r\n                    sql += \" AND `\" + theModel.deletedFieldName + \"`=0\";\r\n                }\r\n\r\n                $log.debug(\"WebSQLService: \" + sql, [pk]);\r\n                tx.executeSql(sql, [pk], function (tx, result) {\r\n                    var results = transformSQLResult(theModel, result);\r\n                    if (results[0]) {\r\n                        dfd.resolve(results[0]);\r\n                    } else {\r\n                        dfd.reject(null);\r\n                    }\r\n                }, function (tx, e) {\r\n                    dfd.reject(e);\r\n                });\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        webSQLService.find = function (db, theModel, includeDeleted) {\r\n            var dfd = $q.defer();\r\n\r\n            db.transaction(function (tx) {\r\n\r\n                var sql = \"SELECT * FROM `\" + theModel.dataSourceName + \"`\";\r\n                if (!includeDeleted && theModel.deletedFieldName) {\r\n                    sql += \" WHERE `\" + theModel.deletedFieldName + \"`=0\";\r\n                }\r\n\r\n                $log.debug(\"WebSQLService: \" + sql);\r\n                tx.executeSql(sql, [], function (tx, result) {\r\n                    var results = transformSQLResult(theModel, result);\r\n                    dfd.resolve(results);\r\n                }, function (tx, e) {\r\n                    dfd.reject(e);\r\n                });\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        webSQLService.update = function (db, theModel, pk, modelInstance, includeDeleted) {\r\n            var dfd = $q.defer();\r\n\r\n            modelInstance = theModel.getRawModelObject(modelInstance, false);\r\n            modelInstance[theModel.lastModifiedFieldName] = new Date();\r\n\r\n            db.transaction(function (tx) {\r\n                var columns = [];\r\n                var columnValues = [];\r\n                var field;\r\n                for (field in theModel.fields) {\r\n                    if (theModel.fields.hasOwnProperty(field) && modelInstance.hasOwnProperty(field) && field !== theModel.primaryKeyFieldName) {\r\n                        columns.push(\"`\" + field + \"`=?\");\r\n                        columnValues.push(convertValueToSQL(theModel.fields[field], modelInstance));\r\n                    }\r\n                }\r\n                columnValues.push(pk);\r\n                var sql = \"UPDATE `\" + theModel.dataSourceName + \"` SET \" + columns.join(',') + \" WHERE `\" + theModel.primaryKeyFieldName + \"`=?\";\r\n\r\n                if (!includeDeleted && theModel.deletedFieldName) {\r\n                    sql += \" AND `\" + theModel.deletedFieldName + \"`=0\";\r\n                }\r\n\r\n                $log.debug(\"WebSQLService: \" + sql, columnValues);\r\n                tx.executeSql(sql, columnValues, function () {\r\n                    dfd.resolve(modelInstance);\r\n                }, function (tx, e) {\r\n                    dfd.reject(e);\r\n                });\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        webSQLService.remove = function (db, theModel, pk) {\r\n            var dfd = $q.defer();\r\n\r\n            var columns = [\"`\" + theModel.lastModifiedFieldName + \"`=?\", \"`\" + theModel.deletedFieldName + \"`=?\"];\r\n            var columnValues = [new Date().toISOString(), 1, pk];\r\n\r\n            db.transaction(function (tx) {\r\n\r\n                var sql = \"UPDATE `\" + theModel.dataSourceName + \"` SET \" + columns.join(',') + \" WHERE `\" + theModel.primaryKeyFieldName + \"`=?\";\r\n\r\n                $log.debug(\"WebSQLService: \" + sql, columnValues);\r\n                tx.executeSql(sql, columnValues, function () {\r\n                    dfd.resolve(null);\r\n                }, function (tx, e) {\r\n                    dfd.reject(e);\r\n                });\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        webSQLService.synchronize = function (db, theModel, merge, remove) {\r\n            var dfd = $q.defer();\r\n\r\n            merge = merge || [];\r\n            remove = remove || [];\r\n\r\n            db.transaction(function (tx) {\r\n                var i;\r\n                var promises = [];\r\n                for (i = 0; i < merge.length; i++) {\r\n                    promises.push(createOrUpdate(tx, theModel, merge[i]));\r\n                }\r\n                for (i = 0; i < remove.length; i++) {\r\n                    promises.push(hardRemove(tx, theModel, remove[i][theModel.primaryKeyFieldName]));\r\n                }\r\n\r\n                $q.all(promises).then(function (results) {\r\n                    dfd.resolve(results);\r\n                }, function (e) {\r\n                    dfd.reject(e);\r\n                });\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        webSQLService.expandHasOne = function (db, model, result, association) {\r\n            var dfd = $q.defer();\r\n\r\n            var sql = \"SELECT * FROM `\" + model.dataSourceName + \"` WHERE `\" + model.primaryKeyFieldName + \"`=?\";\r\n            if (model.deletedFieldName) {\r\n                sql += \" AND `\" + model.deletedFieldName + \"`=0\";\r\n            }\r\n\r\n            $log.debug(\"WebSQLService: \" + sql, [result[association.mappedBy]]);\r\n\r\n            db.transaction(function (tx) {\r\n                tx.executeSql(sql, [result[association.mappedBy]], function (tx, response) {\r\n                    var results = transformSQLResult(model, response);\r\n                    if (results[0]) {\r\n                        dfd.resolve(results[0]);\r\n                    } else {\r\n                        dfd.resolve(null);\r\n                    }\r\n                }, function (tx, e) {\r\n                    dfd.reject(e);\r\n                });\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        webSQLService.expandHasMany = function (db, model, result, association) {\r\n            var dfd = $q.defer();\r\n\r\n            var sql = \"SELECT * FROM `\" + model.dataSourceName + \"` WHERE `\" + association.mappedBy + \"`=?\";\r\n            if (model.deletedFieldName) {\r\n                sql += \" AND `\" + model.deletedFieldName + \"`=0\";\r\n            }\r\n\r\n            $log.debug(\"WebSQLService: \" + sql, [result[model.primaryKeyFieldName]]);\r\n\r\n            db.transaction(function (tx) {\r\n                tx.executeSql(sql, [result[model.primaryKeyFieldName]], function (tx, response) {\r\n                    var results = transformSQLResult(model, response);\r\n                    dfd.resolve(results);\r\n                }, function (tx, e) {\r\n                    dfd.reject(e);\r\n                });\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        var createTable = function (model, fields, tx) {\r\n            var dfd = $q.defer();\r\n\r\n            var sql = 'CREATE TABLE IF NOT EXISTS `' + model.dataSourceName + '` (' + fields.join(', ') + ')';\r\n            $log.debug(\"WebSQLService: \" + sql);\r\n            tx.executeSql(sql, [], function () {\r\n                dfd.resolve();\r\n            }, function (tx, e) {\r\n                dfd.reject(e);\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        webSQLService.createTables = function (db) {\r\n            var promises = [];\r\n            var operations = [];\r\n\r\n            var i;\r\n            var model;\r\n            var field;\r\n            var column;\r\n            var fields;\r\n            var models = recall.getModels();\r\n\r\n            for (i = 0; i < models.length; i++) {\r\n                model = models[i];\r\n\r\n                fields = [];\r\n                for (field in model.fields) {\r\n                    if (model.fields.hasOwnProperty(field)) {\r\n                        column = \"`\" + model.fields[field].name + \"`\";\r\n                        switch (model.fields[field].type) {\r\n                        case 'STRING':\r\n                            column += ' TEXT';\r\n                            break;\r\n                        case 'NUMBER':\r\n                            column += ' REAL';\r\n                            break;\r\n                        case 'DATE':\r\n                            column += ' TEXT';\r\n                            break;\r\n                        case 'BOOLEAN':\r\n                            column += ' INTEGER';\r\n                            break;\r\n                        default:\r\n                            return $q.reject('WebSQLService: Migrate - An unknown field type was found.');\r\n                        }\r\n\r\n                        if (model.fields[field].primaryKey) {\r\n                            column += ' PRIMARY KEY';\r\n                        }\r\n                        if (model.fields[field].unique) {\r\n                            column += ' UNIQUE';\r\n                        }\r\n                        if (model.fields[field].notNull) {\r\n                            column += ' NOT NULL';\r\n                        }\r\n                        fields.push(column);\r\n                    }\r\n                }\r\n                operations.push({model: model, fields: fields });\r\n            }\r\n\r\n            db.transaction(function (tx) {\r\n                for (i = 0; i < operations.length; i++) {\r\n                    promises.push(createTable(operations[i].model, operations[i].fields, tx));\r\n                }\r\n            });\r\n\r\n            return $q.all(promises);\r\n        };\r\n\r\n        var addColumnToTable = function (modelField, tableName, tx) {\r\n            var dfd = $q.defer();\r\n\r\n            var column = \"`\" + modelField.name + \"`\";\r\n            switch (modelField.type) {\r\n            case 'STRING':\r\n                column += ' TEXT';\r\n                break;\r\n            case 'NUMBER':\r\n                column += ' REAL';\r\n                break;\r\n            case 'DATE':\r\n                column += ' TEXT';\r\n                break;\r\n            case 'BOOLEAN':\r\n                column += ' INTEGER';\r\n                break;\r\n            default:\r\n                return $q.reject('WebSQLService: Migrate - An unknown field type was found.');\r\n            }\r\n\r\n            if (modelField.primaryKey) {\r\n                column += ' PRIMARY KEY';\r\n            }\r\n            if (modelField.unique) {\r\n                column += ' UNIQUE';\r\n            }\r\n            if (modelField.notNull) {\r\n                column += ' NOT NULL';\r\n            }\r\n\r\n            var sql = \"ALTER TABLE `\" + tableName + \"` ADD \" + column;\r\n            $log.debug(\"WebSQLService: \" + sql);\r\n            tx.executeSql(sql, [], function () {\r\n                dfd.resolve();\r\n            }, function (tx, e) {\r\n                dfd.reject(e);\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        var migrateTable = function (model, tableRows, tx) {\r\n            var promises = [];\r\n\r\n            var i;\r\n            var row;\r\n            var tableSQL = null;\r\n            for (i = 0; i < tableRows.length; i++) {\r\n                row = tableRows[i];\r\n                if (row.tbl_name === model.dataSourceName) {\r\n                    tableSQL = row.sql;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (tableSQL) {\r\n                var field;\r\n                var missingFields = [];\r\n                for (field in model.fields) {\r\n                    // TODO: This needs to check if the field name is the same as the model name\r\n                    if (model.fields.hasOwnProperty(field) && tableSQL.indexOf(\"`\" + field + \"`\") === -1) {\r\n                        missingFields.push(model.fields[field]);\r\n                    }\r\n                }\r\n\r\n                for (i = 0; i < missingFields.length; i++) {\r\n                    promises.push(addColumnToTable(missingFields[i], model.dataSourceName, tx));\r\n                }\r\n            }\r\n\r\n            return $q.all(promises);\r\n        };\r\n\r\n        webSQLService.migrateTables = function (db) {\r\n            var dfd = $q.defer();\r\n\r\n            db.transaction(function (tx) {\r\n                var sql = \"SELECT tbl_name, sql from sqlite_master WHERE type = 'table'\";\r\n                $log.debug(\"WebSQLService: \" + sql);\r\n                tx.executeSql(sql, [], function (tx, result) {\r\n                    var model;\r\n                    var models = recall.getModels();\r\n                    var promises = [];\r\n\r\n                    var i;\r\n                    var tableRows = [];\r\n                    for (i = 0; i < result.rows.length; i++) {\r\n                        tableRows.push(result.rows.item(i));\r\n                    }\r\n\r\n                    for (i = 0; i < models.length; i++) {\r\n                        model = models[i];\r\n                        promises.push(migrateTable(model, tableRows, tx));\r\n                    }\r\n\r\n                    $q.all(promises).then(function () {\r\n                        dfd.resolve();\r\n                    }, function (e) {\r\n                        dfd.reject(e);\r\n                    });\r\n                }, function (tx, e) {\r\n                    dfd.reject(e);\r\n                });\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        var createOrUpdate = function (tx, theModel, modelInstance) {\r\n            var dfd = $q.defer();\r\n\r\n            var columns = [];\r\n            var columnValues = [];\r\n            var placeholders = [];\r\n            var field;\r\n            for (field in theModel.fields) {\r\n                if (theModel.fields.hasOwnProperty(field) && modelInstance.hasOwnProperty(field)) {\r\n                    columns.push(\"`\" + field + \"`\");\r\n                    columnValues.push(convertValueToSQL(theModel.fields[field], modelInstance));\r\n                    placeholders.push('?');\r\n                }\r\n            }\r\n            var sql = \"INSERT OR REPLACE INTO `\" + theModel.dataSourceName + \"` (\" + columns.join(',') + \") VALUES (\" + placeholders.join(\",\") +\")\";\r\n            $log.debug(\"WebSQLAdapter: \" + sql, columnValues);\r\n            tx.executeSql(sql, columnValues, function (tx, result) {\r\n                var results = transformSQLResult(theModel, result);\r\n                dfd.resolve(results[0]);\r\n            }, function (tx, e) {\r\n                dfd.reject(e);\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        var hardRemove = function (tx, theModel, pk) {\r\n            var dfd = $q.defer();\r\n\r\n            var sql = \"DELETE FROM `\" + theModel.dataSourceName + \"` WHERE `\" + theModel.primaryKeyFieldName + \"`=?\";\r\n            $log.debug(\"WebSQLAdapter: \" + sql, [pk]);\r\n            tx.executeSql(sql, [pk], function () {\r\n                dfd.resolve();\r\n            }, function (tx, e) {\r\n                dfd.reject(e);\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        var convertValueToSQL = function (field, modelInstance) {\r\n            switch (field.type) {\r\n            case 'STRING':\r\n            case 'NUMBER':\r\n                return modelInstance[field.name];\r\n            case 'DATE':\r\n                if (modelInstance[field.name] instanceof Date) {\r\n                    return modelInstance[field.name].toISOString();\r\n                }\r\n                return new Date(modelInstance[field.name]).toISOString();\r\n            case 'BOOLEAN':\r\n                if (modelInstance[field.name] === true || modelInstance[field.name] === 1) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            }\r\n        };\r\n\r\n        var convertValueToModel = function (field, sqlResultInstance) {\r\n            if (field.type === \"BOOLEAN\") {\r\n                return sqlResultInstance[field.name] === 1;\r\n            }\r\n            return sqlResultInstance[field.name];\r\n        };\r\n\r\n        var getSQLModelObject = function (theModel, result) {\r\n            var field;\r\n            var obj = {};\r\n            for (field in theModel.fields) {\r\n                if (theModel.fields.hasOwnProperty(field) && result.hasOwnProperty(field)) {\r\n                    obj[field] = convertValueToModel(theModel.fields[field], result);\r\n                }\r\n            }\r\n            return obj;\r\n        };\r\n\r\n        var transformSQLResult = function (theModel, result) {\r\n            var results = [];\r\n            var i;\r\n            for (i = 0; i < result.rows.length; i++) {\r\n                results.push(getSQLModelObject(theModel, result.rows.item(i)));\r\n            }\r\n\r\n            return results;\r\n        };\r\n\r\n        return webSQLService;\r\n\r\n    }\r\n]);","angular.module('recall.adapter.oDataREST', ['recall']).provider('recallODataRESTAdapter', [\r\n    function () {\r\n\r\n        var providerConfig = {};\r\n\r\n        // Sets the location of the server api endpoint\r\n        providerConfig.serverAPILocation = \"/api/\";\r\n        this.setServerAPILocation = function (serverAPILocation) {\r\n            if (serverAPILocation.substring(serverAPILocation.length - 1) !== \"/\") {\r\n                serverAPILocation += '/';\r\n            }\r\n            providerConfig.serverAPILocation = serverAPILocation;\r\n            return this;\r\n        };\r\n\r\n        // Sets the name of the results property in the server's response\r\n        providerConfig.resultsField = \"results\";\r\n        this.setResultsField = function (resultsField) {\r\n            providerConfig.resultsField = resultsField;\r\n            return this;\r\n        };\r\n\r\n        // Sets the name of the total count property in the server's response\r\n        providerConfig.totalCountFiled = \"totalCount\";\r\n        this.setTotalCountFiled = function (totalCountFiled) {\r\n            providerConfig.totalCountFiled = totalCountFiled;\r\n            return this;\r\n        };\r\n\r\n        this.$get = [\r\n            '$http',\r\n            '$log',\r\n            '$q',\r\n            'recallAdapterResponse',\r\n\r\n            function ($http,\r\n                      $log,\r\n                      $q,\r\n                      AdapterResponse) {\r\n\r\n                var adapter = {};\r\n\r\n                // Appends the query options to the URL\r\n                var getUrlWithOptions = function (url, queryOptions) {\r\n                    url += queryOptions ? queryOptions.parseOptions() : \"\";\r\n                    return url;\r\n                };\r\n\r\n                /**\r\n                 * Creates a new Entity\r\n                 * @param {Object} theModel The model of the entity to create\r\n                 * @param {Object} modelInstance The entity to create\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.create = function (theModel, modelInstance) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var url = providerConfig.serverAPILocation + theModel.dataSourceName;\r\n\r\n                    $http.post(url, modelInstance)\r\n                        .success(function (data, status, headers, config) {\r\n                            response = new AdapterResponse(data, 1, status, headers, config);\r\n                            $log.debug('ODataRESTAdapter: Create ' + theModel.modelName, response);\r\n                            dfd.resolve(response);\r\n                        })\r\n                        .error(function (error, status, headers, config) {\r\n                            response = new AdapterResponse(error, 0, status, headers, config);\r\n                            $log.error('ODataRESTAdapter: Create ' + theModel.modelName, response, modelInstance);\r\n                            dfd.reject(response);\r\n                        });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Finds a single entity given a primary key\r\n                 * @param {Object} theModel The model of the entity to find\r\n                 * @param {String|Number} pk The primary key of the entity to find\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use for $expand\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.findOne = function (theModel, pk, queryOptions) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    if (!pk) {\r\n                        response = new AdapterResponse(\"No Primary Key was supplied\", 0, AdapterResponse.BAD_REQUEST);\r\n                        $log.error('ODataRESTAdapter: FindOne ' + theModel.modelName, response, pk, queryOptions);\r\n                        return $q.reject(response);\r\n                    }\r\n\r\n                    var url = getUrlWithOptions(providerConfig.serverAPILocation + theModel.dataSourceName + \"/\" + pk, queryOptions);\r\n\r\n                    $http.get(url)\r\n                        .success(function (data, status, headers, config) {\r\n                            response = new AdapterResponse(data, 1, status, headers, config);\r\n                            $log.debug('ODataRESTAdapter: FindOne ' + theModel.modelName, response, pk, queryOptions);\r\n                            dfd.resolve(response);\r\n                        })\r\n                        .error(function (error, status, headers, config) {\r\n                            response = new AdapterResponse(error, 0, status, headers, config);\r\n                            $log.error('ODataRESTAdapter: FindOne ' + theModel.modelName, response, pk, queryOptions);\r\n                            dfd.reject(response);\r\n                        });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Finds a set of Model entities\r\n                 * @param {Object} theModel The model of the entities to find\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.find = function (theModel, queryOptions) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var url = getUrlWithOptions(providerConfig.serverAPILocation + theModel.dataSourceName, queryOptions);\r\n\r\n                    $http.get(url)\r\n                        .success(function (data, status, headers, config) {\r\n                            var results = data;\r\n                            var totalCount;\r\n\r\n                            if (providerConfig.resultsField) {\r\n                                results = data[providerConfig.resultsField];\r\n                                if (providerConfig.totalCountFiled && data[providerConfig.totalCountFiled]) {\r\n                                    totalCount = data[providerConfig.totalCountFiled];\r\n                                }\r\n                            }\r\n\r\n                            response = new AdapterResponse(results, totalCount, status, headers, config);\r\n                            $log.debug('ODataRESTAdapter: Find ' + theModel.modelName, response, queryOptions);\r\n                            dfd.resolve(response);\r\n                        })\r\n                        .error(function (error, status, headers, config) {\r\n                            response = new AdapterResponse(error, 0, status, headers, config);\r\n                            $log.error('ODataRESTAdapter: Find ' + theModel.modelName, response, queryOptions);\r\n                            dfd.reject(response);\r\n                        });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Updates a Model entity given the primary key of the entity\r\n                 * @param {Object} theModel The model of the entity to update\r\n                 * @param {String|Number} pk The primary key of the entity\r\n                 * @param {Object} modelInstance The entity to update\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.update = function (theModel, pk, modelInstance) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    if (!pk) {\r\n                        response = new AdapterResponse(\"No Primary Key was supplied\", 0, AdapterResponse.BAD_REQUEST);\r\n                        $log.error('ODataRESTAdapter: Update ' + theModel.modelName, response, modelInstance);\r\n                        return $q.reject(response);\r\n                    }\r\n\r\n                    var url = providerConfig.serverAPILocation + theModel.dataSourceName + \"/\" + pk;\r\n\r\n                    $http.put(url, modelInstance)\r\n                        .success(function (data, status, headers, config) {\r\n                            response = new AdapterResponse(data, 1, status, headers, config);\r\n                            $log.debug('ODataRESTAdapter: Update ' + theModel.modelName, response, modelInstance);\r\n                            dfd.resolve(response);\r\n                        })\r\n                        .error(function (error, status, headers, config) {\r\n                            response = new AdapterResponse(error, 0, status, headers, config);\r\n                            $log.error('ODataRESTAdapter: Update ' + theModel.modelName, response, modelInstance);\r\n                            dfd.reject(response);\r\n                        });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Removes an Entity given the primary key of the entity to remove\r\n                 * @param {Object} theModel The model of the entity to remove\r\n                 * @param {String|Number} pk The primary key of the entity\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.remove = function (theModel, pk) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    if (!pk) {\r\n                        response = new AdapterResponse(\"No Primary Key was supplied\", 0, AdapterResponse.BAD_REQUEST);\r\n                        $log.error('ODataRESTAdapter: Remove ' + theModel.modelName, response, pk);\r\n                        return $q.reject(response);\r\n                    }\r\n\r\n                    var url = providerConfig.serverAPILocation + theModel.dataSourceName + \"/\" + pk;\r\n\r\n                    $http({method: 'DELETE', url: url})\r\n                        .success(function (data, status, headers, config) {\r\n                            response = new AdapterResponse(data, 1, status, headers, config);\r\n                            $log.debug('ODataRESTAdapter: Remove ' + theModel.modelName, response, pk);\r\n                            dfd.resolve(response);\r\n                        })\r\n                        .error(function (error, status, headers, config) {\r\n                            response = new AdapterResponse(error, 0, status, headers, config);\r\n                            $log.error('ODataRESTAdapter: Remove ' + theModel.modelName, response, pk);\r\n                            dfd.reject(response);\r\n                        });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Takes an Array of entities and creates/updates/deletes them\r\n                 * @param {Object} theModel The model of the entities to synchronize\r\n                 * @param {Array} dataToSync An array of objects to create/update/delete\r\n                 * @param {String} lastSync An ISO Date String representing the last sync\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.synchronize = function (theModel, dataToSync, lastSync) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var url = providerConfig.serverAPILocation + theModel.dataSourceName;\r\n\r\n                    $http.put(url, {data: dataToSync, lastSync: lastSync})\r\n                        .success(function (data, status, headers, config) {\r\n                            var results = data;\r\n                            var totalCount;\r\n\r\n                            if (providerConfig.resultsField) {\r\n                                results = data[providerConfig.resultsField];\r\n                                if (providerConfig.totalCountFiled && data[providerConfig.totalCountFiled]) {\r\n                                    totalCount = data[providerConfig.totalCountFiled];\r\n                                }\r\n                            }\r\n\r\n                            response = new AdapterResponse(results, totalCount, status, headers, config);\r\n                            $log.debug('ODataRESTAdapter: Synchronize ' + theModel.modelName, response, dataToSync);\r\n                            dfd.resolve(response);\r\n                        })\r\n                        .error(function (error, status, headers, config) {\r\n                            response = new AdapterResponse(error, 0, status, headers, config);\r\n                            $log.error('ODataRESTAdapter: Synchronize ' + theModel.modelName, response, dataToSync);\r\n                            dfd.reject(response);\r\n                        });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                return adapter;\r\n            }\r\n        ];\r\n    }\r\n]);","angular.module('recall.adapter.sync', ['recall']).provider('recallSyncAdapter', [\r\n    function () {\r\n\r\n        var providerConfig = {};\r\n\r\n        // Sets the master adapter\r\n        providerConfig.masterAdapter = \"\";\r\n        this.setMaster = function (masterAdapter) {\r\n            providerConfig.masterAdapter = masterAdapter;\r\n            return this;\r\n        };\r\n\r\n        // Sets the slave adapter\r\n        providerConfig.slaveAdapter = \"\";\r\n        this.setSlave = function (slaveAdapter) {\r\n            providerConfig.slaveAdapter = slaveAdapter;\r\n            return this;\r\n        };\r\n\r\n        this.$get = [\r\n            '$injector',\r\n            '$log',\r\n            '$q',\r\n            'recallAdapterResponse',\r\n            'recallLocalStorage',\r\n            'recallPredicate',\r\n            'recallPreparedQueryOptions',\r\n\r\n            function ($injector,\r\n                      $log,\r\n                      $q,\r\n                      AdapterResponse,\r\n                      localStorage,\r\n                      Predicate,\r\n                      PreparedQueryOptions) {\r\n\r\n                var adapter = {};\r\n\r\n                /**\r\n                 * Validates the Model during creation\r\n                 * @param {Object} theModel\r\n                 * @returns {Boolean} True if the model passes validation\r\n                 */\r\n                adapter.modelValidationHook = function (theModel) {\r\n                    var master = getMaster();\r\n                    var slave = getSlave();\r\n\r\n                    if (!master) {\r\n                        $log.error('SyncAdapter: Master Adapter not Set', this, theModel);\r\n                        return false;\r\n                    }\r\n                    if (!slave) {\r\n                        $log.error('SyncAdapter: Slave Adapter not Set', this, theModel);\r\n                        return false;\r\n                    }\r\n\r\n                    if (typeof master.synchronize !== 'function') {\r\n                        $log.error('SyncAdapter: Synchronize handler not found on the master adapter', this, theModel);\r\n                        return false;\r\n                    }\r\n                    if (typeof slave.synchronize !== 'function') {\r\n                        $log.error('SyncAdapter: Synchronize handler not found on the slave adapter', this, theModel);\r\n                        return false;\r\n                    }\r\n\r\n                    if (typeof master.modelValidationHook === 'function' && !master.modelValidationHook(theModel)) {\r\n                        return false;\r\n                    }\r\n                    if (typeof slave.modelValidationHook === 'function' && !slave.modelValidationHook(theModel)) {\r\n                        return false;\r\n                    }\r\n\r\n                    return true;\r\n                };\r\n\r\n                /**\r\n                 * Creates a new Entity on the Slave and attempts to sync to the Master\r\n                 * @param {Object} theModel The model of the entity to create\r\n                 * @param {Object} modelInstance The entity to create\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use for preferMaster\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.create = function (theModel, modelInstance, queryOptions) {\r\n                    if (queryOptions && queryOptions.preferMaster() === true) {\r\n                        return getMaster().create(theModel, modelInstance);\r\n                    } else {\r\n                        return getSlave().create(theModel, modelInstance);\r\n                    }\r\n                    // TODO: Sync\r\n                };\r\n\r\n                /**\r\n                 * Finds a single entity given a primary key on the Slave\r\n                 * @param {Object} theModel The model of the entity to find\r\n                 * @param {String|Number} pk The primary key of the entity to find\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use for $expand and preferMaster\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.findOne = function (theModel, pk, queryOptions) {\r\n                    var response;\r\n\r\n                    if (!pk) {\r\n                        response = new AdapterResponse(\"No Primary Key was supplied\", 0, AdapterResponse.BAD_REQUEST);\r\n                        $log.error('SyncAdapter: FindOne ' + theModel.modelName, response, pk, queryOptions);\r\n                        return $q.reject(response);\r\n                    }\r\n\r\n                    if (queryOptions && queryOptions.preferMaster() === true) {\r\n                        return getMaster().findOne(theModel, pk, queryOptions);\r\n                    } else {\r\n                        return getSlave().findOne(theModel, pk, queryOptions);\r\n                    }\r\n                };\r\n\r\n                /**\r\n                 * Finds a set of Model entities on the Slave\r\n                 * @param {Object} theModel The model of the entities to find\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.find = function (theModel, queryOptions) {\r\n                    if (queryOptions && queryOptions.preferMaster() === true) {\r\n                        return getMaster().find(theModel, queryOptions);\r\n                    } else {\r\n                        return getSlave().find(theModel, queryOptions);\r\n                    }\r\n                };\r\n\r\n                /**\r\n                 * Updates a Model entity on the Slave given the primary key of the entity. Attempts to sync to the Master.\r\n                 * @param {Object} theModel The model of the entity to update\r\n                 * @param {String|Number} pk The primary key of the entity\r\n                 * @param {Object} modelInstance The entity to update\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use for preferMaster\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.update = function (theModel, pk, modelInstance, queryOptions) {\r\n                    var response;\r\n\r\n                    if (!pk) {\r\n                        response = new AdapterResponse(\"No Primary Key was supplied\", 0, AdapterResponse.BAD_REQUEST);\r\n                        $log.error('SyncAdapter: Update ' + theModel.modelName, response, modelInstance);\r\n                        return $q.reject(response);\r\n                    }\r\n\r\n                    if (queryOptions && queryOptions.preferMaster() === true) {\r\n                        return getMaster().update(theModel, pk, modelInstance);\r\n                    } else {\r\n                        return getSlave().update(theModel, pk, modelInstance);\r\n                    }\r\n                    // TODO: Sync\r\n                };\r\n\r\n                /**\r\n                 * Removes an Entity from the Slave given the primary key of the entity to remove. Attempts to sync to the Master.\r\n                 * @param {Object} theModel The model of the entity to remove\r\n                 * @param {String|Number} pk The primary key of the entity\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use for preferMaster\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.remove = function (theModel, pk, queryOptions) {\r\n                    var response;\r\n\r\n                    if (!pk) {\r\n                        response = new AdapterResponse(\"No Primary Key was supplied\", 0, AdapterResponse.BAD_REQUEST);\r\n                        $log.error('SyncAdapter: Remove ' + theModel.modelName, response, pk);\r\n                        return $q.reject(response);\r\n                    }\r\n\r\n                    if (queryOptions && queryOptions.preferMaster() === true) {\r\n                        return getMaster().remove(theModel, pk);\r\n                    } else {\r\n                        return getSlave().remove(theModel, pk);\r\n                    }\r\n                    // TODO: Sync\r\n                };\r\n\r\n                /**\r\n                 * Manually Syncs the Slave and Master adapters\r\n                 * @param {Object|Array} theModel The model of the entities to synchronize or an array of models to synchronize\r\n                 * @returns {promise} Resolved with an AdapterResponse for each model synchronized\r\n                 */\r\n                adapter.synchronize = function (theModel) {\r\n                    if (theModel instanceof Array) {\r\n                        var promises = [];\r\n                        var i;\r\n                        for (i = 0; i < theModel.length; i++) {\r\n                            promises.push(processSyncRequest(theModel[i]));\r\n                        }\r\n                        return $q.all(promises);\r\n                    }\r\n                    return processSyncRequest(theModel);\r\n                };\r\n\r\n                var getAdapter = function (adapter) {\r\n                    return (typeof adapter === 'string') ? $injector.get(adapter) : adapter;\r\n                };\r\n                var getMaster = function () {\r\n                    return getAdapter(providerConfig.masterAdapter);\r\n                };\r\n                var getSlave = function () {\r\n                    return getAdapter(providerConfig.slaveAdapter);\r\n                };\r\n\r\n                /**\r\n                 * Represents the result of a sync operation\r\n                 * @param {Array} sent An array of entities sent to the remote adapter\r\n                 * @param {Array} returned An array of data objects returned from the remote adapter\r\n                 * @param {Number} totalProcessed The total number of entities processed in the sync operation\r\n                 * @param {String} status The operation's status message\r\n                 * @constructor\r\n                 */\r\n                var SyncResult = function (sent, returned, totalProcessed, status) {\r\n                    this.sent = sent;\r\n                    this.returned = returned;\r\n                    this.totalProcessed = totalProcessed;\r\n                    this.status = status;\r\n                };\r\n\r\n                /**\r\n                 * Retrieves the last sync time for a given model in ISO format\r\n                 * @param {Object} theModel The model initiating the sync (the sync time is stored per model)\r\n                 * @returns {String} The last sync date in ISO format\r\n                 */\r\n                var getLastSyncTime = function (theModel) {\r\n                    return localStorage.get(localStorage.keys.LAST_SYNC, theModel.modelName);\r\n                };\r\n\r\n                /**\r\n                 * Updates the last sync time for a model\r\n                 * @param {Object} theModel The model initiating the sync\r\n                 */\r\n                var updateLastSyncTimeToNow = function (theModel) {\r\n                    localStorage.set(localStorage.keys.LAST_SYNC, new Date().toISOString(), theModel.modelName);\r\n                };\r\n\r\n                /**\r\n                 * Sends data from the local adapter to the remote adapter to update.\r\n                 * @param {Object} theModel The model initiating the sync\r\n                 * @param {Array} data An array of objects to send to the remote adapter to sync\r\n                 * @returns {promise}\r\n                 */\r\n                var sendSyncRequestData = function (theModel, data) {\r\n                    var lastSync = getLastSyncTime(theModel);\r\n                    return getMaster().synchronize(theModel, data, lastSync);\r\n                };\r\n\r\n                /**\r\n                 * Processes the data sent back from the remote adapter. This will update/create/delete records in the local\r\n                 * adapter\r\n                 * @param {Object} theModel The model initiating the sync\r\n                 * @param {Array} data An array of data objects to update/create/delete\r\n                 * @returns {promise}\r\n                 */\r\n                var processSyncResponseData = function (theModel, data) {\r\n                    var lastSync = getLastSyncTime(theModel);\r\n                    return getSlave().synchronize(theModel, data, lastSync);\r\n                };\r\n\r\n                /**\r\n                 * Initializes a sync request\r\n                 * @param {Object} theModel The model initiating the sync\r\n                 * @returns {promise}\r\n                 */\r\n                var processSyncRequest = function (theModel) {\r\n                    var dfd = $q.defer();\r\n                    var result;\r\n\r\n                    var syncRequestData = [];\r\n                    var syncResponseData = [];\r\n                    var totalItemsProcessed = 0;\r\n\r\n                    var handleError = function (e) {\r\n                        result = new SyncResult(syncRequestData, syncResponseData, totalItemsProcessed, e);\r\n                        $log.error('SyncAdapter: ' + theModel.modelName, result);\r\n                        dfd.reject(result);\r\n                    };\r\n\r\n                    var handleComplete = function () {\r\n                        result = new SyncResult(syncRequestData, syncResponseData, totalItemsProcessed, 'Complete');\r\n                        $log.debug('SyncAdapter: ' + theModel.modelName, 'Sync Complete', result);\r\n                        updateLastSyncTimeToNow(theModel);\r\n                        dfd.resolve(result);\r\n                    };\r\n\r\n                    $log.debug('SyncAdapter: ' + theModel.modelName + ' Sync Started');\r\n\r\n                    var lastSync = getLastSyncTime(theModel);\r\n                    var queryOptions = new PreparedQueryOptions();\r\n                    if (lastSync) {\r\n                        var predicate = new Predicate('lastModified').greaterThanOrEqualTo(lastSync);\r\n                        queryOptions.$filter(predicate);\r\n                    }\r\n\r\n                    getSlave().find(theModel, queryOptions, true).then(function (response) {\r\n                        $log.debug('SyncAdapter: Sending ' + response.count + ' local item(s) to sync');\r\n                        totalItemsProcessed += response.count;\r\n                        syncRequestData = response.data;\r\n                        sendSyncRequestData(theModel, response.data).then(function (syncResponse) {\r\n                            // TODO: Handle Conflicts\r\n\r\n                            $log.debug('SyncAdapter: Found ' + syncResponse.data.length + ' remote item(s) to sync');\r\n                            totalItemsProcessed += syncResponse.data.length;\r\n                            syncResponseData = syncResponse.data;\r\n\r\n                            if (syncResponse.data.length > 0) {\r\n                                processSyncResponseData(theModel, syncResponse.data).then(handleComplete, handleError);\r\n                            } else {\r\n                                // No data from server to sync\r\n                                handleComplete();\r\n                            }\r\n                        }, handleError);\r\n                    }, handleError);\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                return adapter;\r\n            }\r\n        ];\r\n    }\r\n]);","angular.module('recall').factory(\"recallAssociation\", [\r\n    '$injector',\r\n    '$log',\r\n    '$q',\r\n    'recallPredicate',\r\n    'recallPreparedQueryOptions',\r\n\r\n    function ($injector, $log, $q, Predicate, PreparedQueryOptions) {\r\n\r\n        /**\r\n         * Association class\r\n         * @param {Object|Association} definition\r\n         * @constructor\r\n         */\r\n        var Association = function (definition) {\r\n            this.invalid = false;\r\n\r\n            if (definition.type) {\r\n                this.type = definition.type;\r\n            } else if (typeof definition.hasOne === 'string') {\r\n                this.type = 'hasOne';\r\n            } else if (typeof definition.hasMany === 'string') {\r\n                this.type = 'hasMany';\r\n            }\r\n\r\n            this.modelName = definition.modelName || definition.hasOne || definition.hasMany;\r\n            this.alias = definition.as || definition.alias || this.modelName;\r\n            this.mappedBy = definition.mappedBy || definition.foreignKey;\r\n            this.getOptions = definition.getOptions || function () { return new PreparedQueryOptions(); };\r\n\r\n            if (!this.modelName || !this.type || !this.mappedBy) {\r\n                $log.error('Association: The association definition is invalid', definition);\r\n                this.invalid = true;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Gets the Association's Model\r\n         * @returns {Object} The model\r\n         */\r\n        Association.prototype.getModel = function () {\r\n            var recallService = $injector.get('recall');\r\n            return recallService.getModel(this.modelName);\r\n        };\r\n\r\n        /**\r\n         * Expands the association and adds it to the entity\r\n         * @param {Entity} entity The entity to add the expanded association to\r\n         * @returns {promise}\r\n         */\r\n        Association.prototype.expand = function (entity) {\r\n            var dfd = $q.defer();\r\n            var self = this;\r\n            var Model = self.getModel();\r\n\r\n            if (!Model) {\r\n                return $q.reject('Association: Expand could not find the association\\'s Model');\r\n            }\r\n\r\n            var queryOptions = self.getOptions(entity);\r\n\r\n            if (self.type === 'hasOne') {\r\n\r\n                Model.adapter.findOne(Model, entity[self.mappedBy], queryOptions).then(function (response) {\r\n                    entity[self.alias] = Model.getRawModelObject(response.data);\r\n                    // TODO: The association should be an entity and should have transformResult called\r\n                    entity.$entity.storedState[self.alias] = Model.getRawModelObject(response.data);\r\n                    $log.debug(\"Association: Expand\", self.type, self.alias, entity, response);\r\n                    dfd.resolve();\r\n                }, function (e) {\r\n                    $log.error(\"Association: Expand\", self.type, self.alias, entity, e);\r\n                    dfd.reject(e);\r\n                });\r\n\r\n            } else if (self.type === 'hasMany') {\r\n\r\n                var predicate = new Predicate(self.mappedBy).equals(entity.$getPrimaryKey());\r\n                var existingPredicate = queryOptions.$filter();\r\n                if (existingPredicate) {\r\n                    predicate = Predicate.join([predicate, existingPredicate]);\r\n                }\r\n                queryOptions.$filter(predicate);\r\n\r\n                Model.adapter.find(Model, queryOptions).then(function (response) {\r\n                    var base = [];\r\n                    var stored = [];\r\n                    // TODO: The associations should be entities and should have transformResult called\r\n                    var i;\r\n                    for (i = 0; i < response.data.length; i++) {\r\n                        base.push(Model.getRawModelObject(response.data[i]));\r\n                        stored.push(Model.getRawModelObject(response.data[i]));\r\n                    }\r\n                    entity[self.alias] = base;\r\n                    entity.$entity.storedState[self.alias] = stored;\r\n                    $log.debug(\"Association: Expand\", self.type, self.alias, entity, response);\r\n                    dfd.resolve();\r\n                }, function (e) {\r\n                    $log.error(\"Association: Expand\", self.type, self.alias, entity, e);\r\n                    dfd.reject(e);\r\n                });\r\n            } else {\r\n                $log.error(\"Association: Expand Association type not supported\", self.type, self.alias, entity);\r\n                dfd.reject(\"Association type not supported\");\r\n            }\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        return Association;\r\n    }\r\n]);","angular.module('recall').factory(\"recallEntity\", [\r\n    '$log',\r\n    '$q',\r\n\r\n    function ($log, $q) {\r\n\r\n        /**\r\n         * An Entity is an object that represents an instance of a Model. The Entity instance exposes save and remove\r\n         * operations as well as dirty checking and validation.\r\n         *\r\n         * @param {Object} [object] The object to construct the entity from\r\n         * @param {Object} model The model that created the Entity\r\n         * @param {Boolean} [persisted = false] Set to true if this model was created from an object that came from an adapter.\r\n         * @constructor\r\n         */\r\n        var Entity = function (object, model, persisted) {\r\n            model.extendFromRawObject(this, object || {});\r\n\r\n            Object.defineProperty(this, \"$entity\", {value: {\r\n                lastDirtyCheck: new Date().getTime(),\r\n                lastDirtyState: false,\r\n                persisted: persisted === true,\r\n                saveInProgress: false,\r\n                storedState: null\r\n            }});\r\n            Object.defineProperty(this, \"$model\", {value: model});\r\n\r\n            this.$convertAssociationsToEntities();\r\n            this.$storeState();\r\n        };\r\n\r\n        /**\r\n         * Retrieves the Primary Key for the Entity.\r\n         * @returns {String|Number} The Primary Key\r\n         */\r\n        Entity.prototype.$getPrimaryKey = function () {\r\n            return this[this.$model.primaryKeyFieldName];\r\n        };\r\n\r\n        /**\r\n         *\r\n         */\r\n        Entity.prototype.$convertAssociationsToEntities = function () {\r\n            var i;\r\n            var alias;\r\n            var ForeignModel;\r\n            var a;\r\n            for (i = 0; i < this.$model.associations.length; i++) {\r\n                alias = this.$model.associations[i].alias;\r\n                ForeignModel = this.$model.associations[i].getModel();\r\n\r\n                if (this.$model.associations[i].type === 'hasOne') {\r\n                    if (this[alias] !== undefined && !this[alias].$entity) {\r\n                        this[alias] = new ForeignModel.Entity(this[alias], this.$entity.persisted);\r\n                    }\r\n                } else if (this.$model.associations[i].type === 'hasMany') {\r\n                    if (this[alias] !== undefined && this[alias] instanceof Array) {\r\n                        for (a = 0; a < this[alias].length; a++) {\r\n                            if (!this[alias][a].$entity) {\r\n                                this[alias][a] = new ForeignModel.Entity(this[alias][a], this.$entity.persisted);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Expands a given association on an Entity\r\n         *\r\n         * @param {String} associationName The alias of the association to expand\r\n         * @returns {promise}\r\n         */\r\n        Entity.prototype.$expand = function (associationName) {\r\n            var association = this.$model.getAssociationByAlias(associationName);\r\n\r\n            if (!association) {\r\n                return $q.reject('Entity: $expand could not find the association.');\r\n            }\r\n\r\n            return association.expand(this);\r\n        };\r\n\r\n        /**\r\n         * Validates an entity against the model's field definition.\r\n         * @returns {Boolean} True if the model validation succeeds\r\n         */\r\n        Entity.prototype.$isValid = function () {\r\n            // TODO: This does not validate associations\r\n            var field;\r\n            var matchesType = false;\r\n            var fieldIsUndefined;\r\n            for (field in this.$model.fields) {\r\n                if (this.$model.fields.hasOwnProperty(field)) {\r\n                    fieldIsUndefined = (this[field] === null || this[field] === undefined);\r\n                    if (this.$model.fields[field].notNull === true && fieldIsUndefined) {\r\n                        $log.debug(\"Entity: $isValid returned false\", \"NotNull field was null\", field, this);\r\n                        return false;\r\n                    }\r\n                    switch (this.$model.fields[field].type) {\r\n                        case 'STRING':\r\n                            matchesType = typeof this[field] === 'string';\r\n                            break;\r\n                        case 'NUMBER':\r\n                            matchesType = typeof this[field] === 'number';\r\n                            break;\r\n                        case 'BOOLEAN':\r\n                            matchesType = this[field] === true || this[field] === false;\r\n                            break;\r\n                        case 'DATE':\r\n                            matchesType = this[field] instanceof Date || !isNaN(Date.parse(this[field]));\r\n                            break;\r\n                    }\r\n                    if (!matchesType && !fieldIsUndefined) {\r\n                        $log.debug(\"Entity: $isValid returned false\", field + \" was not a \" + this.$model.fields[field].type, this);\r\n                        return false;\r\n                    }\r\n                    if (typeof this.$model.fields[field].validate === \"function\" && !this.$model.fields[field].validate(this[field])) {\r\n                        $log.debug(\"Entity: $isValid returned false\", \"Custom validator failed\", field, this);\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n\r\n        /**\r\n         * Persists the model with the adapter. This will update the model if it exists in the adapter or create\r\n         * the model if it does not exist.\r\n         *\r\n         * @method $save\r\n         * @param {PreparedQueryOptions} queryOptions\r\n         * @returns {promise} Resolves with the model\r\n         */\r\n        Entity.prototype.$save = function (queryOptions) {\r\n            var dfd = $q.defer();\r\n            var self = this;\r\n\r\n            if (!self.$isValid()) {\r\n                $log.warn(\"Entity: $save: aborted\", self, self[self.$model.primaryKeyFieldName]);\r\n                self.$reset();\r\n                return $q.reject(\"aborted\");\r\n            }\r\n\r\n            self.$entity.saveInProgress = true;\r\n            var itemToSave = self.$model.preSave(self);\r\n\r\n            var updateSavedState = function (entity, succeeded) {\r\n                entity.$entity.saveInProgress = false;\r\n                if (succeeded !== false) {\r\n                    entity.$storeState();\r\n                    entity.$entity.persisted = true;\r\n                } else {\r\n                    entity.$reset();\r\n                }\r\n            };\r\n\r\n            // The model exists in the DB\r\n            if (self.$entity.persisted && itemToSave[self.$model.primaryKeyFieldName]) {\r\n                itemToSave = self.$model.preUpdate(itemToSave);\r\n\r\n                var pk = itemToSave[self.$model.primaryKeyFieldName];\r\n                self.$model.adapter.update(self.$model, pk, itemToSave, queryOptions).then(function (response) {\r\n                    var result = self.$model.transformResult(response.data);\r\n                    self.$model.extendFromRawObject(self, result);\r\n                    updateSavedState(self, true);\r\n                    $log.debug(\"Entity: $save: update\", self, itemToSave, response);\r\n                    dfd.resolve(self);\r\n                }, function (e) {\r\n                    updateSavedState(self, false);\r\n                    $log.error(\"Entity: $save: update\", self, itemToSave, e);\r\n                    dfd.reject(e);\r\n                });\r\n            } else {\r\n                // The model is new\r\n                itemToSave = self.$model.preCreate(itemToSave);\r\n                self.$model.adapter.create(self.$model, itemToSave, queryOptions).then(function (response) {\r\n                    var result = self.$model.transformResult(response.data);\r\n                    self.$model.extendFromRawObject(self, result);\r\n                    updateSavedState(self, true);\r\n                    $log.debug(\"Entity: $save: create\", self, itemToSave, response);\r\n                    dfd.resolve(self);\r\n                }, function (e) {\r\n                    updateSavedState(self, false);\r\n                    $log.error(\"Entity: $save: create\", self, itemToSave, e);\r\n                    dfd.reject(e);\r\n                });\r\n            }\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        /**\r\n         * Removes the model from the adapter.\r\n         *\r\n         * @method $remove\r\n         * @param {PreparedQueryOptions} queryOptions\r\n         * @returns {promise}\r\n         */\r\n        Entity.prototype.$remove = function (queryOptions) {\r\n            if (this[this.$model.primaryKeyFieldName]) {\r\n                return this.$model.adapter.remove(this.$model, this[this.$model.primaryKeyFieldName], queryOptions);\r\n            }\r\n            $log.error('Entity: $remove', 'The primary key was not found');\r\n            return $q.reject(\"The primary key was not found.\");\r\n        };\r\n\r\n        /**\r\n         * Stores the model's state so that it can later be reset to the state if needed. This is called\r\n         * on $save so that the model's state is always at the latest save point.\r\n         *\r\n         * @method $storeState\r\n         */\r\n        Entity.prototype.$storeState = function () {\r\n            this.$entity.storedState = this.$model.getRawModelObject(this, false);\r\n            this.$entity.lastDirtyCheck = new Date().getTime();\r\n            this.$entity.lastDirtyState = false;\r\n        };\r\n\r\n        /**\r\n         * Checks to see if the properties have diverged from the stored state. If so, this means that\r\n         * the properties have been changed and have not been saved.\r\n         *\r\n         * @method $isDirty\r\n         * @returns {Boolean} True if the properties are different than what is in the stored state.\r\n         */\r\n        Entity.prototype.$isDirty = function () {\r\n            if (this.$entity.saveInProgress) {\r\n                return false;\r\n            }\r\n\r\n            if (!this.$entity.storedState) {\r\n                return false;\r\n            }\r\n\r\n            var now = new Date().getTime();\r\n            var delta = now - this.$entity.lastDirtyCheck;\r\n            if (this.$entity.lastDirtyCheck && delta < this.$model.dirtyCheckThreshold) {\r\n                return this.$entity.lastDirtyState;\r\n            }\r\n\r\n            this.$entity.lastDirtyCheck = new Date().getTime();\r\n\r\n            // TODO: This does not dirty check associations\r\n            var field;\r\n            var viewValue;\r\n            var storedValue;\r\n            for (field in this.$model.fields) {\r\n                if (this.$model.fields.hasOwnProperty(field)) {\r\n                    storedValue = this.$entity.storedState[field];\r\n                    viewValue = this[field];\r\n\r\n                    if (storedValue !== viewValue) {\r\n                        $log.debug(\"Entity: $isDirty\", this[this.$model.primaryKeyFieldName], true, delta);\r\n                        this.$entity.lastDirtyState = true;\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            $log.debug(\"Entity: $isDirty\", this[this.$model.primaryKeyFieldName], false, delta);\r\n            this.$entity.lastDirtyState = false;\r\n            return false;\r\n        };\r\n\r\n        /**\r\n         * Resets a model back to its stored state. This will reset any pending changes back to the\r\n         * entities last save or initial retrieval.\r\n         *\r\n         * @method $reset\r\n         * @returns {Array} A list of the changed field names and their before and after values\r\n         */\r\n        Entity.prototype.$reset = function () {\r\n            if (!this.$entity.storedState) {\r\n                this.$storeState();\r\n                return [];\r\n            }\r\n\r\n            var prop;\r\n            var changedProperties = [];\r\n\r\n            for (prop in this.$entity.storedState) {\r\n                if (this.$entity.storedState.hasOwnProperty(prop) && this[prop] !== this.$entity.storedState[prop]) {\r\n                    changedProperties.push({\r\n                        name: prop,\r\n                        before: this[prop],\r\n                        after: this.$entity.storedState[prop]\r\n                    });\r\n                    this[prop] = this.$entity.storedState[prop];\r\n                }\r\n            }\r\n\r\n            this.$entity.lastDirtyState = false;\r\n            this.$entity.lastDirtyCheck = new Date().getTime();\r\n\r\n            $log.debug(\"Entity: $reset\", this[this.$model.primaryKeyFieldName], changedProperties);\r\n            return changedProperties;\r\n        };\r\n\r\n        return Entity;\r\n    }\r\n]);","angular.module('recall').factory('recallLocalStorage', [\r\n    '$document',\r\n    '$window',\r\n\r\n    function ($document, $window) {\r\n\r\n        /**\r\n         * The localStorage utility helps manage the storage and retrieval of registered application data.\r\n         */\r\n        var storage = {\r\n            keys: {\r\n                LAST_SYNC: 'LAST_SYNC'\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Checks if the key is registered with the class.\r\n         *\r\n         * @param {String} key\r\n         * @returns {Boolean} True if the key exists\r\n         */\r\n        var keyExists = function (key) {\r\n            return storage.keys[key] !== undefined;\r\n        };\r\n\r\n        /**\r\n         * Appends a modifier to a key\r\n         * @param {String} key\r\n         * @param {String} modifier\r\n         * @returns {String} The key with the modifier appended.\r\n         */\r\n        var addKeyModifier = function (key, modifier) {\r\n            if (modifier) {\r\n                key += \"_\" + modifier;\r\n            }\r\n            return key;\r\n        };\r\n\r\n        /**\r\n         * Register a new key with the local storage service.\r\n         * @param {String} key\r\n         */\r\n        storage.registerKey = function (key) {\r\n            if (!keyExists(key)) {\r\n                storage.keys[key] = key;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Stores data by key in local browser storage.\r\n         *\r\n         * @param {String} key The key to use as the local storage name. Must be a key found in localStorage.keys.\r\n         * @param {String} value The string value to store.\r\n         * @param {String} keyModifier An additional identifier on the key.\r\n         */\r\n        storage.set = function (key, value, keyModifier) {\r\n            if (keyExists(key)) {\r\n                key = addKeyModifier(key, keyModifier);\r\n                if (storage.supportsLocalStorage()) {\r\n                    $window.localStorage.setItem(key, value);\r\n                } else {\r\n                    var life = 60 * 60 * 24 * 5;\r\n                    var v = encodeURIComponent(value);\r\n                    $document.cookie = key + '=' + v + '; max-age=' + life + ';';\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Retrieves stored data by key.\r\n         *\r\n         * @param {String} key The key of the data to retrieve. Must be a key found in localStorage.keys.\r\n         * @param {String} keyModifier An additional identifier on the key.\r\n         * @return {String} The string value stored.\r\n         */\r\n        storage.get = function (key, keyModifier) {\r\n            var value = \"\";\r\n\r\n            if (keyExists(key)) {\r\n                key = addKeyModifier(key, keyModifier);\r\n                if (storage.supportsLocalStorage()) {\r\n                    value = $window.localStorage.getItem(key) || \"\";\r\n                } else {\r\n                    var regexp = new RegExp(key + \"=([^;]+)\", \"g\");\r\n                    var c = regexp.exec($document.cookie);\r\n\r\n                    if (c) {\r\n                        value = decodeURIComponent(c[1]) ;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return value;\r\n        };\r\n\r\n        /**\r\n         * Removes stored data by key.\r\n         *\r\n         * @param {String} key The key of the data to remove. Must be a key found in localStorage.keys.\r\n         * @param {String} keyModifier An additional identifier on the key.\r\n         */\r\n        storage.remove = function (key, keyModifier) {\r\n            if (keyExists(key)) {\r\n                key = addKeyModifier(key, keyModifier);\r\n                if (storage.supportsLocalStorage()) {\r\n                    $window.localStorage.removeItem(key);\r\n                } else {\r\n                    $document.cookie = key + '=; max-age=0;';\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Checks if the browser supports html5 local storage.\r\n         *\r\n         * @private\r\n         * @returns {Boolean} True if the browser does support html5 local storage.\r\n         */\r\n        storage.supportsLocalStorage = function () {\r\n            try {\r\n                return 'localStorage' in $window && $window.localStorage !== null;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        };\r\n\r\n        return storage;\r\n    }\r\n]);","angular.module('recall').factory(\"recallModel\", [\r\n    '$log',\r\n    '$q',\r\n    'recallAssociation',\r\n    'recallEntity',\r\n    'recallModelField',\r\n\r\n    function ($log,\r\n              $q,\r\n              Association,\r\n              Entity,\r\n              ModelField) {\r\n\r\n        // Bubbles an error promise to the top.\r\n        var propagateError = function (e) {\r\n            return $q.reject(e);\r\n        };\r\n\r\n        /**\r\n         * A Model is in charge of defining a structure for a type of Entity. The model provides CRUD operations for\r\n         * that type of Entity as well as some other utility functions.\r\n         *\r\n         * Models should not be created directly. Instead, the recall service should be used as a proxy for creating\r\n         * models.\r\n         *\r\n         * @constructor\r\n         */\r\n        var Model = function (modelDefinition) {\r\n            this.modelName = modelDefinition.name;\r\n            this.dataSourceName = modelDefinition.dataSourceName || modelDefinition.name;\r\n\r\n            // Add the model definition to the Model as read only\r\n            Object.defineProperty(this, \"modelDefinition\", {value: modelDefinition, writable: false});\r\n\r\n            // Add a Constructor method to the Model for constructing new Entities from the Model: new Model.Entity();\r\n            var self = this;\r\n            Object.defineProperty(this, \"Entity\", {writable: false, configurable: false, value: function (obj, persisted) {\r\n                return( new Entity(obj, self, persisted === true) );\r\n            }});\r\n\r\n            this.fields = {};\r\n            this.associations = [];\r\n\r\n            this.dirtyCheckThreshold = 30;\r\n\r\n            this.primaryKeyFieldName = null;\r\n            this.lastModifiedFieldName = null;\r\n            this.deletedFieldName = null;\r\n            this.adapter = null;\r\n        };\r\n\r\n        Model.prototype.setLastModifiedFieldName = function (lastModifiedFieldName) {\r\n            this.lastModifiedFieldName = lastModifiedFieldName;\r\n        };\r\n\r\n        Model.prototype.setDeletedFieldName = function (deletedFieldName) {\r\n            this.deletedFieldName = deletedFieldName;\r\n        };\r\n\r\n        Model.prototype.setAdapter = function (adapter) {\r\n            this.adapter = adapter;\r\n        };\r\n\r\n        Model.prototype.setDirtyCheckThreshold = function (dirtyCheckThreshold) {\r\n            this.dirtyCheckThreshold = dirtyCheckThreshold;\r\n        };\r\n\r\n        // Initializes the fields using the common ModelField class\r\n        Model.prototype.initializeModelFields = function () {\r\n            var modelDefinitionFields = this.modelDefinition.fields;\r\n            var field;\r\n            var modelField;\r\n            var lastModifiedField;\r\n            var deletedField;\r\n            for (field in modelDefinitionFields) {\r\n                if (modelDefinitionFields.hasOwnProperty(field)) {\r\n                    modelField = new ModelField(field, modelDefinitionFields[field]);\r\n\r\n                    if (modelField.primaryKey) {\r\n                        this.primaryKeyFieldName = field;\r\n                    }\r\n\r\n                    if (modelField.invalid) {\r\n                        return false;\r\n                    } else {\r\n                        this.fields[field] = modelField;\r\n                    }\r\n\r\n                    if (field === this.lastModifiedFieldName) {\r\n                        lastModifiedField = modelField;\r\n                    }\r\n\r\n                    if (field === this.deletedFieldName) {\r\n                        deletedField = field;\r\n                    }\r\n                }\r\n            }\r\n            if (lastModifiedField && lastModifiedField.type !== \"DATE\") {\r\n                $log.error('Model: The last modified field is not a Date field');\r\n                return false;\r\n            }\r\n            if (this.lastModifiedFieldName && !lastModifiedField) {\r\n                this.fields[this.lastModifiedFieldName] = new ModelField(this.lastModifiedFieldName, {\r\n                    type: \"DATE\",\r\n                    index: true,\r\n                    getDefaultValue: function () {\r\n                        return new Date().toISOString();\r\n                    }\r\n                });\r\n            }\r\n            if (deletedField && deletedField.type !== \"BOOLEAN\") {\r\n                $log.error('Model: The deletedField field is not a Boolean field');\r\n                return false;\r\n            }\r\n            if (this.deletedFieldName && !deletedField) {\r\n                this.fields[this.deletedFieldName] = new ModelField(this.deletedFieldName, {\r\n                    type: \"BOOLEAN\",\r\n                    index: true,\r\n                    getDefaultValue: function () {\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n            return true;\r\n        };\r\n\r\n        // TODO: Support many to many associations\r\n        // Initialize the Model associations using the HasOneAssociation and HasManyAssociation classes\r\n        Model.prototype.initializeAssociations = function () {\r\n            var modelDefinitionAssociations = this.modelDefinition.associations;\r\n            if (!modelDefinitionAssociations) {\r\n                return;\r\n            }\r\n            var i;\r\n            var association;\r\n            for (i = 0; i < modelDefinitionAssociations.length; i++) {\r\n                association = new Association(modelDefinitionAssociations[i]);\r\n\r\n                if (association && !association.invalid) {\r\n                    if (association.type === 'hasOne') {\r\n                        if (!this.fields[association.mappedBy]) {\r\n                            // If no field is defined for the foreign key, define one assuming the same foreign key type.\r\n                            this.fields[association.mappedBy] = new ModelField(association.mappedBy, {\r\n                                type: this.fields[this.primaryKeyFieldName].type,\r\n                                index: association.mappedBy\r\n                            });\r\n                        } else {\r\n                            this.fields[association.mappedBy].index = association.mappedBy;\r\n                        }\r\n                    }\r\n\r\n                    this.associations.push(association);\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Gets a Model Association by the alias name. The alias is defined as the \"as\" property on an alias if\r\n         * defined and falls back to the model name if \"as\" is not defined.\r\n         *\r\n         * @param {String} alias The association's alias\r\n         * @returns {Object} The association object\r\n         */\r\n        Model.prototype.getAssociationByAlias = function (alias) {\r\n            var i;\r\n            for (i = 0; i < this.associations.length; i++) {\r\n                if (this.associations[i].alias === alias) {\r\n                    return this.associations[i];\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Extends an entity with a raw object. The raw object could be input from a controller or the result from\r\n         * an adapter.\r\n         *\r\n         * @param {Object} entity The entity to extend\r\n         * @param {Object} rawObject The object to extend from.\r\n         */\r\n        Model.prototype.extendFromRawObject = function (entity, rawObject) {\r\n            angular.extend(entity, this.getRawModelObject(rawObject));\r\n        };\r\n\r\n        /**\r\n         * Gets a raw representation of the model object to be used in adapter transactions. This returns an object\r\n         * in which only the Model defined fields are set. This also looks through expanded associations to set the\r\n         * foreignKey field for one to n associations and sets the association to the raw association object.\r\n         *\r\n         * @param {Object} modelEntity\r\n         * @param {Boolean} [includeExpandedAssociations = true] Include the expanded association in the raw object.\r\n         * @returns {Object} The raw object\r\n         */\r\n        Model.prototype.getRawModelObject = function (modelEntity, includeExpandedAssociations) {\r\n            var object = {};\r\n            var field;\r\n            for (field in this.fields) {\r\n                if (this.fields.hasOwnProperty(field)) {\r\n                    object[field] = modelEntity[field];\r\n                }\r\n            }\r\n            var i;\r\n            var alias;\r\n            var foreignKey;\r\n            var ForeignModel;\r\n            var a;\r\n            for (i = 0; i < this.associations.length; i++) {\r\n                alias = this.associations[i].alias;\r\n                ForeignModel = this.associations[i].getModel();\r\n\r\n                if (this.associations[i].type === 'hasOne') {\r\n                    if (modelEntity[alias] !== undefined) {\r\n                        foreignKey = modelEntity[alias][ForeignModel.primaryKeyFieldName];\r\n                        object[this.associations[i].mappedBy] = foreignKey;\r\n\r\n                        if (includeExpandedAssociations !== false) {\r\n                            object[alias] = ForeignModel.getRawModelObject(modelEntity[alias]);\r\n                        }\r\n                    }\r\n                } else if (this.associations[i].type === 'hasMany' && includeExpandedAssociations !== false) {\r\n                    if (modelEntity[alias] !== undefined && modelEntity[alias] instanceof Array) {\r\n                        object[alias] = [];\r\n                        for (a = 0; a < modelEntity[alias].length; a++) {\r\n                            object[alias].push(ForeignModel.getRawModelObject(modelEntity[alias][a]));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Applies the default values on any undefined field in an entity.\r\n         *\r\n         * @param {Object} entity The entity to set the default values on\r\n         */\r\n        Model.prototype.applyDefaultValues = function (entity) {\r\n            var field;\r\n            for (field in this.fields) {\r\n                if (this.fields.hasOwnProperty(field)) {\r\n                    if (typeof this.fields[field].getDefaultValue === 'function' && entity[field] === undefined) {\r\n                        entity[field] = this.fields[field].getDefaultValue(entity);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Transforms all objects returned by adapter transactions. This calls the transformResult function defined\r\n         * in the model. This also recursively calls transformResult on all associations.\r\n         *\r\n         * @method transformResult\r\n         * @param {Object} resultEntity\r\n         * @returns {Object} The transformed result\r\n         */\r\n        Model.prototype.transformResult = function (resultEntity) {\r\n            var i;\r\n            var alias;\r\n            var ForeignModel;\r\n            var a;\r\n            for (i = 0; i < this.associations.length; i++) {\r\n                alias = this.associations[i].alias;\r\n                ForeignModel = this.associations[i].getModel();\r\n\r\n                if (this.associations[i].type === 'hasOne') {\r\n                    if (resultEntity[alias] !== undefined) {\r\n                        resultEntity[alias] = ForeignModel.transformResult(resultEntity[alias]);\r\n                    }\r\n                } else if (this.associations[i].type === 'hasMany') {\r\n                    if (resultEntity[alias] !== undefined && resultEntity[alias] instanceof Array) {\r\n                        for (a = 0; a < resultEntity[alias].length; a++) {\r\n                            resultEntity[alias][a] = ForeignModel.transformResult(resultEntity[alias][a]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            resultEntity = this.getRawModelObject(resultEntity);\r\n            if (typeof this.modelDefinition.transformResult === 'function') {\r\n                resultEntity = this.modelDefinition.transformResult(resultEntity);\r\n            }\r\n            return resultEntity;\r\n        };\r\n\r\n        /**\r\n         * Ran before the create and update adapter transactions. This calls the preSave function defined in the\r\n         * model.\r\n         *\r\n         * @method preSave\r\n         * @param {Object} entity\r\n         * @returns {Object} The raw transformed entity\r\n         */\r\n        Model.prototype.preSave = function (entity) {\r\n            entity = this.getRawModelObject(entity);\r\n            if (typeof this.modelDefinition.preSave === 'function') {\r\n                return this.modelDefinition.preSave(entity);\r\n            }\r\n            return entity;\r\n        };\r\n\r\n        /**\r\n         * Ran before the create adapter transaction. This applies the default values to any undefined fields and\r\n         * then calls the preCreate function defined in the model.\r\n         *\r\n         * @method preCreate\r\n         * @param {Object} rawEntity\r\n         * @returns {Object} The raw transformed entity\r\n         */\r\n        Model.prototype.preCreate = function (rawEntity) {\r\n            this.applyDefaultValues(rawEntity);\r\n            if (typeof this.modelDefinition.preCreate === 'function') {\r\n                return this.modelDefinition.preCreate(rawEntity);\r\n            }\r\n            return rawEntity;\r\n        };\r\n\r\n        /**\r\n         * Ran before the update adapter transaction. This calls the preUpdate function defined in the model.\r\n         *\r\n         * @method preUpdate\r\n         * @param {Object} rawEntity\r\n         * @returns {Object} The raw transformed entity\r\n         */\r\n        Model.prototype.preUpdate = function (rawEntity) {\r\n            if (typeof this.modelDefinition.preUpdate === 'function') {\r\n                return this.modelDefinition.preUpdate(rawEntity);\r\n            }\r\n            return rawEntity;\r\n        };\r\n\r\n        /**\r\n         * Retrieves a single model from the adapter given a primary key. Query options can be passed to determine\r\n         * select and expand operations.\r\n         *\r\n         * @method findOne\r\n         * @param {String} pk The primary key of the model to retrieve\r\n         * @param {Object} [queryOptions] Query options to use for retrieval\r\n         * @returns {promise} Resolves with the Entity\r\n         */\r\n        Model.prototype.findOne = function (pk, queryOptions) {\r\n            var self = this;\r\n            if (!pk) {\r\n                $log.error('Model: FindOne', 'The primary key was not supplied');\r\n                return $q.reject(\"The primary key was not supplied.\");\r\n            }\r\n\r\n            return this.adapter.findOne(this, pk, queryOptions).then(function (response) {\r\n                var result = self.transformResult(response.data);\r\n                var entity = new Entity(result, self, true);\r\n                $log.debug(\"Model: FindOne\", entity, response, queryOptions);\r\n                return entity;\r\n            }, propagateError);\r\n        };\r\n\r\n        /**\r\n         * Retrieves a list of models from the adapter. Query options can be passed to determine top, skip, order by,\r\n         * select, expand, and filter operations.\r\n         *\r\n         * @method find\r\n         * @param {Object} [queryOptions] Query options to use for retrieval\r\n         * @returns {promise} Resolves with data.results and data.totalCount where results are Entities\r\n         */\r\n        Model.prototype.find = function (queryOptions) {\r\n            var self = this;\r\n            return this.adapter.find(this, queryOptions).then(function (response) {\r\n                var results = [];\r\n                var i;\r\n                for (i = 0; i < response.data.length; i++) {\r\n                    results.push(new Entity(self.transformResult(response.data[i]), self, true));\r\n                }\r\n\r\n                var clientResponse = {\r\n                    results: results,\r\n                    totalCount: response.count\r\n                };\r\n                $log.debug(\"Model: Find\", clientResponse, response, queryOptions);\r\n                return clientResponse;\r\n            }, propagateError);\r\n        };\r\n\r\n        /**\r\n         * Removes the model from the adapter given a primary key.\r\n         *\r\n         * @method remove\r\n         * @param {String} pk The primary key of the model to remove\r\n         * @param {Object} [queryOptions] Query options\r\n         * @returns {promise}\r\n         */\r\n        Model.prototype.remove = function (pk, queryOptions) {\r\n            if (!pk) {\r\n                $log.error('Model: Remove', 'The primary key was not supplied');\r\n                return $q.reject(\"The primary key was not supplied.\");\r\n            }\r\n            return this.adapter.remove(this, pk, queryOptions);\r\n        };\r\n\r\n        return Model;\r\n    }\r\n]);","angular.module('recall').factory(\"recallModelField\", [\r\n    '$log',\r\n\r\n    function ($log) {\r\n\r\n        /**\r\n         * Model Field class to make all model fields consistent\r\n         * @param {String} name\r\n         * @param {Object | String} definition The Field Definition or the Field Type\r\n         * @constructor\r\n         */\r\n        var ModelField = function (name, definition) {\r\n            this.invalid = false;\r\n            this.name = name;\r\n\r\n            this.primaryKey = false;\r\n            this.unique = false;\r\n            this.index = false;\r\n            this.notNull = false;\r\n\r\n            if (typeof definition === 'string') {\r\n                this.type = definition.toUpperCase();\r\n            } else if (definition.primaryKey === true) {\r\n                asPrimaryKey(this, definition);\r\n            } else {\r\n                fromDefinition(this, definition);\r\n            }\r\n\r\n            if (!this.validateField()) {\r\n                $log.error('ModelField: The field definition is invalid', this, definition);\r\n            }\r\n        };\r\n\r\n        ModelField.prototype.validateField = function () {\r\n            if (!this.name || !this.type) {\r\n                this.invalid = true;\r\n                return false;\r\n            }\r\n            if (this.name.match(/[^\\w+]/) !== null) {\r\n                this.invalid = true;\r\n                return false;\r\n            }\r\n            this.invalid = false;\r\n            return true;\r\n        };\r\n\r\n        var asPrimaryKey = function (field, definition) {\r\n            // The adapter or the adapter's handler should enforce uniqueness of the primary key.\r\n            // The index on the primary key should be handled automatically without needing to specify an index.\r\n            // In order to pass validation during creation, the primary key should not be set as notNull.\r\n            // This of course should be enforced by the adapter or the adapter's handler.\r\n            field.primaryKey = true;\r\n            field.type = definition.type ? definition.type.toUpperCase() : null;\r\n            field.notNull = false;\r\n            field.unique = false;\r\n            field.index = false;\r\n\r\n            if (typeof definition.getDefaultValue === 'function') {\r\n                $log.warn('ModelField: getDefaultValue is ignored for the primary key');\r\n            }\r\n            if (typeof definition.validate === 'function') {\r\n                $log.warn('ModelField: validate is ignored for the primary key');\r\n            }\r\n        };\r\n\r\n        var fromDefinition = function (field, definition) {\r\n            field.type = definition.type ? definition.type.toUpperCase() : null;\r\n            field.unique = definition.unique === true;\r\n            field.index = (typeof definition.index === 'string') ? definition.index : (definition.index === true) ? field.name : false;\r\n            field.notNull = definition.notNull === true;\r\n\r\n            if (typeof definition.getDefaultValue === 'function') {\r\n                field.getDefaultValue = definition.getDefaultValue;\r\n            }\r\n            if (typeof definition.validate === 'function') {\r\n                field.validate = definition.validate;\r\n            }\r\n        };\r\n\r\n        return ModelField;\r\n    }\r\n]);","// Date.toISOString polyfill: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\r\nif (!Date.prototype.toISOString) {\r\n    (function () {\r\n\r\n        function pad(number) {\r\n            if (number < 10) {\r\n                return '0' + number;\r\n            }\r\n            return number;\r\n        }\r\n\r\n        Date.prototype.toISOString = function () {\r\n            return this.getUTCFullYear() +\r\n                '-' + pad(this.getUTCMonth() + 1) +\r\n                '-' + pad(this.getUTCDate()) +\r\n                'T' + pad(this.getUTCHours()) +\r\n                ':' + pad(this.getUTCMinutes()) +\r\n                ':' + pad(this.getUTCSeconds()) +\r\n                '.' + (this.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +\r\n                'Z';\r\n        };\r\n    }());\r\n}","angular.module('recall').factory('recallPredicate', [\r\n    function () {\r\n        /*\r\n         * BASED ON:\r\n         * Predicate\r\n         * version: 1.1.2\r\n         * author: David Hamilton\r\n         * license: https://github.com/nova706/PreparedQueryOptions/blob/master/LICENSE.txt (MIT)\r\n         * https://github.com/nova706/PreparedQueryOptions\r\n         *\r\n         */\r\n\r\n        /**\r\n         * A predicate is used for the $filter operator in a query. Predicates can be joined to query\r\n         * using a group of filters with the 'and' operator.\r\n         *\r\n         * This is a helper class for the PreparedQueryOptions class to assist in building complex\r\n         * filter clauses.\r\n         *\r\n         * @class Predicate\r\n         * @constructor\r\n         * @param {String} [property] The property to filter by.\r\n         * @param {Function} [parser] A function that returns the predicate string.\r\n         */\r\n        function Predicate(property, parser) {\r\n            this.property = property;\r\n            this.parser = parser;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Joins a provided set of predicates using the group operator and returns a new Predicate\r\n         *\r\n         * @method join\r\n         * @param {Predicate[]} predicates Array of predicates to join.\r\n         * @param {String} [groupOperator] The operator for the filter set ('and' 'or').\r\n         * @return {Predicate} Predicate object.\r\n         */\r\n        Predicate.join = function (predicates, groupOperator) {\r\n            if (predicates instanceof Array && predicates.length > 0) {\r\n                return new Predicate().join(predicates, groupOperator);\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Sets the property of a predicate\r\n         *\r\n         * @method setProperty\r\n         * @param {String} property\r\n         * @return {Predicate} Predicate object.\r\n         */\r\n        Predicate.prototype.setProperty = function (property) {\r\n            this.property = property;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operator to 'eq' and the value to the input parameter\r\n         *\r\n         * @method equals\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.equals = function (value) {\r\n            this.parser = function () {\r\n                return this.property + ' eq ' + escapeValue(value);\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operator to 'ne' and the value to the input parameter\r\n         *\r\n         * @method notEqualTo\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.notEqualTo = function (value) {\r\n            this.parser = function () {\r\n                return this.property + ' ne ' +  escapeValue(value);\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operator to 'gt' and the value to the input parameter\r\n         *\r\n         * @method greaterThan\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.greaterThan = function (value) {\r\n            this.parser = function () {\r\n                return this.property + ' gt ' +  escapeValue(value);\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operator to 'ge' and the value to the input parameter\r\n         *\r\n         * @method greaterThanOrEqualTo\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.greaterThanOrEqualTo = function (value) {\r\n            this.parser = function () {\r\n                return this.property + ' ge ' +  escapeValue(value);\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operator to 'lt' and the value to the input parameter\r\n         *\r\n         * @method lessThan\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.lessThan = function (value) {\r\n            this.parser = function () {\r\n                return this.property + ' lt ' +  escapeValue(value);\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operator to 'le' and the value to the input parameter\r\n         *\r\n         * @method lessThanOrEqualTo\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.lessThanOrEqualTo = function (value) {\r\n            this.parser = function () {\r\n                return this.property + ' le ' +  escapeValue(value);\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operation to substringof and the value to the input parameter\r\n         *\r\n         * @method contains\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.contains = function (value) {\r\n            this.parser = function () {\r\n                return 'substringof(' +  escapeValue(value) + ', ' + this.property + ')';\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operation to startswith and the value to the input parameter\r\n         *\r\n         * @method startsWith\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.startsWith = function (value) {\r\n            this.parser = function () {\r\n                return 'startswith(' + this.property + ', ' +  escapeValue(value) + ')';\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operation to endswith and the value to the input parameter\r\n         *\r\n         * @method startsWith\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.endsWith = function (value) {\r\n            this.parser = function () {\r\n                return 'endswith(' + this.property + ', ' +  escapeValue(value) + ')';\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Joins an existing predicate with additional predicates using the group operator\r\n         *\r\n         * @method join\r\n         * @param {Predicate|Predicate[]} predicates A single predicate or an array of predicates to join to the existing one.\r\n         * @param {String} [groupOperator] The operator for the filter set ('and' 'or').\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.join = function (predicates, groupOperator) {\r\n            var initialPredicate;\r\n\r\n            if (this.property && typeof this.parser === 'function') {\r\n                initialPredicate = new Predicate(this.property, this.parser);\r\n            }\r\n\r\n            var newPredicates = [];\r\n            if (predicates instanceof Predicate) {\r\n                newPredicates.push(predicates);\r\n            } else if (predicates instanceof Array && predicates.length > 0) {\r\n                var i;\r\n                for (i = 0; i < predicates.length; i++) {\r\n                    if (predicates[i]) {\r\n                        newPredicates.push(predicates[i]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (newPredicates.length > 0) {\r\n                delete this.parser;\r\n                delete this.property;\r\n\r\n                this.joinedPredicates = (this.joinedPredicates) ? this.joinedPredicates.concat(newPredicates) : newPredicates;\r\n                if (groupOperator || !this.groupOperator) {\r\n                    this.groupOperator = (groupOperator === 'or') ? 'or' : 'and';\r\n                }\r\n                if (initialPredicate) {\r\n                    this.joinedPredicates.unshift(initialPredicate);\r\n                }\r\n            }\r\n\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Joins an existing predicate with additional predicates using the 'and' group operator\r\n         *\r\n         * @method and\r\n         * @param {Predicate|Predicate[]} predicates A single predicate or an array of predicates to join to the existing one.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.and = function (predicates) {\r\n            return this.join(predicates, 'and');\r\n        };\r\n\r\n        /**\r\n         * Joins an existing predicate with additional predicates using the 'or' group operator\r\n         *\r\n         * @method or\r\n         * @param {Predicate|Predicate[]} predicates A single predicate or an array of predicates to join to the existing one.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.or = function (predicates) {\r\n            return this.join(predicates, 'or');\r\n        };\r\n\r\n        /**\r\n         * Evaluate an object to see if it matches the predicate filter conditions.\r\n         *\r\n         * @method test\r\n         * @param {Object} object The object to test against the predicate.\r\n         * @param {Boolean} [failOnMissingAssociation=true] Should the test fail when the a filter is performed against an expanded association that is not present\r\n         * @return {Boolean} True if the object matches the filter conditions.\r\n         */\r\n        Predicate.prototype.test = function (object, failOnMissingAssociation) {\r\n            return testPredicate(this, object, failOnMissingAssociation);\r\n        };\r\n\r\n        /**\r\n         * Builds and returns a URL parameter string based on the predicate.\r\n         *\r\n         * @method parsePredicate\r\n         * @param {Boolean} [nested = false] Used for building the nested group during recursion\r\n         * @returns {String}\r\n         */\r\n        Predicate.prototype.parsePredicate = function (nested) {\r\n            nested = (nested === true);\r\n            var urlString = '';\r\n\r\n            if (this.property && typeof this.parser === 'function') {\r\n                return this.parser();\r\n            }\r\n\r\n            if (this.joinedPredicates && this.joinedPredicates.length > 0) {\r\n                var i;\r\n                var predicate;\r\n                var predicateString;\r\n                for (i = 0; i < this.joinedPredicates.length; i++) {\r\n                    predicate = this.joinedPredicates[i];\r\n                    predicateString = predicate.parsePredicate(true);\r\n                    urlString += (i > 0) ? ' ' + this.groupOperator + ' ' + predicateString : predicateString;\r\n                }\r\n            }\r\n\r\n            return nested ? '(' + urlString + ')' : urlString;\r\n        };\r\n\r\n        /**\r\n         * Creates a predicate structure from a string\r\n         *\r\n         * @method fromString\r\n         * @param {String} predicateString\r\n         * @return {Predicate|null} null if the predicate could not be built from the string\r\n         */\r\n        Predicate.fromString = function (predicateString) {\r\n            if (typeof predicateString !== \"string\") {\r\n                return null;\r\n            }\r\n\r\n            // Extract all the filters out of the predicate string\r\n            var conditionMatcher = new RegExp(\"(substringof\\\\(.+?\\\\)|startswith\\\\(.+?\\\\)|endswith\\\\(.+?\\\\)|[\\\\w\\\\.]+?\\\\s(?:eq|ne|gt|ge|lt|le)\\\\s(?:\\\\w+|\\\\'.+?\\\\'))\", \"g\");\r\n            var filters = predicateString.match(conditionMatcher);\r\n\r\n            if (!filters) {\r\n                return null;\r\n            }\r\n\r\n            // Convert each filter into a predicate\r\n            var i;\r\n            for (i = 0; i < filters.length; i++) {\r\n                filters[i] = getPredicateFromSegment(filters[i]);\r\n                if (filters[i] === null) {\r\n                    return null;\r\n                }\r\n            }\r\n\r\n            if (filters.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            // Remove all predicates from string\r\n            i = 0;\r\n            predicateString = predicateString.replace(conditionMatcher, function () {\r\n                return i++;\r\n            });\r\n\r\n            if (filters.length === 1) {\r\n                if (predicateString.replace(/[0-9]|\\s|and|or/g, \"\") !== \"\") {\r\n                    return null;\r\n                }\r\n                return filters[0];\r\n            }\r\n\r\n            return buildPredicateFromMap(predicateString, filters);\r\n        };\r\n\r\n        /**\r\n         * Builds a predicate based on a predicate map and array of extracted filters\r\n         * @param {String} predicateMap A String representing a map of a predicate where the indexes map to the filters array\r\n         *                              \"1 and (2 or 3)\" where filters.length === 3\r\n         * @param {Predicate[]} filters An array of Predicates whose index map to the indexes on the predicateMap\r\n         * @returns {Predicate|Null} The resulting Predicate or null if the map is invalid\r\n         */\r\n        var buildPredicateFromMap = function (predicateMap, filters) {\r\n            var closeParenthesisIndex;\r\n            var openParenthesisIndex;\r\n            var groupString;\r\n            var filterIndexes;\r\n            var groupPredicate = null;\r\n            var groupFilters;\r\n            var operator;\r\n            var testNextLevel = true;\r\n\r\n            while (testNextLevel) {\r\n                closeParenthesisIndex = predicateMap.indexOf(')');\r\n                if (closeParenthesisIndex !== -1) {\r\n                    openParenthesisIndex = predicateMap.lastIndexOf('(', closeParenthesisIndex);\r\n                    groupString = predicateMap.substring(openParenthesisIndex + 1, closeParenthesisIndex);\r\n                    predicateMap = predicateMap.substring(0, openParenthesisIndex) + filters.length + predicateMap.substring(closeParenthesisIndex + 1);\r\n                } else {\r\n                    groupString = predicateMap;\r\n                    testNextLevel = false;\r\n                }\r\n\r\n                // If the group contains invalid characters then return null as an invalid predicate string.\r\n                if (groupString.replace(/[0-9]|\\s|and|or/g, \"\") !== \"\") {\r\n                    return null;\r\n                }\r\n\r\n                // If the group uses both 'and' and 'or' then return null as an invalid predicate string.\r\n                if (groupString.indexOf('and') >= 0 && groupString.indexOf('or') >= 0) {\r\n                    return null;\r\n                }\r\n\r\n                filterIndexes = groupString.match(/[0-9]+/g);\r\n                groupFilters = [];\r\n                var i;\r\n                for (i = 0; i < filterIndexes.length; i++) {\r\n                    groupFilters.push(filters[Number(filterIndexes[i])]);\r\n                }\r\n                operator = groupString.indexOf('or') >= 0 ? 'or' : 'and';\r\n                groupPredicate = new Predicate().join(groupFilters, operator);\r\n                filters.push(groupPredicate);\r\n            }\r\n\r\n            return groupPredicate;\r\n        };\r\n\r\n        /**\r\n         * Takes a predicate's value and if it is a string, adds single quotes around it.\r\n         *\r\n         * @method escapeValue\r\n         * @param {String|Boolean|Number|Date} value\r\n         * @returns {string} The string value\r\n         */\r\n        var escapeValue = function (value) {\r\n            if (value instanceof Date) {\r\n                value = value.toISOString();\r\n            }\r\n            return (typeof value === 'string') ? \"'\" + value + \"'\" : value.toString();\r\n        };\r\n\r\n        /**\r\n         * Returns the raw value of the predicate string\r\n         *\r\n         * @method convertValueToType\r\n         * @param {String} value\r\n         * @returns {String|Boolean|Number}\r\n         */\r\n        var convertValueToType = function (value) {\r\n            if (typeof value === 'string') {\r\n                if (value.indexOf(\"'\") >= 0) {\r\n                    return value.replace(/\\'/g, '');\r\n                }\r\n                if (value.toLowerCase() === 'true') {\r\n                    return true;\r\n                }\r\n                if (value.toLowerCase() === 'false') {\r\n                    return false;\r\n                }\r\n            }\r\n            if (!isNaN(value)) {\r\n                return Number(value);\r\n            }\r\n            return value;\r\n        };\r\n\r\n        /**\r\n         * Tests a predicate group to see if the object matches\r\n         * @param {Predicate} predicate\r\n         * @param {Object} object\r\n         * @returns {Boolean} True if the object matches the predicate\r\n         */\r\n        var testPredicateGroup = function (predicate, object) {\r\n            var result;\r\n            var i;\r\n            for (i = 0; i < predicate.joinedPredicates.length; i++) {\r\n                result = testPredicate(predicate.joinedPredicates[i], object);\r\n\r\n                // If the operator is 'and' and any of the filters do not match, return false.\r\n                if (predicate.groupOperator === 'and' && result === false) {\r\n                    return false;\r\n                }\r\n\r\n                // If the operator is 'or' and any of the filters match, return true.\r\n                if (predicate.groupOperator === 'or' && result === true) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            // The operator was 'and' and all of the filters matched or the operator was 'or' and none of the filters matched.\r\n            return predicate.groupOperator === 'and';\r\n        };\r\n\r\n        /**\r\n         * Tests an object to see if the filter conditions match a given predicate. Used for recursive tests.\r\n         *\r\n         * @param {Predicate} predicate\r\n         * @param {Object} object\r\n         * @param {Boolean} [failOnMissingAssociation=true] Should the test fail when the a filter is performed against an expanded association that is not present\r\n         */\r\n        var testPredicate = function (predicate, object, failOnMissingAssociation) {\r\n            if (predicate.joinedPredicates && predicate.joinedPredicates.length > 0) {\r\n                return testPredicateGroup(predicate, object);\r\n            }\r\n            if (predicate.property) {\r\n                var propertyPath = predicate.property.split('.');\r\n                var objectValue = object;\r\n                var i;\r\n                for (i = 0; i < propertyPath.length; i++) {\r\n                    if (objectValue.hasOwnProperty(propertyPath[i]) && objectValue[propertyPath[i]] !== undefined) {\r\n                        objectValue = objectValue[propertyPath[i]];\r\n                    } else {\r\n                        return (failOnMissingAssociation === false);\r\n                    }\r\n                }\r\n\r\n                var condition = predicate.parsePredicate();\r\n                if (condition.indexOf('(') >= 0) {\r\n                    return testComplexPredicate(condition, objectValue);\r\n                }\r\n                return testSimplePredicate(condition, objectValue);\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        /**\r\n         * Tests a complex predicate that uses startswith, endswith, or substringof\r\n         * @param {String} condition The Predicate condition\r\n         * @param {String|Number|Boolean} objectValue The value that is being tested\r\n         * @returns {Boolean} True if the object value matches the condition\r\n         */\r\n        var testComplexPredicate = function (condition, objectValue) {\r\n            var value;\r\n            var operator = condition.substr(0, condition.indexOf('('));\r\n            var start = condition.indexOf('(') + 1;\r\n            var end = condition.indexOf(')') - start;\r\n            var conditionParams = condition.substr(start, end);\r\n            conditionParams = conditionParams.replace(/\\'/g, '').split(', ');\r\n\r\n            switch (operator) {\r\n                case 'startswith':\r\n                    value = conditionParams[1].toLowerCase();\r\n                    return (objectValue.indexOf(value) === 0);\r\n                case 'endswith':\r\n                    value = conditionParams[1].toLowerCase();\r\n                    return (objectValue.indexOf(value) === objectValue.length - 1 - value.length);\r\n                case 'substringof':\r\n                    value = conditionParams[0].toLowerCase();\r\n                    return (objectValue.indexOf(value) >= 0);\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        /**\r\n         * Tests a simple predicate that uses lt, gt, le, ge, ne, or eq\r\n         * @param {String} condition The Predicate condition\r\n         * @param {String|Number|Boolean} objectValue The value that is being tested\r\n         * @returns {Boolean} True if the object value matches the condition\r\n         */\r\n        var testSimplePredicate = function (condition, objectValue) {\r\n            var conditionParams = condition.split(' ');\r\n            var operator = conditionParams[1];\r\n\r\n            var value = conditionParams.slice(2).join(' ');\r\n            value = convertValueToType(value);\r\n\r\n            // If both the predicate value and the object values are Date-like, convert them to dates to compare\r\n            if (objectValue instanceof Date && !isNaN(Date.parse(value))) {\r\n                value = Date.parse(value);\r\n                objectValue = objectValue.getTime();\r\n            } else if (typeof objectValue === 'string' && !isNaN(Date.parse(objectValue))) {\r\n                objectValue = Date.parse(objectValue);\r\n                value = Date.parse(value);\r\n            }\r\n\r\n            /* jshint eqeqeq: false */\r\n            switch (operator) {\r\n                case 'lt':\r\n                    return objectValue < value;\r\n                case 'gt':\r\n                    return objectValue > value;\r\n                case 'le':\r\n                    return objectValue <= value;\r\n                case 'ge':\r\n                    return objectValue >= value;\r\n                case 'ne':\r\n                    return objectValue != value;\r\n                case 'eq':\r\n                    return objectValue == value;\r\n            }\r\n            /* jshint eqeqeq: true */\r\n\r\n            return false;\r\n        };\r\n\r\n        /**\r\n         * Builds a predicate from a complex segment that uses startswith, endswith, or substringof\r\n         * @param {String} condition The predicate condition\r\n         * @returns {Predicate} The resulting Predicate\r\n         */\r\n        var getComplexPredicateFromSegment = function (condition) {\r\n            var predicate;\r\n            var value;\r\n            var parenPos = condition.indexOf('(');\r\n            var operator = condition.substring(0, parenPos);\r\n            var conditionParams = condition.substring(parenPos + 1, condition.indexOf(')')).split(', ');\r\n\r\n            switch (operator) {\r\n                case 'startswith':\r\n                    value = convertValueToType(conditionParams[1]);\r\n                    predicate = new Predicate(conditionParams[0]).startsWith(value);\r\n                    break;\r\n                case 'endswith':\r\n                    value = convertValueToType(conditionParams[1]);\r\n                    predicate = new Predicate(conditionParams[0]).endsWith(value);\r\n                    break;\r\n                case 'substringof':\r\n                    value = convertValueToType(conditionParams[0]);\r\n                    predicate = new Predicate(conditionParams[1]).contains(value);\r\n                    break;\r\n            }\r\n\r\n            return predicate;\r\n        };\r\n\r\n        /**\r\n         * Builds a predicate from a simple segment that uses eq, ne, gt, ge, lt, or le\r\n         * @param {String} condition The predicate condition\r\n         * @returns {Predicate} The resulting Predicate\r\n         */\r\n        var getSimplePredicateFromSegment = function (condition) {\r\n            var conditionParams = condition.split(' ');\r\n            var operator = conditionParams[1];\r\n            var value = convertValueToType(conditionParams.slice(2).join(' '));\r\n\r\n            var predicate = new Predicate(conditionParams[0]);\r\n\r\n            switch (operator) {\r\n                case 'eq':\r\n                    predicate.equals(value);\r\n                    break;\r\n                case 'ne':\r\n                    predicate.notEqualTo(value);\r\n                    break;\r\n                case 'gt':\r\n                    predicate.greaterThan(value);\r\n                    break;\r\n                case 'ge':\r\n                    predicate.greaterThanOrEqualTo(value);\r\n                    break;\r\n                case 'lt':\r\n                    predicate.lessThan(value);\r\n                    break;\r\n                case 'le':\r\n                    predicate.lessThanOrEqualTo(value);\r\n                    break;\r\n            }\r\n            return predicate;\r\n        };\r\n\r\n        /**\r\n         * Creates a predicate from a single condition eg: \"property eq 'value'\"\r\n         *\r\n         * @param {String} condition\r\n         * @return {Predicate} The predicate built from the condition\r\n         */\r\n        var getPredicateFromSegment = function (condition) {\r\n            if (condition.indexOf('(') >= 0) {\r\n                return getComplexPredicateFromSegment(condition);\r\n            }\r\n            return getSimplePredicateFromSegment(condition);\r\n        };\r\n\r\n        return Predicate;\r\n    }\r\n]);","angular.module('recall').factory('recallPreparedQueryOptions', [\r\n    'recallPredicate',\r\n\r\n    function (Predicate) {\r\n        /*\r\n         * BASED ON:\r\n         * PreparedQueryOptions\r\n         * version: 1.1.2\r\n         * author: David Hamilton\r\n         * license: https://github.com/nova706/PreparedQueryOptions/blob/master/LICENSE.txt (MIT)\r\n         * https://github.com/nova706/PreparedQueryOptions\r\n         *\r\n         */\r\n\r\n        /**\r\n         * PreparedQueryOptions are used to set, store and parse OData query parameters. Instead of passing\r\n         * multiple arguments to methods for each query option, simply pass the preparedQueryOptions object.\r\n         * Use the parseOptions method on the object to return an OData string for a query.\r\n         *\r\n         * @class PreparedQueryOptions\r\n         * @constructor\r\n         */\r\n        function PreparedQueryOptions() {\r\n            /**\r\n             * Stores the query options that have been set.\r\n             * @property options\r\n             * @type Object\r\n             * @default {}\r\n             */\r\n            this.options = {};\r\n        }\r\n\r\n        var isPredicate = function (object) {\r\n            return object && typeof object === \"object\" && typeof object.parsePredicate === \"function\";\r\n        };\r\n\r\n        /**\r\n         * Used in Sync Adapters to perform the CRUD operation against the Master instead of the Slave.\r\n         *\r\n         * @method preferMaster\r\n         * @param {Boolean} [preferMaster=false] Whether the SyncAdapter should prefer the slave or master.\r\n         * @return {PreparedQueryOptions|Boolean} PreparedQueryOptions object or the current preferMaster value.\r\n         */\r\n        PreparedQueryOptions.prototype.preferMaster = function (preferMaster) {\r\n            if (arguments.length === 0) {\r\n                return this.options.preferMaster || null;\r\n            }\r\n            if (preferMaster === null) {\r\n                delete this.options.preferMaster;\r\n                return this;\r\n            }\r\n            this.options.preferMaster = preferMaster === true;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets the number of results to retrieve. Passing a null top value will clear the top option. Negating the value\r\n         * will return the current top value.\r\n         *\r\n         * @method $top\r\n         * @param {Number} [top] Number of results to query for.\r\n         * @return {PreparedQueryOptions|Number} PreparedQueryOptions object or the current $top value.\r\n         */\r\n        PreparedQueryOptions.prototype.$top = function (top) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$top || null;\r\n            }\r\n            if (typeof top === 'number' && top >= 0) {\r\n                this.options.$top = top;\r\n            }\r\n            if (top === null) {\r\n                delete this.options.$top;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets the index of the first result to retrieve. Passing a null skip value will clear the skip option. Negating the\r\n         * value will return the current skip value.\r\n         *\r\n         * @method $skip\r\n         * @param {Number} [skip] The index of the first result to retrieve\r\n         * @return {PreparedQueryOptions|Number} PreparedQueryOptions object or the current $skip value.\r\n         */\r\n        PreparedQueryOptions.prototype.$skip = function (skip) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$skip || null;\r\n            }\r\n            if (typeof skip === 'number' && skip >= 0) {\r\n                this.options.$skip = skip;\r\n            }\r\n            if (skip === null) {\r\n                delete this.options.$skip;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets orderBy string. Passing a null order by value will clear the order by option. Negating the value will return\r\n         * the current order by value.\r\n         *\r\n         * @method $orderBy\r\n         * @param {String} [orderBy] The orderBy string used to retrieve the results in a sorted order.\r\n         * @return {PreparedQueryOptions|String} PreparedQueryOptions object or the current $orderby value.\r\n         */\r\n        PreparedQueryOptions.prototype.$orderBy = function (orderBy) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$orderby || null;\r\n            }\r\n            if (orderBy && typeof orderBy === 'string') {\r\n                this.options.$orderby = orderBy;\r\n            }\r\n            if (orderBy === null) {\r\n                delete this.options.$orderby;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets expand string. Passing a null expand value will clear the expand option. Negating the value will return the\r\n         * current expand value.\r\n         *\r\n         * @method $expand\r\n         * @param {String | Array} [foreignKey] The foreignKey to expand when retrieving the results.\r\n         * @return {PreparedQueryOptions|String} PreparedQueryOptions object or the current $expand value.\r\n         */\r\n        PreparedQueryOptions.prototype.$expand = function (foreignKey) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$expand || null;\r\n            }\r\n            if (typeof foreignKey === 'string') {\r\n                this.options.$expand = foreignKey;\r\n            } else if (foreignKey instanceof Array) {\r\n                this.options.$expand = foreignKey.join(',');\r\n            }\r\n            if (foreignKey === null) {\r\n                delete this.options.$expand;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets select string. Passing a null select value will clear the select option. Negating the value will return the\r\n         * current select value.\r\n         *\r\n         * @method $select\r\n         * @param {String | Array} [property] A single property name or array of property names to select.\r\n         * @return {PreparedQueryOptions|String} PreparedQueryOptions object or the current $select value.\r\n         */\r\n        PreparedQueryOptions.prototype.$select = function (property) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$select || null;\r\n            }\r\n            if (typeof property === 'string') {\r\n                this.options.$select = property;\r\n            } else if (property instanceof Array) {\r\n                this.options.$select = property.join(',');\r\n            }\r\n            if (property === null) {\r\n                delete this.options.$select;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Enables or disables inline count. Passing a null inline count value will clear the inline count option. Negating\r\n         * the value will return the current inline count value: \"allpages\" or null.\r\n         *\r\n         * @method $inlineCount\r\n         * @param {Boolean} [enable=true] Flag to enable or disable inline count.\r\n         * @return {PreparedQueryOptions|String} PreparedQueryOptions object or the current $inlinecount value.\r\n         */\r\n        PreparedQueryOptions.prototype.$inlineCount = function (enable) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$inlinecount || null;\r\n            }\r\n            if (enable !== false && enable !== null) {\r\n                this.options.$inlinecount = \"allpages\";\r\n            } else {\r\n                delete this.options.$inlinecount;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets the filter option. Include the Predicate class to assist in building complex filter clauses.\r\n         * Passing a null filter value will clear the filter option. Negating the value will return the current filter value.\r\n         *\r\n         * @method $filter\r\n         * @param {String | Predicate} [filter] The filter clause to use when retrieving the results.\r\n         * @return {PreparedQueryOptions|Predicate} PreparedQueryOptions object or the current $filter predicate.\r\n         */\r\n        PreparedQueryOptions.prototype.$filter = function (filter) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$filter || null;\r\n            }\r\n            if (filter && typeof filter === 'string') {\r\n                this.options.$filter = Predicate.fromString(filter);\r\n            } else if (isPredicate(filter)) {\r\n                this.options.$filter = filter;\r\n            }\r\n            if (filter === null) {\r\n                delete this.options.$filter;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets a custom query option parameter. Passing a null value will clear the filter. Negating the value will return\r\n         * the current custom filter value.\r\n         *\r\n         * @method custom\r\n         * @param {String} optionName The name of the option. Must not start with '$'.\r\n         * @param {String|Number|Boolean} [value] The string value of the option.\r\n         * @return {PreparedQueryOptions} PreparedQueryOptions object or the current custom filter value.\r\n         */\r\n        PreparedQueryOptions.prototype.custom = function (optionName, value) {\r\n            if (arguments.length === 1) {\r\n                return this.options[optionName] || null;\r\n            }\r\n            if (optionName && typeof optionName === 'string' && optionName.indexOf('$') !== 0 && value && (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean')) {\r\n                this.options[optionName] = value;\r\n            }\r\n            if (optionName && value === null) {\r\n                delete this.options[optionName];\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Extend existing query with options from another query. Only the original query will be modified. Any\r\n         * matching options will be overridden in the original query.\r\n         *\r\n         * @method extend\r\n         * @param {PreparedQueryOptions} preparedQueryOptions The prepared query objects with the properties to be added.\r\n         * @return {PreparedQueryOptions} PreparedQueryOptions object.\r\n         */\r\n        PreparedQueryOptions.prototype.extend = function (preparedQueryOptions) {\r\n            var key;\r\n            for (key in preparedQueryOptions.options) {\r\n                if (preparedQueryOptions.options.hasOwnProperty(key)) {\r\n                    this.options[key] = preparedQueryOptions.options[key];\r\n                }\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Builds and returns a URL parameter string based on the query options.\r\n         *\r\n         * @method parseOptions\r\n         * @returns {String}\r\n         * @example '$top=25&$skip=0'\r\n         */\r\n        PreparedQueryOptions.prototype.parseOptions = function () {\r\n            var parameters = '';\r\n\r\n            var appendSeparator = function () {\r\n                parameters += (parameters === '') ? '?' : '&';\r\n            };\r\n\r\n            var option;\r\n            for (option in this.options) {\r\n                if (this.options.hasOwnProperty(option)) {\r\n                    appendSeparator();\r\n                    if (isPredicate(this.options[option])) {\r\n                        parameters += option + '=' + this.options[option].parsePredicate();\r\n                    } else {\r\n                        parameters += option + '=' + this.options[option];\r\n                    }\r\n                }\r\n            }\r\n\r\n            return parameters;\r\n        };\r\n\r\n        /**\r\n         * Class method to create a new PreparedQueryOptions object from a simple object\r\n         *\r\n         * @method fromObject\r\n         * @param {Object} object the object to build from\r\n         * @returns {PreparedQueryOptions}\r\n         */\r\n        PreparedQueryOptions.fromObject = function (object) {\r\n            var preparedQueryOptions = new PreparedQueryOptions();\r\n            var property;\r\n            for (property in object) {\r\n                if (object.hasOwnProperty(property) && typeof preparedQueryOptions[property] === \"function\") {\r\n                    preparedQueryOptions[property](object[property]);\r\n                }\r\n            }\r\n            return preparedQueryOptions;\r\n        };\r\n\r\n        return PreparedQueryOptions;\r\n    }\r\n]);","/**\r\n * The recallProvider is the entry point for common configuration options. Specific adapters may have their own\r\n * configuration options\r\n */\r\nangular.module('recall').provider('recall', [\r\n    function () {\r\n        var config = {};\r\n\r\n        // The default adapter to use unless otherwise specified by the model Definition\r\n        config.adapter = null;\r\n        this.setAdapter = function (adapter) {\r\n            config.adapter = adapter;\r\n            return this;\r\n        };\r\n\r\n        // Time in milliseconds to throttle Entity dirty checking. This allows for multiple digest cycles to pass\r\n        // between checking if an Entity is dirty by examining its stored state\r\n        config.dirtyCheckThreshold = 30;\r\n        this.setDirtyCheckThreshold = function (dirtyCheckThreshold) {\r\n            config.dirtyCheckThreshold = dirtyCheckThreshold;\r\n            return this;\r\n        };\r\n\r\n        // The default last modified field name. To enable synchronization, this must be set.\r\n        config.lastModifiedFieldName = null;\r\n        this.setLastModifiedFieldName = function (lastModifiedFieldName) {\r\n            config.lastModifiedFieldName = lastModifiedFieldName;\r\n            return this;\r\n        };\r\n\r\n        // The default soft delete field name. To enable synchronization, this must be set.\r\n        config.deletedFieldName = null;\r\n        this.setDeletedFieldName = function (deletedFieldName) {\r\n            config.deletedFieldName = deletedFieldName;\r\n            return this;\r\n        };\r\n\r\n        this.$get = ['$injector', 'recallModel', function ($injector, Model) {\r\n\r\n            var service = {\r\n                adapter: config.adapter,\r\n                lastModifiedFieldName: config.lastModifiedFieldName,\r\n                deletedFieldName: config.deletedFieldName,\r\n                dirtyCheckThreshold: config.dirtyCheckThreshold,\r\n                models: {}\r\n            };\r\n\r\n            /**\r\n             * Get an array of the defined Models.\r\n             * @returns {Entity[]} The models\r\n             */\r\n            service.getModels = function () {\r\n                var theModels = [];\r\n                var model;\r\n                for (model in this.models) {\r\n                    if (this.models.hasOwnProperty(model)) {\r\n                        theModels.push(this.models[model]);\r\n                    }\r\n                }\r\n                return theModels;\r\n            };\r\n\r\n            /**\r\n             * Gets a defined model by its name\r\n             * @param {String} modelName\r\n             * @returns {Entity} The model or null if the model is not found\r\n             */\r\n            service.getModel = function (modelName) {\r\n                return this.models[modelName] || null;\r\n            };\r\n\r\n            /**\r\n             * Creates a model based on a definition.\r\n             * @param {Object} modelDefinition The definition of the model including fields and associations\r\n             * @param {Object|String} [adapter] The adapter that is used to perform the CRUD actions\r\n             * @returns {Object} The model\r\n             */\r\n            service.defineModel = function (modelDefinition, adapter) {\r\n                adapter = adapter || this.adapter;\r\n\r\n                // If the adapter is a string, assume it is the name of the adapter factory and inject it\r\n                adapter = (typeof adapter === 'string') ? $injector.get(adapter) : adapter;\r\n\r\n                // If there was no adapter set, then return out as the model can not be used.\r\n                if (!adapter) {\r\n                    return null;\r\n                }\r\n\r\n                // TODO: Validated the model definition\r\n                if (!modelDefinition || !modelDefinition.name) {\r\n                    return null;\r\n                }\r\n\r\n                // If the model is already defined, just return it.\r\n                if (this.models[modelDefinition.name]) {\r\n                    return this.models[modelDefinition.name];\r\n                }\r\n\r\n                var model = new Model(modelDefinition);\r\n                model.setLastModifiedFieldName(this.lastModifiedFieldName);\r\n                model.setDeletedFieldName(this.deletedFieldName);\r\n                model.setAdapter(adapter);\r\n                model.setDirtyCheckThreshold(this.dirtyCheckThreshold);\r\n\r\n                var fieldsValid = model.initializeModelFields();\r\n\r\n                if (!fieldsValid) {\r\n                    return null;\r\n                }\r\n\r\n                model.initializeAssociations();\r\n\r\n                // Call the model validation on the adapter after all Entity properties and methods are set.\r\n                if (typeof adapter.modelValidationHook === 'function' && !adapter.modelValidationHook(model)) {\r\n                    return null;\r\n                }\r\n\r\n                this.models[model.modelName] = model;\r\n\r\n                return model;\r\n            };\r\n\r\n            return service;\r\n        }];\r\n    }\r\n]);"]}