{"version":3,"file":"recall.min.js","sources":["../src/_module.js","../src/adapterResponse.js","../src/adapters/indexedDB.adapter.js","../src/adapters/odataREST.adapter.js","../src/adapters/sync.adapter.js","../src/adapters/webSQL.adapter.js","../src/association.js","../src/entity.js","../src/localStorage.js","../src/model.js","../src/modelField.js","../src/polyfill.js","../src/predicate.js","../src/preparedQueryOptions.js","../src/recallService.js"],"names":["angular","module","factory","AdapterResponse","data","count","status","headers","config","this","OK","CREATED","ACCEPTED","NO_CONTENT","BAD_REQUEST","UNAUTHORIZED","NOT_FOUND","CONFLICT","INTERNAL_SERVER_ERROR","NOT_IMPLEMENTED","provider","providerConfig","dbName","setDbName","dbVersion","setDbVersion","pkGenerator","s4","Math","floor","random","toString","substring","setPkGenerator","dropDatabase","window","indexedDB","deleteDatabase","e","$get","$log","$q","$window","recall","connectionPromise","db","adapter","generatePrimaryKey","migrate","i","model","field","indexName","objectStore","models","getModels","length","objectStoreNames","contains","dataSourceName","createObjectStore","keyPath","primaryKeyFieldName","fields","hasOwnProperty","unique","index","createIndex","useDatabase","theDb","onversionchange","close","error","alert","connect","dfd","defer","resolve","openRequest","open","onupgradeneeded","event","info","target","result","onsuccess","debug","onerror","reject","errorCode","promise","create","theModel","modelInstance","response","buildError","modelName","getRawModelObject","lastModifiedFieldName","Date","toISOString","then","tx","transaction","store","req","add","findOne","pk","queryOptions","includeDeleted","get","deletedFieldName","performExpand","find","filterPredicate","openCursor","results","$filter","cursor","value","resultMatchesFilters","push","promises","all","applyFilter","applyOrderBy","totalCount","applyPaging","update","extend","updateReq","put","remove","synchronize","dataToSync","hardRemove","createOrUpdate","createReq","expandHasOne","association","pathsToExpand","undefined","mappedBy","pathToExpand","join","alias","expandPath","indexOf","expandHasMany","key","filter","getOptions","split","toExpand","getAssociationByAlias","getModel","type","$expand","paths","predicate","test","a","orderBy","$orderBy","property","direction","isDate","sort","b","aTest","bTest","toLowerCase","top","$top","skip","$skip","slice","serverAPILocation","setServerAPILocation","resultsField","setResultsField","totalCountFiled","setTotalCountFiled","$http","getUrlWithOptions","url","parseOptions","post","success","method","lastSync","masterAdapter","setMaster","slaveAdapter","setSlave","$injector","localStorage","Predicate","PreparedQueryOptions","modelValidationHook","master","getMaster","slave","getSlave","preferMaster","Array","processSyncRequest","getAdapter","SyncResult","sent","returned","totalProcessed","getLastSyncTime","keys","LAST_SYNC","updateLastSyncTimeToNow","set","sendSyncRequestData","processSyncResponseData","syncRequestData","syncResponseData","totalItemsProcessed","handleError","handleComplete","greaterThanOrEqualTo","syncResponse","dbSize","setDbSize","createTable","sql","executeSql","createTables","column","name","primaryKey","notNull","addColumnToTable","modelField","tableName","migrateTable","tableRows","row","tableSQL","tbl_name","missingFields","migrateTables","rows","item","openDatabase","columns","columnValues","placeholders","convertValueToSQL","transformSQLResult","convertValueToModel","sqlResultInstance","getSQLModelObject","obj","Association","definition","invalid","hasOne","hasMany","as","foreignKey","prototype","recallService","expand","entity","self","Model","$entity","storedState","equals","$getPrimaryKey","existingPredicate","base","stored","Entity","object","persisted","extendFromRawObject","Object","defineProperty","lastDirtyCheck","getTime","lastDirtyState","saveInProgress","$convertAssociationsToEntities","$storeState","$model","ForeignModel","associations","associationName","$isValid","fieldIsUndefined","matchesType","isNaN","parse","validate","$save","warn","$reset","itemToSave","preSave","updateSavedState","succeeded","preUpdate","transformResult","preCreate","$remove","$isDirty","now","delta","dirtyCheckThreshold","viewValue","storedValue","prop","changedProperties","before","after","$document","storage","keyExists","addKeyModifier","modifier","registerKey","keyModifier","supportsLocalStorage","setItem","life","v","encodeURIComponent","cookie","getItem","regexp","RegExp","c","exec","decodeURIComponent","removeItem","ModelField","propagateError","modelDefinition","writable","configurable","setLastModifiedFieldName","setDeletedFieldName","setAdapter","setDirtyCheckThreshold","initializeModelFields","lastModifiedField","deletedField","modelDefinitionFields","getDefaultValue","initializeAssociations","modelDefinitionAssociations","rawObject","modelEntity","includeExpandedAssociations","applyDefaultValues","resultEntity","rawEntity","clientResponse","toUpperCase","asPrimaryKey","fromDefinition","validateField","match","pad","number","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","toFixed","parser","predicates","groupOperator","setProperty","escapeValue","notEqualTo","greaterThan","lessThan","lessThanOrEqualTo","startsWith","endsWith","initialPredicate","newPredicates","joinedPredicates","concat","unshift","and","or","failOnMissingAssociation","testPredicate","parsePredicate","nested","urlString","predicateString","fromString","conditionMatcher","filters","getPredicateFromSegment","replace","buildPredicateFromMap","predicateMap","closeParenthesisIndex","openParenthesisIndex","groupString","filterIndexes","groupFilters","operator","groupPredicate","testNextLevel","lastIndexOf","Number","convertValueToType","testPredicateGroup","propertyPath","objectValue","condition","testComplexPredicate","testSimplePredicate","substr","start","end","conditionParams","getComplexPredicateFromSegment","parenPos","getSimplePredicateFromSegment","options","isPredicate","arguments","$orderby","$select","$inlineCount","enable","$inlinecount","custom","optionName","preparedQueryOptions","option","parameters","appendSeparator","fromObject","service","theModels","defineModel","fieldsValid"],"mappings":"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","sourcesContent":["angular.module('recall', []);","angular.module('recall').factory(\"recallAdapterResponse\", [\r\n    function () {\r\n\r\n        /**\r\n         * The AdapterResponse class represents a response that is coming back from an adapter. Every Adapter should\r\n         * resolve and reject with a properly formed AdapterResponse so that the Model can handle the response.\r\n         *\r\n         * @param {Object|Array|String} data The raw data from the adapter or an error message\r\n         * @param {Number} [count] The number of records affected by the action. Left null if not set\r\n         * @param {Number} [status=200] The status of the response\r\n         * @param {Object} [headers] The response headers (used by $http)\r\n         * @param {Object} [config] The configuration of the request (used by $http)\r\n         * @constructor\r\n         */\r\n        var AdapterResponse = function (data, count, status, headers, config) {\r\n            this.data = data;\r\n            this.count = (count >= 0) ? count : null;\r\n            this.status = status || AdapterResponse.OK;\r\n            this.headers = headers;\r\n            this.config = config;\r\n        };\r\n\r\n        // 2xx status codes used in OOTB adapters\r\n        AdapterResponse.OK = 200;\r\n        AdapterResponse.CREATED = 201;\r\n        AdapterResponse.ACCEPTED = 202;\r\n        AdapterResponse.NO_CONTENT = 204;\r\n\r\n        // 4xx status codes used in OOTB adapters\r\n        AdapterResponse.BAD_REQUEST = 400;\r\n        AdapterResponse.UNAUTHORIZED = 401;\r\n        AdapterResponse.NOT_FOUND = 404;\r\n        AdapterResponse.CONFLICT = 409;\r\n\r\n        // 5xx status codes used in OOTB adapters\r\n        AdapterResponse.INTERNAL_SERVER_ERROR = 500;\r\n        AdapterResponse.NOT_IMPLEMENTED = 501;\r\n\r\n        return AdapterResponse;\r\n    }\r\n]);","/**\r\n * Due to an iOS 8 bug in IndexedDB, a transaction cannot open multiple data stores at the same time: https://bugs.webkit.org/show_bug.cgi?id=136937\r\n * As a \"Fix\", transactions will only ever only open a single objectStore and multiple transactions will be used.\r\n * Impact to performance and stability is not yet known.\r\n */\r\n\r\nangular.module('recall.adapter.indexedDB', ['recall']).provider('recallIndexedDBAdapter', [\r\n    function () {\r\n\r\n        var providerConfig = {};\r\n\r\n        // Sets the name of the IndexedDB database to use\r\n        providerConfig.dbName = 'recall';\r\n        this.setDbName = function (dbName) {\r\n            providerConfig.dbName = dbName;\r\n            return this;\r\n        };\r\n\r\n        // Sets the version of the IndexedDB to use\r\n        providerConfig.dbVersion = 1;\r\n        this.setDbVersion = function (dbVersion) {\r\n            providerConfig.dbVersion = dbVersion;\r\n            return this;\r\n        };\r\n\r\n        // Sets the default function to be used as a \"GUID\" generator\r\n        providerConfig.pkGenerator = function () {\r\n            function s4() {\r\n                return Math.floor((1 + Math.random()) * 0x10000)\r\n                    .toString(16)\r\n                    .substring(1);\r\n            }\r\n\r\n            return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\r\n                s4() + '-' + s4() + s4() + s4();\r\n        };\r\n        this.setPkGenerator = function (pkGenerator) {\r\n            providerConfig.pkGenerator = pkGenerator;\r\n            return this;\r\n        };\r\n\r\n        // Drops the IndexedDB database\r\n        this.dropDatabase = function () {\r\n            try {\r\n                window.indexedDB.deleteDatabase(providerConfig.dbName);\r\n            } catch (e) {\r\n                return e;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        this.$get = [\r\n            '$log',\r\n            '$q',\r\n            '$window',\r\n            'recall',\r\n            'recallAdapterResponse',\r\n\r\n            function ($log, $q, $window, recall, AdapterResponse) {\r\n\r\n                var adapter = {};\r\n                var connectionPromise;\r\n                var db;\r\n\r\n                var generatePrimaryKey = providerConfig.pkGenerator;\r\n\r\n                // Handles version differences in the database and initializes or migrates the db\r\n                var migrate = function (db) {\r\n                    var i;\r\n                    var model;\r\n                    var field;\r\n                    var indexName;\r\n                    var objectStore;\r\n                    var models = recall.getModels();\r\n                    for (i = 0; i < models.length; i++) {\r\n                        model = models[i];\r\n\r\n                        if (!db.objectStoreNames.contains(model.dataSourceName)) {\r\n                            objectStore = db.createObjectStore(model.dataSourceName, { keyPath: model.primaryKeyFieldName });\r\n                            for (field in model.fields) {\r\n                                if (model.fields.hasOwnProperty(field)) {\r\n                                    if (model.fields[field].unique === true || model.fields[field].index !== false) {\r\n                                        indexName = (model.fields[field].index === true) ? field : model.fields[field].index;\r\n                                        objectStore.createIndex(field, indexName, { unique: model.fields[field].unique });\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n                // Sets the database to use in the adapter\r\n                var useDatabase = function (theDb) {\r\n                    db = theDb;\r\n\r\n                    // Handler for when the DB version is changed in another tab\r\n                    db.onversionchange = function () {\r\n                        db.close();\r\n                        $log.error('IndexedDBAdapter: DB version changed in a different window');\r\n                        alert(\"A new version of this page is ready. Please reload!\");\r\n                    };\r\n                };\r\n\r\n                // Connects to the database\r\n                var connect = function () {\r\n                    var dfd = $q.defer();\r\n\r\n                    if (db) {\r\n                        dfd.resolve(db);\r\n                    } else if (connectionPromise) {\r\n                        return connectionPromise;\r\n                    } else {\r\n                        var openRequest = $window.indexedDB.open(providerConfig.dbName, providerConfig.dbVersion);\r\n\r\n                        openRequest.onupgradeneeded = function (event) {\r\n                            $log.info('IndexedDBAdapter: Migrating...', event);\r\n                            useDatabase(event.target.result);\r\n                            migrate(event.target.result);\r\n                        };\r\n\r\n                        openRequest.onsuccess = function (event) {\r\n                            $log.debug('IndexedDBAdapter: Connection Success', event);\r\n                            useDatabase(event.target.result);\r\n                            dfd.resolve(db);\r\n                        };\r\n\r\n                        openRequest.onerror = function (event) {\r\n                            $log.error('IndexedDBAdapter: Connection Error', event);\r\n                            dfd.reject(event.target.errorCode);\r\n                        };\r\n                    }\r\n\r\n                    connectionPromise = dfd.promise;\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // TODO: Cascade Create: Cannot do proper cascades until iOS fixes the bug in IndexedDB where a transaction cannot open multiple stores\r\n                /**\r\n                 * Creates a new Entity\r\n                 * @param {Object} theModel The model of the entity to create\r\n                 * @param {Object} modelInstance The entity to create\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.create = function (theModel, modelInstance) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var buildError = function (e) {\r\n                        response = new AdapterResponse(e, 0, AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                        $log.error('IndexedDBAdapter: Create ' + theModel.modelName, response, modelInstance);\r\n                        return response;\r\n                    };\r\n\r\n                    modelInstance[theModel.primaryKeyFieldName] = generatePrimaryKey();\r\n                    modelInstance = theModel.getRawModelObject(modelInstance, false);\r\n\r\n                    // TODO: Store all dates in ISO format\r\n                    modelInstance[theModel.lastModifiedFieldName] = new Date().toISOString();\r\n\r\n                    connect().then(function () {\r\n                        var tx = db.transaction([theModel.dataSourceName], \"readwrite\");\r\n                        var store = tx.objectStore(theModel.dataSourceName);\r\n                        var req = store.add(modelInstance);\r\n                        req.onsuccess = function () {\r\n                            response = new AdapterResponse(modelInstance, 1, AdapterResponse.CREATED);\r\n                            $log.debug('IndexedDBAdapter: Create ' + theModel.modelName, response);\r\n                            dfd.resolve(response);\r\n                        };\r\n                        req.onerror = function () {\r\n                            dfd.reject(buildError(this.error));\r\n                        };\r\n                    }, function (e) {\r\n                        dfd.reject(buildError(e));\r\n                    });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Finds a single entity given a primary key\r\n                 * @param {Object} theModel The model of the entity to find\r\n                 * @param {String|Number} pk The primary key of the entity to find\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use for $expand\r\n                 * @param {Boolean} [includeDeleted=false] If true, includes soft-deleted entities\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.findOne = function (theModel, pk, queryOptions, includeDeleted) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var buildError = function (e, status) {\r\n                        response = new AdapterResponse(e, 0, status || AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                        $log.error('IndexedDBAdapter: FindOne ' + theModel.modelName, response, pk, queryOptions);\r\n                        return response;\r\n                    };\r\n\r\n                    connect().then(function () {\r\n                        var tx = db.transaction([theModel.dataSourceName]);\r\n                        var store = tx.objectStore(theModel.dataSourceName);\r\n                        var req = store.get(pk);\r\n\r\n                        // TODO: Apply Select\r\n                        req.onsuccess = function () {\r\n                            if (req.result && (includeDeleted || !req.result[theModel.deletedFieldName])) {\r\n                                performExpand(req.result, theModel, queryOptions, db).then(function () {\r\n                                    response = new AdapterResponse(req.result, 1);\r\n                                    $log.debug('IndexedDBAdapter: FindOne ' + theModel.modelName, response, pk, queryOptions);\r\n                                    dfd.resolve(response);\r\n                                }, function (e) {\r\n                                    dfd.reject(buildError(e));\r\n                                });\r\n                            } else {\r\n                                dfd.reject(buildError('Not Found', AdapterResponse.NOT_FOUND));\r\n                            }\r\n                        };\r\n                        req.onerror = function () {\r\n                            dfd.reject(buildError(this.error));\r\n                        };\r\n                    }, function (e) {\r\n                        dfd.reject(buildError(e));\r\n                    });\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Finds a set of Model entities\r\n                 * @param {Object} theModel The model of the entities to find\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use\r\n                 * @param {Boolean} [includeDeleted=false] If true, includes soft-deleted entities\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.find = function (theModel, queryOptions, includeDeleted) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var buildError = function (e) {\r\n                        response = new AdapterResponse(e, 0, AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                        $log.error('IndexedDBAdapter: Find ' + theModel.modelName, response, queryOptions);\r\n                        return response;\r\n                    };\r\n\r\n                    connect().then(function () {\r\n                        // TODO: Filter using an index if possible\r\n                        var tx = db.transaction([theModel.dataSourceName]);\r\n                        var store = tx.objectStore(theModel.dataSourceName);\r\n                        var req = store.openCursor();\r\n                        var results = [];\r\n                        var filterPredicate;\r\n\r\n                        if (queryOptions && queryOptions.$filter()) {\r\n                            filterPredicate = queryOptions.$filter();\r\n                        }\r\n\r\n                        // TODO: Apply Select\r\n                        req.onsuccess = function (event) {\r\n                            var cursor = event.target.result;\r\n                            if (cursor) {\r\n                                if (includeDeleted || !cursor.value[theModel.deletedFieldName]) {\r\n                                    if (filterPredicate) {\r\n                                        if (resultMatchesFilters(cursor.value, filterPredicate)) {\r\n                                            results.push(cursor.value);\r\n                                        }\r\n                                    } else {\r\n                                        results.push(cursor.value);\r\n                                    }\r\n                                }\r\n                                cursor.continue();\r\n                            } else {\r\n                                var i;\r\n                                var promises = [];\r\n                                for (i = 0; i < results.length; i++) {\r\n                                    promises.push(performExpand(results[i], theModel, queryOptions, db));\r\n                                }\r\n                                $q.all(promises).then(function () {\r\n                                    results = applyFilter(results, filterPredicate);\r\n                                    results = applyOrderBy(theModel, results, queryOptions);\r\n\r\n                                    var totalCount = results.length;\r\n\r\n                                    // TODO: This is not very efficient but indexedDB does not seem to support a better way with filters and ordering\r\n                                    results = applyPaging(results, queryOptions);\r\n                                    response = new AdapterResponse(results, totalCount);\r\n\r\n                                    $log.debug('IndexedDBAdapter: Find ' + theModel.modelName, response, queryOptions);\r\n                                    dfd.resolve(response);\r\n                                }, function (e) {\r\n                                    dfd.reject(buildError(e));\r\n                                });\r\n                            }\r\n                        };\r\n                        req.onerror = function () {\r\n                            dfd.reject(buildError(this.error));\r\n                        };\r\n                    }, function (e) {\r\n                        dfd.reject(buildError(e));\r\n                    });\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // TODO: Cascade Update: Cannot do proper cascades until iOS fixes the bug in IndexedDB where a transaction cannot open multiple stores\r\n                /**\r\n                 * Updates a Model entity given the primary key of the entity\r\n                 * @param {Object} theModel The model of the entity to update\r\n                 * @param {String|Number} pk The primary key of the entity\r\n                 * @param {Object} modelInstance The entity to update\r\n                 * @param {Boolean} [includeDeleted=false] If true, includes soft-deleted entities\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.update = function (theModel, pk, modelInstance, includeDeleted) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var buildError = function (e) {\r\n                        response = new AdapterResponse(e, 0, AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                        $log.error('IndexedDBAdapter: Update ' + theModel.modelName, response, modelInstance);\r\n                        return response;\r\n                    };\r\n\r\n                    connect().then(function () {\r\n                        var tx = db.transaction([theModel.dataSourceName], \"readwrite\");\r\n                        var store = tx.objectStore(theModel.dataSourceName);\r\n                        var req = store.get(pk);\r\n                        req.onsuccess = function () {\r\n                            if (req.result && (includeDeleted || !req.result[theModel.deletedFieldName])) {\r\n                                var result = req.result;\r\n                                delete modelInstance[theModel.primaryKeyFieldName];\r\n                                angular.extend(result, modelInstance);\r\n\r\n                                // TODO: Convert all dates to ISO Format\r\n                                result[theModel.lastModifiedFieldName] = new Date().toISOString();\r\n                                result = theModel.getRawModelObject(result, false);\r\n\r\n                                var updateReq = store.put(result);\r\n                                updateReq.onsuccess = function () {\r\n                                    response = new AdapterResponse(result, 1);\r\n                                    $log.debug('IndexedDBAdapter: Update ' + theModel.modelName, response, modelInstance);\r\n                                    dfd.resolve(response);\r\n                                };\r\n                                updateReq.onerror = function () {\r\n                                    dfd.reject(buildError(this.error));\r\n                                };\r\n                            } else {\r\n                                dfd.reject(buildError('Not Found', AdapterResponse.NOT_FOUND));\r\n                            }\r\n                        };\r\n                        req.onerror = function () {\r\n                            dfd.reject(buildError(this.error));\r\n                        };\r\n\r\n                    }, function (e) {\r\n                        dfd.reject(buildError(e));\r\n                    });\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // TODO: Cascade Delete: Cannot do proper cascades until iOS fixes the bug in IndexedDB where a transaction cannot open multiple stores\r\n                /**\r\n                 * Removes an Entity given the primary key of the entity to remove\r\n                 * @param {Object} theModel The model of the entity to remove\r\n                 * @param {String|Number} pk The primary key of the entity\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.remove = function (theModel, pk) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var buildError = function (e) {\r\n                        response = new AdapterResponse(e, 0, AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                        $log.error('IndexedDBAdapter: Remove ' + theModel.modelName, response);\r\n                        return response;\r\n                    };\r\n\r\n                    connect().then(function () {\r\n                        var tx = db.transaction([theModel.dataSourceName], \"readwrite\");\r\n                        var store = tx.objectStore(theModel.dataSourceName);\r\n                        var req = store.get(pk);\r\n                        req.onsuccess = function () {\r\n                            if (req.result && !req.result[theModel.deletedFieldName]) {\r\n                                var result = req.result;\r\n                                result[theModel.deletedFieldName] = true;\r\n                                result[theModel.lastModifiedFieldName] = new Date().toISOString();\r\n                                var updateReq = store.put(result);\r\n                                updateReq.onsuccess = function () {\r\n                                    response = new AdapterResponse(null, 1, AdapterResponse.NO_CONTENT);\r\n                                    $log.debug('IndexedDBAdapter: Remove ' + theModel.modelName, response);\r\n                                    dfd.resolve(response);\r\n                                };\r\n                                updateReq.onerror = function () {\r\n                                    dfd.reject(buildError(this.error));\r\n                                };\r\n                            } else {\r\n                                dfd.reject(buildError('Not Found', AdapterResponse.NOT_FOUND));\r\n                            }\r\n                        };\r\n                        req.onerror = function () {\r\n                            dfd.reject(buildError(this.error));\r\n                        };\r\n                    }, function (e) {\r\n                        dfd.reject(buildError(e));\r\n                    });\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Takes an Array of entities and creates/updates/deletes them\r\n                 * @param {Object} theModel The model of the entities to synchronize\r\n                 * @param {Array} dataToSync An array of objects to create/update/delete\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.synchronize = function (theModel, dataToSync) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var buildError = function (e) {\r\n                        response = new AdapterResponse(e, 0, AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                        $log.error('IndexedDBAdapter: Synchronize ' + theModel.modelName, response, dataToSync);\r\n                        return response;\r\n                    };\r\n\r\n                    connect().then(function () {\r\n                        var tx = db.transaction([theModel.dataSourceName], \"readwrite\");\r\n                        var objectStore = tx.objectStore(theModel.dataSourceName);\r\n\r\n                        var i;\r\n                        var promises = [];\r\n                        for (i = 0; i < dataToSync.length; i++) {\r\n                            if (dataToSync[i][theModel.deletedFieldName]) {\r\n                                promises.push(hardRemove(theModel, objectStore, dataToSync[i][theModel.primaryKeyFieldName]));\r\n                            } else {\r\n                                promises.push(createOrUpdate(theModel, objectStore, dataToSync[i]));\r\n                            }\r\n                        }\r\n\r\n                        $q.all(promises).then(function (results) {\r\n                            response = new AdapterResponse(results, results.length, AdapterResponse.OK);\r\n                            $log.debug('IndexedDBAdapter: Synchronize ' + theModel.modelName, response, dataToSync);\r\n                            dfd.resolve(response);\r\n                        }, function (e) {\r\n                            dfd.reject(buildError(e));\r\n                        });\r\n                    }, function (e) {\r\n                        dfd.reject(buildError(e));\r\n                    });\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Creates a new Entity if not found or updates the existing one. Used in synchronization.\r\n                var createOrUpdate = function (theModel, objectStore, modelInstance) {\r\n                    var dfd = $q.defer();\r\n\r\n                    var req = objectStore.get(modelInstance[theModel.primaryKeyFieldName]);\r\n                    req.onsuccess = function () {\r\n                        var result = req.result;\r\n                        if (result) {\r\n                            angular.extend(result, modelInstance);\r\n                            result = theModel.getRawModelObject(result, false);\r\n\r\n                            var updateReq = objectStore.put(result);\r\n                            updateReq.onsuccess = function () {\r\n                                dfd.resolve(result);\r\n                            };\r\n                            updateReq.onerror = function () {\r\n                                dfd.reject(this.error);\r\n                            };\r\n                        } else {\r\n                            var createReq = objectStore.add(modelInstance);\r\n                            createReq.onsuccess = function () {\r\n                                dfd.resolve(modelInstance);\r\n                            };\r\n                            createReq.onerror = function () {\r\n                                dfd.reject(this.error);\r\n                            };\r\n                        }\r\n                    };\r\n                    req.onerror = function () {\r\n                        dfd.reject(this.error);\r\n                    };\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Hard deletes an Entity. Used in synchronization.\r\n                var hardRemove = function (theModel, objectStore, pk) {\r\n                    var dfd = $q.defer();\r\n\r\n                    var req = objectStore.delete(pk);\r\n                    req.onsuccess = function () {\r\n                        dfd.resolve();\r\n                    };\r\n                    req.onerror = function () {\r\n                        dfd.reject(this.error);\r\n                    };\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Expands a has one model association\r\n                var expandHasOne = function (model, result, association, db, pathsToExpand) {\r\n                    var dfd = $q.defer();\r\n\r\n                    if (result[association.mappedBy] === undefined) {\r\n                        result[association.mappedBy] = null;\r\n                        dfd.resolve();\r\n                        return dfd.promise;\r\n                    }\r\n\r\n                    var tx = db.transaction([model.dataSourceName]);\r\n                    var store = tx.objectStore(model.dataSourceName);\r\n                    var pathToExpand = pathsToExpand.join('.');\r\n                    var req = store.get(result[association.mappedBy]);\r\n\r\n                    req.onsuccess = function () {\r\n                        if (req.result && !req.result[model.deletedFieldName]) {\r\n                            result[association.alias] = req.result;\r\n                            if (pathsToExpand.length > 1) {\r\n                                expandPath(req.result, model, pathToExpand.substring(pathToExpand.indexOf('.') + 1), db).then(function () {\r\n                                    dfd.resolve();\r\n                                }, function (e) {\r\n                                    dfd.reject(e);\r\n                                });\r\n                            } else {\r\n                                dfd.resolve();\r\n                            }\r\n                        } else {\r\n                            result[association.alias] = null;\r\n                            dfd.resolve();\r\n                        }\r\n                    };\r\n                    req.onerror = function () {\r\n                        dfd.reject(this.error);\r\n                    };\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Expands a has many model association\r\n                var expandHasMany = function (model, result, association, db, pathsToExpand) {\r\n                    var dfd = $q.defer();\r\n                    var tx = db.transaction([model.dataSourceName]);\r\n                    var store = tx.objectStore(model.dataSourceName);\r\n                    var pathToExpand = pathsToExpand.join('.');\r\n                    var index = store.index(association.mappedBy);\r\n                    var req = index.openCursor();\r\n                    var results = [];\r\n\r\n                    req.onsuccess = function (event) {\r\n                        var cursor = event.target.result;\r\n                        if (cursor) {\r\n                            if (!cursor.value[model.deletedFieldName] && cursor.key === result[model.primaryKeyFieldName]) {\r\n                                results.push(cursor.value);\r\n                            }\r\n                            cursor.continue();\r\n                        } else {\r\n\r\n                            var filter = association.getOptions(result).$filter();\r\n                            if (filter) {\r\n                                results = applyFilter(results, filter);\r\n                            }\r\n\r\n                            result[association.alias] = results;\r\n                            if (pathsToExpand.length > 1) {\r\n                                var i;\r\n                                var promises = [];\r\n                                for (i = 0; i < results.length; i++) {\r\n                                    promises.push(expandPath(results[i], model, pathToExpand.substring(pathToExpand.indexOf('.') + 1), db));\r\n                                }\r\n                                $q.all(promises).then(function () {\r\n                                    dfd.resolve();\r\n                                }, function (e) {\r\n                                    dfd.reject(e);\r\n                                });\r\n                            } else {\r\n                                dfd.resolve();\r\n                            }\r\n                        }\r\n                    };\r\n                    req.onerror = function () {\r\n                        dfd.reject(this.error);\r\n                    };\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Expands a Model association given an expand path\r\n                // Recursive\r\n                var expandPath = function (result, theModel, pathToExpand, db) {\r\n                    var pathsToExpand = pathToExpand.split('.');\r\n                    var toExpand = pathsToExpand[0];\r\n\r\n                    if (toExpand) {\r\n                        var association = theModel.getAssociationByAlias(toExpand);\r\n                        var model = association.getModel();\r\n                        if (association && model) {\r\n                            if (association.type === 'hasOne') {\r\n                                return expandHasOne(model, result, association, db, pathsToExpand);\r\n                            } else if (association.type === 'hasMany') {\r\n                                return expandHasMany(model, result, association, db, pathsToExpand);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // There is nothing left to expand, just resolve.\r\n                    var dfd = $q.defer();\r\n                    dfd.resolve();\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Expands all Model associations defined in the query options $expand clause\r\n                var performExpand = function (result, theModel, queryOptions, db) {\r\n                    var dfd = $q.defer();\r\n                    var $expand;\r\n                    var promises = [];\r\n\r\n                    if (queryOptions) {\r\n                        $expand = queryOptions.$expand();\r\n                    }\r\n                    if ($expand) {\r\n                        var paths = $expand.split(',');\r\n                        var i;\r\n                        for (i = 0; i < paths.length; i++) {\r\n                            promises.push(expandPath(result, theModel, paths[i], db));\r\n                        }\r\n                        $q.all(promises).then(function () {\r\n                            dfd.resolve();\r\n                        }, function (e) {\r\n                            $log.error('IndexedDBAdapter: PerformExpand', e, $expand, result);\r\n                            dfd.reject(e);\r\n                        });\r\n                    } else {\r\n                        dfd.resolve();\r\n                    }\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Checks if a result matches a predicate filter\r\n                var resultMatchesFilters = function (result, predicate) {\r\n                    return predicate.test(result);\r\n                };\r\n\r\n                // Applies a filter predicate to a set of results and returns an array of the matching results\r\n                var applyFilter = function (results, filterPredicate) {\r\n                    if (filterPredicate && results) {\r\n                        results = results.filter(function (a) {\r\n                            return resultMatchesFilters(a, filterPredicate);\r\n                        });\r\n                    }\r\n                    return results;\r\n                };\r\n\r\n                // Sorts the data given an $orderBy clause in query options\r\n                var applyOrderBy = function (theModel, results, queryOptions) {\r\n                    if (!queryOptions) {\r\n                        return results;\r\n                    }\r\n                    var orderBy = queryOptions.$orderBy();\r\n                    if (orderBy) {\r\n                        var property = orderBy.split(' ')[0];\r\n                        var direction = orderBy.split(' ')[1] || \"\";\r\n                        var isDate = false;\r\n\r\n                        if (theModel.fields[property] && theModel.fields[property].type === \"DATE\") {\r\n                            isDate = true;\r\n                        }\r\n\r\n                        results.sort(function (a, b) {\r\n                            var aTest = a[property];\r\n                            var bTest = b[property];\r\n\r\n                            if (isDate) {\r\n                                aTest = new Date(aTest);\r\n                                bTest = new Date(bTest);\r\n                            }\r\n\r\n                            if (aTest > bTest) {\r\n                                return (direction.toLowerCase() === 'desc') ? -1 : 1;\r\n                            }\r\n                            if (bTest > aTest) {\r\n                                return (direction.toLowerCase() === 'desc') ? 1 : -1;\r\n                            }\r\n                            return 0;\r\n                        });\r\n                    }\r\n                    return results;\r\n                };\r\n\r\n                // Applies paging to a set of results and returns a sliced array of results\r\n                var applyPaging = function (results, queryOptions) {\r\n                    if (!queryOptions) {\r\n                        return results;\r\n                    }\r\n                    var top = queryOptions.$top();\r\n                    var skip = queryOptions.$skip();\r\n                    if (top > 0 && skip >= 0) {\r\n                        results = results.slice(skip, skip + top);\r\n                    }\r\n                    return results;\r\n                };\r\n\r\n                return adapter;\r\n            }\r\n        ];\r\n    }\r\n]);","angular.module('recall.adapter.oDataREST', ['recall']).provider('recallODataRESTAdapter', [\r\n    function () {\r\n\r\n        var providerConfig = {};\r\n\r\n        // Sets the location of the server api endpoint\r\n        providerConfig.serverAPILocation = \"/api/\";\r\n        this.setServerAPILocation = function (serverAPILocation) {\r\n            if (serverAPILocation.substring(serverAPILocation.length - 1) !== \"/\") {\r\n                serverAPILocation += '/';\r\n            }\r\n            providerConfig.serverAPILocation = serverAPILocation;\r\n            return this;\r\n        };\r\n\r\n        // Sets the name of the results property in the server's response\r\n        providerConfig.resultsField = \"results\";\r\n        this.setResultsField = function (resultsField) {\r\n            providerConfig.resultsField = resultsField;\r\n            return this;\r\n        };\r\n\r\n        // Sets the name of the total count property in the server's response\r\n        providerConfig.totalCountFiled = \"totalCount\";\r\n        this.setTotalCountFiled = function (totalCountFiled) {\r\n            providerConfig.totalCountFiled = totalCountFiled;\r\n            return this;\r\n        };\r\n\r\n        this.$get = [\r\n            '$http',\r\n            '$log',\r\n            '$q',\r\n            'recallAdapterResponse',\r\n\r\n            function ($http,\r\n                      $log,\r\n                      $q,\r\n                      AdapterResponse) {\r\n\r\n                var adapter = {};\r\n\r\n                // Appends the query options to the URL\r\n                var getUrlWithOptions = function (url, queryOptions) {\r\n                    url += queryOptions ? queryOptions.parseOptions() : \"\";\r\n                    return url;\r\n                };\r\n\r\n                /**\r\n                 * Creates a new Entity\r\n                 * @param {Object} theModel The model of the entity to create\r\n                 * @param {Object} modelInstance The entity to create\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.create = function (theModel, modelInstance) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var url = providerConfig.serverAPILocation + theModel.dataSourceName;\r\n\r\n                    $http.post(url, modelInstance)\r\n                        .success(function (data, status, headers, config) {\r\n                            response = new AdapterResponse(data, 1, status, headers, config);\r\n                            $log.debug('ODataRESTAdapter: Create ' + theModel.modelName, response);\r\n                            dfd.resolve(response);\r\n                        })\r\n                        .error(function (error, status, headers, config) {\r\n                            response = new AdapterResponse(error, 0, status, headers, config);\r\n                            $log.error('ODataRESTAdapter: Create ' + theModel.modelName, response, modelInstance);\r\n                            dfd.reject(response);\r\n                        });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Finds a single entity given a primary key\r\n                 * @param {Object} theModel The model of the entity to find\r\n                 * @param {String|Number} pk The primary key of the entity to find\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use for $expand\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.findOne = function (theModel, pk, queryOptions) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    if (!pk) {\r\n                        response = new AdapterResponse(\"No Primary Key was supplied\", 0, AdapterResponse.BAD_REQUEST);\r\n                        $log.error('ODataRESTAdapter: FindOne ' + theModel.modelName, response, pk, queryOptions);\r\n                        return $q.reject(response);\r\n                    }\r\n\r\n                    var url = getUrlWithOptions(providerConfig.serverAPILocation + theModel.dataSourceName + \"/\" + pk, queryOptions);\r\n\r\n                    $http.get(url)\r\n                        .success(function (data, status, headers, config) {\r\n                            response = new AdapterResponse(data, 1, status, headers, config);\r\n                            $log.debug('ODataRESTAdapter: FindOne ' + theModel.modelName, response, pk, queryOptions);\r\n                            dfd.resolve(response);\r\n                        })\r\n                        .error(function (error, status, headers, config) {\r\n                            response = new AdapterResponse(error, 0, status, headers, config);\r\n                            $log.error('ODataRESTAdapter: FindOne ' + theModel.modelName, response, pk, queryOptions);\r\n                            dfd.reject(response);\r\n                        });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Finds a set of Model entities\r\n                 * @param {Object} theModel The model of the entities to find\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.find = function (theModel, queryOptions) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var url = getUrlWithOptions(providerConfig.serverAPILocation + theModel.dataSourceName, queryOptions);\r\n\r\n                    $http.get(url)\r\n                        .success(function (data, status, headers, config) {\r\n                            var results = data;\r\n                            var totalCount;\r\n\r\n                            if (providerConfig.resultsField) {\r\n                                results = data[providerConfig.resultsField];\r\n                                if (providerConfig.totalCountFiled && data[providerConfig.totalCountFiled]) {\r\n                                    totalCount = data[providerConfig.totalCountFiled];\r\n                                }\r\n                            }\r\n\r\n                            response = new AdapterResponse(results, totalCount, status, headers, config);\r\n                            $log.debug('ODataRESTAdapter: Find ' + theModel.modelName, response, queryOptions);\r\n                            dfd.resolve(response);\r\n                        })\r\n                        .error(function (error, status, headers, config) {\r\n                            response = new AdapterResponse(error, 0, status, headers, config);\r\n                            $log.error('ODataRESTAdapter: Find ' + theModel.modelName, response, queryOptions);\r\n                            dfd.reject(response);\r\n                        });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Updates a Model entity given the primary key of the entity\r\n                 * @param {Object} theModel The model of the entity to update\r\n                 * @param {String|Number} pk The primary key of the entity\r\n                 * @param {Object} modelInstance The entity to update\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.update = function (theModel, pk, modelInstance) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    if (!pk) {\r\n                        response = new AdapterResponse(\"No Primary Key was supplied\", 0, AdapterResponse.BAD_REQUEST);\r\n                        $log.error('ODataRESTAdapter: Update ' + theModel.modelName, response, modelInstance);\r\n                        return $q.reject(response);\r\n                    }\r\n\r\n                    var url = providerConfig.serverAPILocation + theModel.dataSourceName + \"/\" + pk;\r\n\r\n                    $http.put(url, modelInstance)\r\n                        .success(function (data, status, headers, config) {\r\n                            response = new AdapterResponse(data, 1, status, headers, config);\r\n                            $log.debug('ODataRESTAdapter: Update ' + theModel.modelName, response, modelInstance);\r\n                            dfd.resolve(response);\r\n                        })\r\n                        .error(function (error, status, headers, config) {\r\n                            response = new AdapterResponse(error, 0, status, headers, config);\r\n                            $log.error('ODataRESTAdapter: Update ' + theModel.modelName, response, modelInstance);\r\n                            dfd.reject(response);\r\n                        });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Removes an Entity given the primary key of the entity to remove\r\n                 * @param {Object} theModel The model of the entity to remove\r\n                 * @param {String|Number} pk The primary key of the entity\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.remove = function (theModel, pk) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    if (!pk) {\r\n                        response = new AdapterResponse(\"No Primary Key was supplied\", 0, AdapterResponse.BAD_REQUEST);\r\n                        $log.error('ODataRESTAdapter: Remove ' + theModel.modelName, response, pk);\r\n                        return $q.reject(response);\r\n                    }\r\n\r\n                    var url = providerConfig.serverAPILocation + theModel.dataSourceName + \"/\" + pk;\r\n\r\n                    $http({method: 'DELETE', url: url})\r\n                        .success(function (data, status, headers, config) {\r\n                            response = new AdapterResponse(data, 1, status, headers, config);\r\n                            $log.debug('ODataRESTAdapter: Remove ' + theModel.modelName, response, pk);\r\n                            dfd.resolve(response);\r\n                        })\r\n                        .error(function (error, status, headers, config) {\r\n                            response = new AdapterResponse(error, 0, status, headers, config);\r\n                            $log.error('ODataRESTAdapter: Remove ' + theModel.modelName, response, pk);\r\n                            dfd.reject(response);\r\n                        });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Takes an Array of entities and creates/updates/deletes them\r\n                 * @param {Object} theModel The model of the entities to synchronize\r\n                 * @param {Array} dataToSync An array of objects to create/update/delete\r\n                 * @param {String} lastSync An ISO Date String representing the last sync\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.synchronize = function (theModel, dataToSync, lastSync) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var url = providerConfig.serverAPILocation + theModel.dataSourceName;\r\n\r\n                    $http.put(url, {data: dataToSync, lastSync: lastSync})\r\n                        .success(function (data, status, headers, config) {\r\n                            var results = data;\r\n                            var totalCount;\r\n\r\n                            if (providerConfig.resultsField) {\r\n                                results = data[providerConfig.resultsField];\r\n                                if (providerConfig.totalCountFiled && data[providerConfig.totalCountFiled]) {\r\n                                    totalCount = data[providerConfig.totalCountFiled];\r\n                                }\r\n                            }\r\n\r\n                            response = new AdapterResponse(results, totalCount, status, headers, config);\r\n                            $log.debug('ODataRESTAdapter: Synchronize ' + theModel.modelName, response, dataToSync);\r\n                            dfd.resolve(response);\r\n                        })\r\n                        .error(function (error, status, headers, config) {\r\n                            response = new AdapterResponse(error, 0, status, headers, config);\r\n                            $log.error('ODataRESTAdapter: Synchronize ' + theModel.modelName, response, dataToSync);\r\n                            dfd.reject(response);\r\n                        });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                return adapter;\r\n            }\r\n        ];\r\n    }\r\n]);","angular.module('recall.adapter.sync', ['recall']).provider('recallSyncAdapter', [\r\n    function () {\r\n\r\n        var providerConfig = {};\r\n\r\n        // Sets the master adapter\r\n        providerConfig.masterAdapter = \"\";\r\n        this.setMaster = function (masterAdapter) {\r\n            providerConfig.masterAdapter = masterAdapter;\r\n            return this;\r\n        };\r\n\r\n        // Sets the slave adapter\r\n        providerConfig.slaveAdapter = \"\";\r\n        this.setSlave = function (slaveAdapter) {\r\n            providerConfig.slaveAdapter = slaveAdapter;\r\n            return this;\r\n        };\r\n\r\n        this.$get = [\r\n            '$injector',\r\n            '$log',\r\n            '$q',\r\n            'recallAdapterResponse',\r\n            'recallLocalStorage',\r\n            'recallPredicate',\r\n            'recallPreparedQueryOptions',\r\n\r\n            function ($injector,\r\n                      $log,\r\n                      $q,\r\n                      AdapterResponse,\r\n                      localStorage,\r\n                      Predicate,\r\n                      PreparedQueryOptions) {\r\n\r\n                var adapter = {};\r\n\r\n                /**\r\n                 * Validates the Model during creation\r\n                 * @param {Object} theModel\r\n                 * @returns {Boolean} True if the model passes validation\r\n                 */\r\n                adapter.modelValidationHook = function (theModel) {\r\n                    var master = getMaster();\r\n                    var slave = getSlave();\r\n\r\n                    if (!master) {\r\n                        $log.error('SyncAdapter: Master Adapter not Set', this, theModel);\r\n                        return false;\r\n                    }\r\n                    if (!slave) {\r\n                        $log.error('SyncAdapter: Slave Adapter not Set', this, theModel);\r\n                        return false;\r\n                    }\r\n\r\n                    if (typeof master.synchronize !== 'function') {\r\n                        $log.error('SyncAdapter: Synchronize handler not found on the master adapter', this, theModel);\r\n                        return false;\r\n                    }\r\n                    if (typeof slave.synchronize !== 'function') {\r\n                        $log.error('SyncAdapter: Synchronize handler not found on the slave adapter', this, theModel);\r\n                        return false;\r\n                    }\r\n\r\n                    if (typeof master.modelValidationHook === 'function' && !master.modelValidationHook(theModel)) {\r\n                        return false;\r\n                    }\r\n                    if (typeof slave.modelValidationHook === 'function' && !slave.modelValidationHook(theModel)) {\r\n                        return false;\r\n                    }\r\n\r\n                    return true;\r\n                };\r\n\r\n                /**\r\n                 * Creates a new Entity on the Slave and attempts to sync to the Master\r\n                 * @param {Object} theModel The model of the entity to create\r\n                 * @param {Object} modelInstance The entity to create\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use for preferMaster\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.create = function (theModel, modelInstance, queryOptions) {\r\n                    if (queryOptions && queryOptions.preferMaster() === true) {\r\n                        return getMaster().create(theModel, modelInstance);\r\n                    } else {\r\n                        return getSlave().create(theModel, modelInstance);\r\n                    }\r\n                    // TODO: Sync\r\n                };\r\n\r\n                /**\r\n                 * Finds a single entity given a primary key on the Slave\r\n                 * @param {Object} theModel The model of the entity to find\r\n                 * @param {String|Number} pk The primary key of the entity to find\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use for $expand and preferMaster\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.findOne = function (theModel, pk, queryOptions) {\r\n                    var response;\r\n\r\n                    if (!pk) {\r\n                        response = new AdapterResponse(\"No Primary Key was supplied\", 0, AdapterResponse.BAD_REQUEST);\r\n                        $log.error('SyncAdapter: FindOne ' + theModel.modelName, response, pk, queryOptions);\r\n                        return $q.reject(response);\r\n                    }\r\n\r\n                    if (queryOptions && queryOptions.preferMaster() === true) {\r\n                        return getMaster().findOne(theModel, pk, queryOptions);\r\n                    } else {\r\n                        return getSlave().findOne(theModel, pk, queryOptions);\r\n                    }\r\n                };\r\n\r\n                /**\r\n                 * Finds a set of Model entities on the Slave\r\n                 * @param {Object} theModel The model of the entities to find\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.find = function (theModel, queryOptions) {\r\n                    if (queryOptions && queryOptions.preferMaster() === true) {\r\n                        return getMaster().find(theModel, queryOptions);\r\n                    } else {\r\n                        return getSlave().find(theModel, queryOptions);\r\n                    }\r\n                };\r\n\r\n                /**\r\n                 * Updates a Model entity on the Slave given the primary key of the entity. Attempts to sync to the Master.\r\n                 * @param {Object} theModel The model of the entity to update\r\n                 * @param {String|Number} pk The primary key of the entity\r\n                 * @param {Object} modelInstance The entity to update\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use for preferMaster\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.update = function (theModel, pk, modelInstance, queryOptions) {\r\n                    var response;\r\n\r\n                    if (!pk) {\r\n                        response = new AdapterResponse(\"No Primary Key was supplied\", 0, AdapterResponse.BAD_REQUEST);\r\n                        $log.error('SyncAdapter: Update ' + theModel.modelName, response, modelInstance);\r\n                        return $q.reject(response);\r\n                    }\r\n\r\n                    if (queryOptions && queryOptions.preferMaster() === true) {\r\n                        return getMaster().update(theModel, pk, modelInstance);\r\n                    } else {\r\n                        return getSlave().update(theModel, pk, modelInstance);\r\n                    }\r\n                    // TODO: Sync\r\n                };\r\n\r\n                /**\r\n                 * Removes an Entity from the Slave given the primary key of the entity to remove. Attempts to sync to the Master.\r\n                 * @param {Object} theModel The model of the entity to remove\r\n                 * @param {String|Number} pk The primary key of the entity\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use for preferMaster\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.remove = function (theModel, pk, queryOptions) {\r\n                    var response;\r\n\r\n                    if (!pk) {\r\n                        response = new AdapterResponse(\"No Primary Key was supplied\", 0, AdapterResponse.BAD_REQUEST);\r\n                        $log.error('SyncAdapter: Remove ' + theModel.modelName, response, pk);\r\n                        return $q.reject(response);\r\n                    }\r\n\r\n                    if (queryOptions && queryOptions.preferMaster() === true) {\r\n                        return getMaster().remove(theModel, pk);\r\n                    } else {\r\n                        return getSlave().remove(theModel, pk);\r\n                    }\r\n                    // TODO: Sync\r\n                };\r\n\r\n                /**\r\n                 * Manually Syncs the Slave and Master adapters\r\n                 * @param {Object|Array} theModel The model of the entities to synchronize or an array of models to synchronize\r\n                 * @returns {promise} Resolved with an AdapterResponse for each model synchronized\r\n                 */\r\n                adapter.synchronize = function (theModel) {\r\n                    if (theModel instanceof Array) {\r\n                        var promises = [];\r\n                        var i;\r\n                        for (i = 0; i < theModel.length; i++) {\r\n                            promises.push(processSyncRequest(theModel[i]));\r\n                        }\r\n                        return $q.all(promises);\r\n                    }\r\n                    return processSyncRequest(theModel);\r\n                };\r\n\r\n                var getAdapter = function (adapter) {\r\n                    return (typeof adapter === 'string') ? $injector.get(adapter) : adapter;\r\n                };\r\n                var getMaster = function () {\r\n                    return getAdapter(providerConfig.masterAdapter);\r\n                };\r\n                var getSlave = function () {\r\n                    return getAdapter(providerConfig.slaveAdapter);\r\n                };\r\n\r\n                /**\r\n                 * Represents the result of a sync operation\r\n                 * @param {Array} sent An array of entities sent to the remote adapter\r\n                 * @param {Array} returned An array of data objects returned from the remote adapter\r\n                 * @param {Number} totalProcessed The total number of entities processed in the sync operation\r\n                 * @param {String} status The operation's status message\r\n                 * @constructor\r\n                 */\r\n                var SyncResult = function (sent, returned, totalProcessed, status) {\r\n                    this.sent = sent;\r\n                    this.returned = returned;\r\n                    this.totalProcessed = totalProcessed;\r\n                    this.status = status;\r\n                };\r\n\r\n                /**\r\n                 * Retrieves the last sync time for a given model in ISO format\r\n                 * @param {Object} theModel The model initiating the sync (the sync time is stored per model)\r\n                 * @returns {String} The last sync date in ISO format\r\n                 */\r\n                var getLastSyncTime = function (theModel) {\r\n                    return localStorage.get(localStorage.keys.LAST_SYNC, theModel.modelName);\r\n                };\r\n\r\n                /**\r\n                 * Updates the last sync time for a model\r\n                 * @param {Object} theModel The model initiating the sync\r\n                 */\r\n                var updateLastSyncTimeToNow = function (theModel) {\r\n                    localStorage.set(localStorage.keys.LAST_SYNC, new Date().toISOString(), theModel.modelName);\r\n                };\r\n\r\n                /**\r\n                 * Sends data from the local adapter to the remote adapter to update.\r\n                 * @param {Object} theModel The model initiating the sync\r\n                 * @param {Array} data An array of objects to send to the remote adapter to sync\r\n                 * @returns {promise}\r\n                 */\r\n                var sendSyncRequestData = function (theModel, data) {\r\n                    var lastSync = getLastSyncTime(theModel);\r\n                    return getMaster().synchronize(theModel, data, lastSync);\r\n                };\r\n\r\n                /**\r\n                 * Processes the data sent back from the remote adapter. This will update/create/delete records in the local\r\n                 * adapter\r\n                 * @param {Object} theModel The model initiating the sync\r\n                 * @param {Array} data An array of data objects to update/create/delete\r\n                 * @returns {promise}\r\n                 */\r\n                var processSyncResponseData = function (theModel, data) {\r\n                    var lastSync = getLastSyncTime(theModel);\r\n                    return getSlave().synchronize(theModel, data, lastSync);\r\n                };\r\n\r\n                /**\r\n                 * Initializes a sync request\r\n                 * @param {Object} theModel The model initiating the sync\r\n                 * @returns {promise}\r\n                 */\r\n                var processSyncRequest = function (theModel) {\r\n                    var dfd = $q.defer();\r\n                    var result;\r\n\r\n                    var syncRequestData = [];\r\n                    var syncResponseData = [];\r\n                    var totalItemsProcessed = 0;\r\n\r\n                    var handleError = function (e) {\r\n                        result = new SyncResult(syncRequestData, syncResponseData, totalItemsProcessed, e);\r\n                        $log.error('SyncAdapter: ' + theModel.modelName, result);\r\n                        dfd.reject(result);\r\n                    };\r\n\r\n                    var handleComplete = function () {\r\n                        result = new SyncResult(syncRequestData, syncResponseData, totalItemsProcessed, 'Complete');\r\n                        $log.debug('SyncAdapter: ' + theModel.modelName, 'Sync Complete', result);\r\n                        updateLastSyncTimeToNow(theModel);\r\n                        dfd.resolve(result);\r\n                    };\r\n\r\n                    $log.debug('SyncAdapter: ' + theModel.modelName + ' Sync Started');\r\n\r\n                    var lastSync = getLastSyncTime(theModel);\r\n                    var queryOptions = new PreparedQueryOptions();\r\n                    if (lastSync) {\r\n                        var predicate = new Predicate('lastModified').greaterThanOrEqualTo(lastSync);\r\n                        queryOptions.$filter(predicate);\r\n                    }\r\n\r\n                    getSlave().find(theModel, queryOptions, true).then(function (response) {\r\n                        $log.debug('SyncAdapter: Sending ' + response.count + ' local item(s) to sync');\r\n                        totalItemsProcessed += response.count;\r\n                        syncRequestData = response.data;\r\n                        sendSyncRequestData(theModel, response.data).then(function (syncResponse) {\r\n                            // TODO: Handle Conflicts\r\n\r\n                            $log.debug('SyncAdapter: Found ' + syncResponse.data.length + ' remote item(s) to sync');\r\n                            totalItemsProcessed += syncResponse.data.length;\r\n                            syncResponseData = syncResponse.data;\r\n\r\n                            if (syncResponse.data.length > 0) {\r\n                                processSyncResponseData(theModel, syncResponse.data).then(handleComplete, handleError);\r\n                            } else {\r\n                                // No data from server to sync\r\n                                handleComplete();\r\n                            }\r\n                        }, handleError);\r\n                    }, handleError);\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                return adapter;\r\n            }\r\n        ];\r\n    }\r\n]);","angular.module('recall.adapter.webSQL', ['recall']).provider('recallWebSQLAdapter', [\r\n\r\n    function () {\r\n\r\n        var providerConfig = {};\r\n\r\n        // Sets the name of the WebSQL DB database to use\r\n        providerConfig.dbName = 'recall';\r\n        this.setDbName = function (dbName) {\r\n            providerConfig.dbName = dbName;\r\n            return this;\r\n        };\r\n\r\n        // Sets the version of the WebSQL DB to use\r\n        providerConfig.dbVersion = 1;\r\n        this.setDbVersion = function (dbVersion) {\r\n            providerConfig.dbVersion = dbVersion;\r\n            return this;\r\n        };\r\n\r\n        // Sets the size of the WebSQL DB\r\n        providerConfig.dbSize = 5 * 1024 * 1024; // 5MB\r\n        this.setDbSize = function (dbSize) {\r\n            providerConfig.dbSize = dbSize;\r\n            return this;\r\n        };\r\n\r\n        // Sets the default function to be used as a \"GUID\" generator\r\n        providerConfig.pkGenerator = function () {\r\n            function s4() {\r\n                return Math.floor((1 + Math.random()) * 0x10000)\r\n                    .toString(16)\r\n                    .substring(1);\r\n            }\r\n\r\n            return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\r\n                s4() + '-' + s4() + s4() + s4();\r\n        };\r\n        this.setPkGenerator = function (pkGenerator) {\r\n            providerConfig.pkGenerator = pkGenerator;\r\n            return this;\r\n        };\r\n\r\n        // Drops the WebSQL DB database\r\n        this.dropDatabase = function () {\r\n            return true;\r\n        };\r\n\r\n        this.$get = [\r\n            '$log',\r\n            '$q',\r\n            '$window',\r\n            'recall',\r\n            'recallAdapterResponse',\r\n\r\n            function ($log, $q, $window, recall, AdapterResponse) {\r\n\r\n                var adapter = {};\r\n                var connectionPromise;\r\n                var db;\r\n\r\n                var generatePrimaryKey = providerConfig.pkGenerator;\r\n\r\n                var createTable = function (model, fields, tx) {\r\n                    var dfd = $q.defer();\r\n\r\n                    var sql = 'CREATE TABLE IF NOT EXISTS `' + model.dataSourceName + '` (' + fields.join(', ') + ')';\r\n                    $log.debug(\"WebSQLAdapter: \" + sql);\r\n                    tx.executeSql(sql, [], function () {\r\n                        dfd.resolve();\r\n                    }, function (tx, e) {\r\n                        dfd.reject(e);\r\n                    });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                var createTables = function (db) {\r\n                    var promises = [];\r\n\r\n                    db.transaction(function (tx) {\r\n                        var i;\r\n                        var model;\r\n                        var field;\r\n                        var column;\r\n                        var fields;\r\n                        var models = recall.getModels();\r\n\r\n                        for (i = 0; i < models.length; i++) {\r\n                            model = models[i];\r\n\r\n                            fields = [];\r\n                            for (field in model.fields) {\r\n                                if (model.fields.hasOwnProperty(field)) {\r\n                                    column = \"`\" + model.fields[field].name + \"`\";\r\n                                    switch (model.fields[field].type) {\r\n                                    case 'STRING':\r\n                                        column += ' TEXT';\r\n                                        break;\r\n                                    case 'NUMBER':\r\n                                        column += ' REAL';\r\n                                        break;\r\n                                    case 'DATE':\r\n                                        column += ' TEXT';\r\n                                        break;\r\n                                    case 'BOOLEAN':\r\n                                        column += ' INTEGER';\r\n                                        break;\r\n                                    default:\r\n                                        $log.error('WebSQLAdapter: Migrate - An unknown field type was found.');\r\n                                        return;\r\n                                    }\r\n\r\n                                    if (model.fields[field].primaryKey) {\r\n                                        column += ' PRIMARY KEY';\r\n                                    }\r\n                                    if (model.fields[field].unique) {\r\n                                        column += ' UNIQUE';\r\n                                    }\r\n                                    if (model.fields[field].notNull) {\r\n                                        column += ' NOT NULL';\r\n                                    }\r\n                                    fields.push(column);\r\n                                }\r\n                            }\r\n                            promises.push(createTable(model, fields, tx));\r\n                        }\r\n                    });\r\n\r\n                    return $q.all(promises);\r\n                };\r\n\r\n                var addColumnToTable = function (modelField, tableName, tx) {\r\n                    var dfd = $q.defer();\r\n\r\n                    var column = \"`\" + modelField.name + \"`\";\r\n                    switch (modelField.type) {\r\n                    case 'STRING':\r\n                        column += ' TEXT';\r\n                        break;\r\n                    case 'NUMBER':\r\n                        column += ' REAL';\r\n                        break;\r\n                    case 'DATE':\r\n                        column += ' TEXT';\r\n                        break;\r\n                    case 'BOOLEAN':\r\n                        column += ' INTEGER';\r\n                        break;\r\n                    default:\r\n                        $log.error('WebSQLAdapter: Migrate - An unknown field type was found.');\r\n                        return;\r\n                    }\r\n\r\n                    if (modelField.primaryKey) {\r\n                        column += ' PRIMARY KEY';\r\n                    }\r\n                    if (modelField.unique) {\r\n                        column += ' UNIQUE';\r\n                    }\r\n                    if (modelField.notNull) {\r\n                        column += ' NOT NULL';\r\n                    }\r\n\r\n                    var sql = \"ALTER TABLE `\" + tableName + \"` ADD \" + column;\r\n                    $log.debug(\"WebSQLAdapter: \" + sql);\r\n                    tx.executeSql(sql, [], function () {\r\n                        dfd.resolve();\r\n                    }, function (tx, e) {\r\n                        dfd.reject(e);\r\n                    });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                var migrateTable = function (model, tableRows, tx) {\r\n                    var promises = [];\r\n\r\n                    var i;\r\n                    var row;\r\n                    var tableSQL = null;\r\n                    for (i = 0; i < tableRows.length; i++) {\r\n                        row = tableRows[i];\r\n                        if (row.tbl_name === model.dataSourceName) {\r\n                            tableSQL = row.sql;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (tableSQL) {\r\n                        var field;\r\n                        var missingFields = [];\r\n                        for (field in model.fields) {\r\n                            // TODO: This needs to check if the field name is the same as the model name\r\n                            if (model.fields.hasOwnProperty(field) && tableSQL.indexOf(\"`\" + field + \"`\") === -1) {\r\n                                missingFields.push(model.fields[field]);\r\n                            }\r\n                        }\r\n\r\n                        for (i = 0; i < missingFields.length; i++) {\r\n                            promises.push(addColumnToTable(missingFields[i], model.dataSourceName, tx));\r\n                        }\r\n                    }\r\n\r\n                    return $q.all(promises);\r\n                };\r\n\r\n                var migrateTables = function (db) {\r\n                    var dfd = $q.defer();\r\n\r\n                    db.transaction(function (tx) {\r\n                        var sql = \"SELECT tbl_name, sql from sqlite_master WHERE type = 'table'\";\r\n                        $log.debug(\"WebSQLAdapter: \" + sql);\r\n                        tx.executeSql(sql, [], function (tx, result) {\r\n                            var model;\r\n                            var models = recall.getModels();\r\n                            var promises = [];\r\n\r\n                            var i;\r\n                            var tableRows = [];\r\n                            for (i = 0; i < result.rows.length; i++) {\r\n                                tableRows.push(result.rows.item(i));\r\n                            }\r\n\r\n                            for (i = 0; i < models.length; i++) {\r\n                                model = models[i];\r\n                                promises.push(migrateTable(model, tableRows, tx));\r\n                            }\r\n\r\n                            $q.all(promises).then(function () {\r\n                                dfd.resolve();\r\n                            }, function (e) {\r\n                                dfd.reject(e);\r\n                            });\r\n                        }, function (tx, e) {\r\n                            dfd.reject(e);\r\n                        });\r\n                    });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Handles version differences in the database and initializes or migrates the db\r\n                var migrate = function (db) {\r\n                    var dfd = $q.defer();\r\n\r\n                    createTables(db).then(function () {\r\n                        migrateTables(db).then(function () {\r\n                            dfd.resolve();\r\n                        }, function (e) {\r\n                            $log.error(\"WebSQLAdapter: Table Migration Failed\", e);\r\n                            dfd.reject(e);\r\n                        });\r\n                    }, function (e) {\r\n                        $log.error(\"WebSQLAdapter: Table Creation Failed\", e);\r\n                        dfd.reject(e);\r\n                    });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Connects to the database\r\n                var connect = function () {\r\n                    var dfd = $q.defer();\r\n\r\n                    if (db) {\r\n                        dfd.resolve(db);\r\n                    } else if (connectionPromise) {\r\n                        return connectionPromise;\r\n                    } else {\r\n                        try {\r\n                            var theDb = $window.openDatabase(providerConfig.dbName, providerConfig.dbVersion.toString(), 'Recall WebSQL Database', providerConfig.dbSize);\r\n                            migrate(theDb).then(function () {\r\n                                db = theDb;\r\n                                dfd.resolve(db);\r\n                            }, function (e) {\r\n                                dfd.reject(e);\r\n                            });\r\n                        } catch (e) {\r\n                            dfd.reject(e);\r\n                        }\r\n                    }\r\n\r\n                    connectionPromise = dfd.promise;\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // TODO: Cascade create\r\n                /**\r\n                 * Creates a new Entity\r\n                 * @param {Object} theModel The model of the entity to create\r\n                 * @param {Object} modelInstance The entity to create\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.create = function (theModel, modelInstance) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var buildError = function (e) {\r\n                        response = new AdapterResponse(e, 0, AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                        $log.error('WebSQLAdapter: Create ' + theModel.modelName, response, modelInstance);\r\n                        return response;\r\n                    };\r\n\r\n                    modelInstance[theModel.primaryKeyFieldName] = generatePrimaryKey();\r\n                    modelInstance = theModel.getRawModelObject(modelInstance, false);\r\n                    modelInstance[theModel.lastModifiedFieldName] = new Date();\r\n\r\n                    connect().then(function () {\r\n                        db.transaction(function (tx) {\r\n                            var columns = [];\r\n                            var columnValues = [];\r\n                            var placeholders = [];\r\n                            var field;\r\n                            for (field in theModel.fields) {\r\n                                if (theModel.fields.hasOwnProperty(field) && modelInstance.hasOwnProperty(field)) {\r\n                                    columns.push(\"`\" + field + \"`\");\r\n                                    columnValues.push(convertValueToSQL(theModel.fields[field], modelInstance));\r\n                                    placeholders.push('?');\r\n                                }\r\n                            }\r\n                            var sql = \"INSERT INTO `\" + theModel.dataSourceName + \"` (\" + columns.join(',') + \") VALUES (\" + placeholders.join(\",\") +\")\";\r\n                            $log.debug(\"WebSQLAdapter: \" + sql, columnValues);\r\n                            tx.executeSql(sql, columnValues, function (tx, result) {\r\n                                response = new AdapterResponse(modelInstance, 1, AdapterResponse.CREATED);\r\n                                $log.debug('WebSQLAdapter: Create ' + theModel.modelName, response);\r\n                                dfd.resolve(response);\r\n                            }, function (tx, e) {\r\n                                dfd.reject(buildError(e));\r\n                            });\r\n                        });\r\n                    }, function (e) {\r\n                        dfd.reject(buildError(e));\r\n                    });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Finds a single entity given a primary key\r\n                 * @param {Object} theModel The model of the entity to find\r\n                 * @param {String|Number} pk The primary key of the entity to find\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use for $expand\r\n                 * @param {Boolean} [includeDeleted=false] If true, includes soft-deleted entities\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.findOne = function (theModel, pk, queryOptions, includeDeleted) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var buildError = function (e, status) {\r\n                        response = new AdapterResponse(e, 0, status || AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                        $log.error('WebSQLAdapter: FindOne ' + theModel.modelName, response, pk, queryOptions);\r\n                        return response;\r\n                    };\r\n\r\n                    connect().then(function () {\r\n                        db.transaction(function (tx) {\r\n\r\n                            var sql = \"SELECT * FROM `\" + theModel.dataSourceName + \"` WHERE `\" + theModel.primaryKeyFieldName + \"`=?\";\r\n\r\n                            if (!includeDeleted && theModel.deletedFieldName) {\r\n                                sql += \" AND `\" + theModel.deletedFieldName + \"`=0\";\r\n                            }\r\n\r\n                            $log.debug(\"WebSQLAdapter: \" + sql, [pk]);\r\n                            tx.executeSql(sql, [pk], function (tx, result) {\r\n                                var results = transformSQLResult(theModel, result);\r\n                                if (results[0]) {\r\n                                    performExpand(results[0], theModel, queryOptions, tx).then(function () {\r\n                                        response = new AdapterResponse(results[0], 1);\r\n                                        $log.debug('WebSQLAdapter: FindOne ' + theModel.modelName, response, pk, queryOptions);\r\n                                        dfd.resolve(response);\r\n                                    }, function (e) {\r\n                                        dfd.reject(buildError(e));\r\n                                    });\r\n                                } else {\r\n                                    dfd.reject(buildError('Not Found', AdapterResponse.NOT_FOUND));\r\n                                }\r\n                            }, function (tx, e) {\r\n                                dfd.reject(buildError(e));\r\n                            });\r\n                        });\r\n                    }, function (e) {\r\n                        dfd.reject(buildError(e));\r\n                    });\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Finds a set of Model entities\r\n                 * @param {Object} theModel The model of the entities to find\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use\r\n                 * @param {Boolean} [includeDeleted=false] If true, includes soft-deleted entities\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.find = function (theModel, queryOptions, includeDeleted) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var buildError = function (e) {\r\n                        response = new AdapterResponse(e, 0, AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                        $log.error('WebSQLAdapter: Find ' + theModel.modelName, response, queryOptions);\r\n                        return response;\r\n                    };\r\n\r\n                    connect().then(function () {\r\n                        db.transaction(function (tx) {\r\n                            var filterPredicate;\r\n\r\n                            if (queryOptions && queryOptions.$filter()) {\r\n                                filterPredicate = queryOptions.$filter();\r\n                            }\r\n\r\n                            var sql = \"SELECT * FROM `\" + theModel.dataSourceName + \"`\";\r\n\r\n                            if (!includeDeleted && theModel.deletedFieldName) {\r\n                                sql += \" WHERE `\" + theModel.deletedFieldName + \"`=0\";\r\n                            }\r\n\r\n                            $log.debug(\"WebSQLAdapter: \" + sql);\r\n                            tx.executeSql(sql, [], function (tx, result) {\r\n                                var results = transformSQLResult(theModel, result);\r\n                                var i;\r\n                                var promises = [];\r\n                                for (i = 0; i < results.length; i++) {\r\n                                    promises.push(performExpand(results[i], theModel, queryOptions, tx));\r\n                                }\r\n                                $q.all(promises).then(function () {\r\n                                    results = applyFilter(results, filterPredicate);\r\n                                    results = applyOrderBy(theModel, results, queryOptions);\r\n\r\n                                    var totalCount = results.length;\r\n\r\n                                    // TODO: This is not very efficient but indexedDB does not seem to support a better way with filters and ordering\r\n                                    results = applyPaging(results, queryOptions);\r\n                                    response = new AdapterResponse(results, totalCount);\r\n\r\n                                    $log.debug('WebSQLAdapter: Find ' + theModel.modelName, response, queryOptions);\r\n                                    dfd.resolve(response);\r\n                                }, function (e) {\r\n                                    dfd.reject(buildError(e));\r\n                                });\r\n                            }, function (tx, e) {\r\n                                dfd.reject(buildError(e));\r\n                            });\r\n                        });\r\n                    }, function (e) {\r\n                        dfd.reject(buildError(e));\r\n                    });\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // TODO: Cascade Update\r\n                /**\r\n                 * Updates a Model entity given the primary key of the entity\r\n                 * @param {Object} theModel The model of the entity to update\r\n                 * @param {String|Number} pk The primary key of the entity\r\n                 * @param {Object} modelInstance The entity to update\r\n                 * @param {Boolean} [includeDeleted=false] If true, includes soft-deleted entities\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.update = function (theModel, pk, modelInstance, includeDeleted) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var buildError = function (e) {\r\n                        response = new AdapterResponse(e, 0, AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                        $log.error('WebSQLAdapter: Update ' + theModel.modelName, response, modelInstance);\r\n                        return response;\r\n                    };\r\n\r\n                    modelInstance = theModel.getRawModelObject(modelInstance, false);\r\n                    modelInstance[theModel.lastModifiedFieldName] = new Date();\r\n\r\n                    connect().then(function () {\r\n                        db.transaction(function (tx) {\r\n                            var columns = [];\r\n                            var columnValues = [];\r\n                            var field;\r\n                            for (field in theModel.fields) {\r\n                                if (theModel.fields.hasOwnProperty(field) && modelInstance.hasOwnProperty(field) && field !== theModel.primaryKeyFieldName) {\r\n                                    columns.push(\"`\" + field + \"`=?\");\r\n                                    columnValues.push(convertValueToSQL(theModel.fields[field], modelInstance));\r\n                                }\r\n                            }\r\n                            columnValues.push(pk);\r\n                            var sql = \"UPDATE `\" + theModel.dataSourceName + \"` SET \" + columns.join(',') + \" WHERE `\" + theModel.primaryKeyFieldName + \"`=?\";\r\n\r\n                            if (!includeDeleted && theModel.deletedFieldName) {\r\n                                sql += \" AND `\" + theModel.deletedFieldName + \"`=0\";\r\n                            }\r\n\r\n                            $log.debug(\"WebSQLAdapter: \" + sql, columnValues);\r\n                            tx.executeSql(sql, columnValues, function (tx, result) {\r\n                                response = new AdapterResponse(modelInstance, 1);\r\n                                $log.debug('WebSQLAdapter: Update ' + theModel.modelName, response, modelInstance);\r\n                                dfd.resolve(response);\r\n                            }, function (tx, e) {\r\n                                dfd.reject(buildError(e));\r\n                            });\r\n                        });\r\n                    }, function (e) {\r\n                        dfd.reject(buildError(e));\r\n                    });\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // TODO: Cascade Delete:\r\n                /**\r\n                 * Removes an Entity given the primary key of the entity to remove\r\n                 * @param {Object} theModel The model of the entity to remove\r\n                 * @param {String|Number} pk The primary key of the entity\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.remove = function (theModel, pk) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var buildError = function (e) {\r\n                        response = new AdapterResponse(e, 0, AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                        $log.error('WebSQLAdapter: Remove ' + theModel.modelName, response);\r\n                        return response;\r\n                    };\r\n\r\n                    var columns = [\"`\" + theModel.lastModifiedFieldName + \"`=?\", \"`\" + theModel.deletedFieldName + \"`=?\"];\r\n                    var columnValues = [new Date().toISOString(), 1, pk];\r\n\r\n                    connect().then(function () {\r\n                        db.transaction(function (tx) {\r\n\r\n                            var sql = \"UPDATE `\" + theModel.dataSourceName + \"` SET \" + columns.join(',') + \" WHERE `\" + theModel.primaryKeyFieldName + \"`=?\";\r\n\r\n                            $log.debug(\"WebSQLAdapter: \" + sql, columnValues);\r\n                            tx.executeSql(sql, columnValues, function (tx, result) {\r\n                                response = new AdapterResponse(null, 1, AdapterResponse.NO_CONTENT);\r\n                                $log.debug('WebSQLAdapter: Remove ' + theModel.modelName, response);\r\n                                dfd.resolve(response);\r\n                            }, function (tx, e) {\r\n                                dfd.reject(buildError(e));\r\n                            });\r\n                        });\r\n                    }, function (e) {\r\n                        dfd.reject(buildError(e));\r\n                    });\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Takes an Array of entities and creates/updates/deletes them\r\n                 * @param {Object} theModel The model of the entities to synchronize\r\n                 * @param {Array} dataToSync An array of objects to create/update/delete\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.synchronize = function (theModel, dataToSync) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var buildError = function (e) {\r\n                        response = new AdapterResponse(e, 0, AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                        $log.error('WebSQLAdapter: Synchronize ' + theModel.modelName, response, dataToSync);\r\n                        return response;\r\n                    };\r\n\r\n                    connect().then(function () {\r\n                        db.transaction(function (tx) {\r\n                            var i;\r\n                            var promises = [];\r\n                            for (i = 0; i < dataToSync.length; i++) {\r\n                                if (dataToSync[i][theModel.deletedFieldName]) {\r\n                                    promises.push(hardRemove(theModel, tx, dataToSync[i][theModel.primaryKeyFieldName]));\r\n                                } else {\r\n                                    promises.push(createOrUpdate(theModel, tx, dataToSync[i]));\r\n                                }\r\n                            }\r\n\r\n                            $q.all(promises).then(function (results) {\r\n                                response = new AdapterResponse(results, results.length, AdapterResponse.OK);\r\n                                $log.debug('WebSQLAdapter: Synchronize ' + theModel.modelName, response, dataToSync);\r\n                                dfd.resolve(response);\r\n                            }, function (e) {\r\n                                dfd.reject(buildError(e));\r\n                            });\r\n                        });\r\n                    }, function (e) {\r\n                        dfd.reject(buildError(e));\r\n                    });\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Creates a new Entity if not found or updates the existing one. Used in synchronization.\r\n                var createOrUpdate = function (theModel, tx, modelInstance) {\r\n                    var dfd = $q.defer();\r\n\r\n                    var columns = [];\r\n                    var columnValues = [];\r\n                    var placeholders = [];\r\n                    var field;\r\n                    for (field in theModel.fields) {\r\n                        if (theModel.fields.hasOwnProperty(field) && modelInstance.hasOwnProperty(field)) {\r\n                            columns.push(\"`\" + field + \"`\");\r\n                            columnValues.push(convertValueToSQL(theModel.fields[field], modelInstance));\r\n                            placeholders.push('?');\r\n                        }\r\n                    }\r\n                    var sql = \"INSERT OR REPLACE INTO `\" + theModel.dataSourceName + \"` (\" + columns.join(',') + \") VALUES (\" + placeholders.join(\",\") +\")\";\r\n                    $log.debug(\"WebSQLAdapter: \" + sql, columnValues);\r\n                    tx.executeSql(sql, columnValues, function (tx, result) {\r\n                        var results = transformSQLResult(theModel, result);\r\n                        dfd.resolve(results[0]);\r\n                    }, function (tx, e) {\r\n                        dfd.reject(e);\r\n                    });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Hard deletes an Entity. Used in synchronization.\r\n                var hardRemove = function (theModel, tx, pk) {\r\n                    var dfd = $q.defer();\r\n\r\n                    var sql = \"DELETE FROM `\" + theModel.dataSourceName + \"` WHERE `\" + theModel.primaryKeyFieldName + \"`=?\";\r\n                    $log.debug(\"WebSQLAdapter: \" + sql, [pk]);\r\n                    tx.executeSql(sql, [pk], function (tx, result) {\r\n                        dfd.resolve();\r\n                    }, function (tx, e) {\r\n                        dfd.reject(e);\r\n                    });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Expands a has one model association\r\n                var expandHasOne = function (model, result, association, tx, pathsToExpand) {\r\n                    var dfd = $q.defer();\r\n                    var pathToExpand = pathsToExpand.join('.');\r\n\r\n                    if (result[association.mappedBy] === undefined) {\r\n                        result[association.mappedBy] = null;\r\n                        dfd.resolve();\r\n                        return dfd.promise;\r\n                    }\r\n\r\n                    var sql = \"SELECT * FROM `\" + model.dataSourceName + \"` WHERE `\" + model.primaryKeyFieldName + \"`=?\";\r\n\r\n                    if (model.deletedFieldName) {\r\n                        sql += \" AND `\" + model.deletedFieldName + \"`=0\";\r\n                    }\r\n\r\n                    $log.debug(\"WebSQLAdapter: \" + sql, [result[association.mappedBy]]);\r\n                    tx.executeSql(sql, [result[association.mappedBy]], function (tx, response) {\r\n                        var results = transformSQLResult(model, response);\r\n                        if (results[0]) {\r\n                            result[association.alias] = results[0];\r\n                            if (pathsToExpand.length > 1) {\r\n                                expandPath(results[0], model, pathToExpand.substring(pathToExpand.indexOf('.') + 1), tx).then(function () {\r\n                                    dfd.resolve();\r\n                                }, function (e) {\r\n                                    dfd.reject(e);\r\n                                });\r\n                            } else {\r\n                                dfd.resolve();\r\n                            }\r\n                        } else {\r\n                            result[association.alias] = null;\r\n                            dfd.resolve();\r\n                        }\r\n                    }, function (tx, e) {\r\n                        dfd.reject(e);\r\n                    });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Expands a has many model association\r\n                var expandHasMany = function (model, result, association, tx, pathsToExpand) {\r\n                    var dfd = $q.defer();\r\n                    var pathToExpand = pathsToExpand.join('.');\r\n\r\n                    var sql = \"SELECT * FROM `\" + model.dataSourceName + \"` WHERE `\" + association.mappedBy + \"`=?\";\r\n\r\n                    if (model.deletedFieldName) {\r\n                        sql += \" AND `\" + model.deletedFieldName + \"`=0\";\r\n                    }\r\n\r\n                    $log.debug(\"WebSQLAdapter: \" + sql, [result[model.primaryKeyFieldName]]);\r\n                    tx.executeSql(sql, [result[model.primaryKeyFieldName]], function (tx, response) {\r\n                        var results = transformSQLResult(model, response);\r\n\r\n                        var filter = association.getOptions(result).$filter();\r\n                        if (filter) {\r\n                            results = applyFilter(results, filter);\r\n                        }\r\n\r\n                        result[association.alias] = results;\r\n                        if (pathsToExpand.length > 1) {\r\n                            var i;\r\n                            var promises = [];\r\n                            for (i = 0; i < results.length; i++) {\r\n                                promises.push(expandPath(results[i], model, pathToExpand.substring(pathToExpand.indexOf('.') + 1), tx));\r\n                            }\r\n                            $q.all(promises).then(function () {\r\n                                dfd.resolve();\r\n                            }, function (e) {\r\n                                dfd.reject(e);\r\n                            });\r\n                        } else {\r\n                            dfd.resolve();\r\n                        }\r\n                    }, function (tx, e) {\r\n                        dfd.reject(e);\r\n                    });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Expands a Model association given an expand path\r\n                // Recursive\r\n                var expandPath = function (result, theModel, pathToExpand, tx) {\r\n                    var pathsToExpand = pathToExpand.split('.');\r\n                    var toExpand = pathsToExpand[0];\r\n\r\n                    if (toExpand) {\r\n                        var association = theModel.getAssociationByAlias(toExpand);\r\n                        var model = association.getModel();\r\n                        if (association && model) {\r\n                            if (association.type === 'hasOne') {\r\n                                return expandHasOne(model, result, association, tx, pathsToExpand);\r\n                            } else if (association.type === 'hasMany') {\r\n                                return expandHasMany(model, result, association, tx, pathsToExpand);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // There is nothing left to expand, just resolve.\r\n                    var dfd = $q.defer();\r\n                    dfd.resolve();\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Expands all Model associations defined in the query options $expand clause\r\n                var performExpand = function (result, theModel, queryOptions, tx) {\r\n                    var dfd = $q.defer();\r\n                    var $expand;\r\n                    var promises = [];\r\n\r\n                    if (queryOptions) {\r\n                        $expand = queryOptions.$expand();\r\n                    }\r\n                    if ($expand) {\r\n                        var paths = $expand.split(',');\r\n                        var i;\r\n                        for (i = 0; i < paths.length; i++) {\r\n                            promises.push(expandPath(result, theModel, paths[i], tx));\r\n                        }\r\n                        $q.all(promises).then(function () {\r\n                            dfd.resolve();\r\n                        }, function (e) {\r\n                            $log.error('WebSQLAdapter: PerformExpand', e, $expand, result);\r\n                            dfd.reject(e);\r\n                        });\r\n                    } else {\r\n                        dfd.resolve();\r\n                    }\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                // Checks if a result matches a predicate filter\r\n                var resultMatchesFilters = function (result, predicate) {\r\n                    return predicate.test(result);\r\n                };\r\n\r\n                // Applies a filter predicate to a set of results and returns an array of the matching results\r\n                var applyFilter = function (results, filterPredicate) {\r\n                    if (filterPredicate && results) {\r\n                        results = results.filter(function (a) {\r\n                            return resultMatchesFilters(a, filterPredicate);\r\n                        });\r\n                    }\r\n                    return results;\r\n                };\r\n\r\n                // Sorts the data given an $orderBy clause in query options\r\n                var applyOrderBy = function (theModel, results, queryOptions) {\r\n                    if (!queryOptions) {\r\n                        return results;\r\n                    }\r\n                    var orderBy = queryOptions.$orderBy();\r\n                    if (orderBy) {\r\n                        var property = orderBy.split(' ')[0];\r\n                        var direction = orderBy.split(' ')[1] || \"\";\r\n                        var isDate = false;\r\n\r\n                        if (theModel.fields[property] && theModel.fields[property].type === \"DATE\") {\r\n                            isDate = true;\r\n                        }\r\n\r\n                        results.sort(function (a, b) {\r\n                            var aTest = a[property];\r\n                            var bTest = b[property];\r\n\r\n                            if (isDate) {\r\n                                aTest = new Date(aTest);\r\n                                bTest = new Date(bTest);\r\n                            }\r\n\r\n                            if (aTest > bTest) {\r\n                                return (direction.toLowerCase() === 'desc') ? -1 : 1;\r\n                            }\r\n                            if (bTest > aTest) {\r\n                                return (direction.toLowerCase() === 'desc') ? 1 : -1;\r\n                            }\r\n                            return 0;\r\n                        });\r\n                    }\r\n                    return results;\r\n                };\r\n\r\n                // Applies paging to a set of results and returns a sliced array of results\r\n                var applyPaging = function (results, queryOptions) {\r\n                    if (!queryOptions) {\r\n                        return results;\r\n                    }\r\n                    var top = queryOptions.$top();\r\n                    var skip = queryOptions.$skip();\r\n                    if (top > 0 && skip >= 0) {\r\n                        results = results.slice(skip, skip + top);\r\n                    }\r\n                    return results;\r\n                };\r\n\r\n                var convertValueToSQL = function (field, modelInstance) {\r\n                    switch (field.type) {\r\n                    case 'STRING':\r\n                    case 'NUMBER':\r\n                        return modelInstance[field.name];\r\n                    case 'DATE':\r\n                        if (modelInstance[field.name] instanceof Date) {\r\n                            return modelInstance[field.name].toISOString();\r\n                        }\r\n                        return new Date(modelInstance[field.name]).toISOString();\r\n                    case 'BOOLEAN':\r\n                        if (modelInstance[field.name] === true || modelInstance[field.name] === 1) {\r\n                            return 1;\r\n                        }\r\n                        return 0;\r\n                    }\r\n                };\r\n\r\n                var convertValueToModel = function (field, sqlResultInstance) {\r\n                    switch (field.type) {\r\n                    case 'STRING':\r\n                    case 'NUMBER':\r\n                    case 'DATE':\r\n                        return sqlResultInstance[field.name];\r\n                    case 'BOOLEAN':\r\n                        return sqlResultInstance[field.name] === 1;\r\n                    }\r\n                };\r\n\r\n                var getSQLModelObject = function (theModel, result) {\r\n                    var field;\r\n                    var obj = {};\r\n                    for (field in theModel.fields) {\r\n                        if (theModel.fields.hasOwnProperty(field) && result.hasOwnProperty(field)) {\r\n                            obj[field] = convertValueToModel(theModel.fields[field], result);\r\n                        }\r\n                    }\r\n                    return obj;\r\n                };\r\n\r\n                var transformSQLResult = function (theModel, result) {\r\n                    var results = [];\r\n                    var i;\r\n                    for (i = 0; i < result.rows.length; i++) {\r\n                        results.push(getSQLModelObject(theModel, result.rows.item(i)));\r\n                    }\r\n\r\n                    return results;\r\n                };\r\n\r\n                return adapter;\r\n            }\r\n        ];\r\n    }\r\n]);","angular.module('recall').factory(\"recallAssociation\", [\r\n    '$injector',\r\n    '$log',\r\n    '$q',\r\n    'recallPredicate',\r\n    'recallPreparedQueryOptions',\r\n\r\n    function ($injector, $log, $q, Predicate, PreparedQueryOptions) {\r\n\r\n        /**\r\n         * Association class\r\n         * @param {Object|Association} definition\r\n         * @constructor\r\n         */\r\n        var Association = function (definition) {\r\n            this.invalid = false;\r\n\r\n            if (definition.type) {\r\n                this.type = definition.type;\r\n            } else if (typeof definition.hasOne === 'string') {\r\n                this.type = 'hasOne';\r\n            } else if (typeof definition.hasMany === 'string') {\r\n                this.type = 'hasMany';\r\n            }\r\n\r\n            this.modelName = definition.modelName || definition.hasOne || definition.hasMany;\r\n            this.alias = definition.as || definition.alias || this.modelName;\r\n            this.mappedBy = definition.mappedBy || definition.foreignKey;\r\n            this.getOptions = definition.getOptions || function () { return new PreparedQueryOptions(); };\r\n\r\n            if (!this.modelName || !this.type || !this.mappedBy) {\r\n                $log.error('Association: The association definition is invalid', definition);\r\n                this.invalid = true;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Gets the Association's Model\r\n         * @returns {Object} The model\r\n         */\r\n        Association.prototype.getModel = function () {\r\n            var recallService = $injector.get('recall');\r\n            return recallService.getModel(this.modelName);\r\n        };\r\n\r\n        /**\r\n         * Expands the association and adds it to the entity\r\n         * @param {Entity} entity The entity to add the expanded association to\r\n         * @returns {promise}\r\n         */\r\n        Association.prototype.expand = function (entity) {\r\n            var dfd = $q.defer();\r\n            var self = this;\r\n            var Model = self.getModel();\r\n\r\n            if (!Model) {\r\n                return $q.reject('Association: Expand could not find the association\\'s Model');\r\n            }\r\n\r\n            var queryOptions = self.getOptions(entity);\r\n\r\n            if (self.type === 'hasOne') {\r\n\r\n                Model.adapter.findOne(Model, entity[self.mappedBy], queryOptions).then(function (response) {\r\n                    entity[self.alias] = Model.getRawModelObject(response.data);\r\n                    // TODO: The association should be an entity and should have transformResult called\r\n                    entity.$entity.storedState[self.alias] = Model.getRawModelObject(response.data);\r\n                    $log.debug(\"Association: Expand\", self.type, self.alias, entity, response);\r\n                    dfd.resolve();\r\n                }, function (e) {\r\n                    $log.error(\"Association: Expand\", self.type, self.alias, entity, e);\r\n                    dfd.reject(e);\r\n                });\r\n\r\n            } else if (self.type === 'hasMany') {\r\n\r\n                var predicate = new Predicate(self.mappedBy).equals(entity.$getPrimaryKey());\r\n                var existingPredicate = queryOptions.$filter();\r\n                if (existingPredicate) {\r\n                    predicate = Predicate.join([predicate, existingPredicate]);\r\n                }\r\n                queryOptions.$filter(predicate);\r\n\r\n                Model.adapter.find(Model, queryOptions).then(function (response) {\r\n                    var base = [];\r\n                    var stored = [];\r\n                    // TODO: The associations should be entities and should have transformResult called\r\n                    var i;\r\n                    for (i = 0; i < response.data.length; i++) {\r\n                        base.push(Model.getRawModelObject(response.data[i]));\r\n                        stored.push(Model.getRawModelObject(response.data[i]));\r\n                    }\r\n                    entity[self.alias] = base;\r\n                    entity.$entity.storedState[self.alias] = stored;\r\n                    $log.debug(\"Association: Expand\", self.type, self.alias, entity, response);\r\n                    dfd.resolve();\r\n                }, function (e) {\r\n                    $log.error(\"Association: Expand\", self.type, self.alias, entity, e);\r\n                    dfd.reject(e);\r\n                });\r\n            } else {\r\n                $log.error(\"Association: Expand Association type not supported\", self.type, self.alias, entity);\r\n                dfd.reject(\"Association type not supported\");\r\n            }\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        return Association;\r\n    }\r\n]);","angular.module('recall').factory(\"recallEntity\", [\r\n    '$log',\r\n    '$q',\r\n\r\n    function ($log, $q) {\r\n\r\n        /**\r\n         * An Entity is an object that represents an instance of a Model. The Entity instance exposes save and remove\r\n         * operations as well as dirty checking and validation.\r\n         *\r\n         * @param {Object} [object] The object to construct the entity from\r\n         * @param {Object} model The model that created the Entity\r\n         * @param {Boolean} [persisted = false] Set to true if this model was created from an object that came from an adapter.\r\n         * @constructor\r\n         */\r\n        var Entity = function (object, model, persisted) {\r\n            model.extendFromRawObject(this, object || {});\r\n\r\n            Object.defineProperty(this, \"$entity\", {value: {\r\n                lastDirtyCheck: new Date().getTime(),\r\n                lastDirtyState: false,\r\n                persisted: persisted === true,\r\n                saveInProgress: false,\r\n                storedState: null\r\n            }});\r\n            Object.defineProperty(this, \"$model\", {value: model});\r\n\r\n            this.$convertAssociationsToEntities();\r\n            this.$storeState();\r\n        };\r\n\r\n        /**\r\n         * Retrieves the Primary Key for the Entity.\r\n         * @returns {String|Number} The Primary Key\r\n         */\r\n        Entity.prototype.$getPrimaryKey = function () {\r\n            return this[this.$model.primaryKeyFieldName];\r\n        };\r\n\r\n        /**\r\n         *\r\n         */\r\n        Entity.prototype.$convertAssociationsToEntities = function () {\r\n            var i;\r\n            var alias;\r\n            var ForeignModel;\r\n            var a;\r\n            for (i = 0; i < this.$model.associations.length; i++) {\r\n                alias = this.$model.associations[i].alias;\r\n                ForeignModel = this.$model.associations[i].getModel();\r\n\r\n                if (this.$model.associations[i].type === 'hasOne') {\r\n                    if (this[alias] !== undefined && !this[alias].$entity) {\r\n                        this[alias] = new ForeignModel.Entity(this[alias], this.$entity.persisted);\r\n                    }\r\n                } else if (this.$model.associations[i].type === 'hasMany') {\r\n                    if (this[alias] !== undefined && this[alias] instanceof Array) {\r\n                        for (a = 0; a < this[alias].length; a++) {\r\n                            if (!this[alias][a].$entity) {\r\n                                this[alias][a] = new ForeignModel.Entity(this[alias][a], this.$entity.persisted);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Expands a given association on an Entity\r\n         *\r\n         * @param {String} associationName The alias of the association to expand\r\n         * @returns {promise}\r\n         */\r\n        Entity.prototype.$expand = function (associationName) {\r\n            var association = this.$model.getAssociationByAlias(associationName);\r\n\r\n            if (!association) {\r\n                return $q.reject('Entity: $expand could not find the association.');\r\n            }\r\n\r\n            return association.expand(this);\r\n        };\r\n\r\n        /**\r\n         * Validates an entity against the model's field definition.\r\n         * @returns {Boolean} True if the model validation succeeds\r\n         */\r\n        Entity.prototype.$isValid = function () {\r\n            // TODO: This does not validate associations\r\n            var field;\r\n            var matchesType = false;\r\n            var fieldIsUndefined;\r\n            for (field in this.$model.fields) {\r\n                if (this.$model.fields.hasOwnProperty(field)) {\r\n                    fieldIsUndefined = (this[field] === null || this[field] === undefined);\r\n                    if (this.$model.fields[field].notNull === true && fieldIsUndefined) {\r\n                        $log.debug(\"Entity: $isValid returned false\", \"NotNull field was null\", field, this);\r\n                        return false;\r\n                    }\r\n                    switch (this.$model.fields[field].type) {\r\n                        case 'STRING':\r\n                            matchesType = typeof this[field] === 'string';\r\n                            break;\r\n                        case 'NUMBER':\r\n                            matchesType = typeof this[field] === 'number';\r\n                            break;\r\n                        case 'BOOLEAN':\r\n                            matchesType = this[field] === true || this[field] === false;\r\n                            break;\r\n                        case 'DATE':\r\n                            matchesType = this[field] instanceof Date || !isNaN(Date.parse(this[field]));\r\n                            break;\r\n                    }\r\n                    if (!matchesType && !fieldIsUndefined) {\r\n                        $log.debug(\"Entity: $isValid returned false\", field + \" was not a \" + this.$model.fields[field].type, this);\r\n                        return false;\r\n                    }\r\n                    if (typeof this.$model.fields[field].validate === \"function\" && !this.$model.fields[field].validate(this[field])) {\r\n                        $log.debug(\"Entity: $isValid returned false\", \"Custom validator failed\", field, this);\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n\r\n        /**\r\n         * Persists the model with the adapter. This will update the model if it exists in the adapter or create\r\n         * the model if it does not exist.\r\n         *\r\n         * @method $save\r\n         * @param {PreparedQueryOptions} queryOptions\r\n         * @returns {promise} Resolves with the model\r\n         */\r\n        Entity.prototype.$save = function (queryOptions) {\r\n            var dfd = $q.defer();\r\n            var self = this;\r\n\r\n            if (!self.$isValid()) {\r\n                $log.warn(\"Entity: $save: aborted\", self, self[self.$model.primaryKeyFieldName]);\r\n                self.$reset();\r\n                return $q.reject(\"aborted\");\r\n            }\r\n\r\n            self.$entity.saveInProgress = true;\r\n            var itemToSave = self.$model.preSave(self);\r\n\r\n            var updateSavedState = function (entity, succeeded) {\r\n                entity.$entity.saveInProgress = false;\r\n                if (succeeded !== false) {\r\n                    entity.$storeState();\r\n                    entity.$entity.persisted = true;\r\n                } else {\r\n                    entity.$reset();\r\n                }\r\n            };\r\n\r\n            // The model exists in the DB\r\n            if (self.$entity.persisted && itemToSave[self.$model.primaryKeyFieldName]) {\r\n                itemToSave = self.$model.preUpdate(itemToSave);\r\n\r\n                var pk = itemToSave[self.$model.primaryKeyFieldName];\r\n                self.$model.adapter.update(self.$model, pk, itemToSave, queryOptions).then(function (response) {\r\n                    var result = self.$model.transformResult(response.data);\r\n                    self.$model.extendFromRawObject(self, result);\r\n                    updateSavedState(self, true);\r\n                    $log.debug(\"Entity: $save: update\", self, itemToSave, response);\r\n                    dfd.resolve(self);\r\n                }, function (e) {\r\n                    updateSavedState(self, false);\r\n                    $log.error(\"Entity: $save: update\", self, itemToSave, e);\r\n                    dfd.reject(e);\r\n                });\r\n            } else {\r\n                // The model is new\r\n                itemToSave = self.$model.preCreate(itemToSave);\r\n                self.$model.adapter.create(self.$model, itemToSave, queryOptions).then(function (response) {\r\n                    var result = self.$model.transformResult(response.data);\r\n                    self.$model.extendFromRawObject(self, result);\r\n                    updateSavedState(self, true);\r\n                    $log.debug(\"Entity: $save: create\", self, itemToSave, response);\r\n                    dfd.resolve(self);\r\n                }, function (e) {\r\n                    updateSavedState(self, false);\r\n                    $log.error(\"Entity: $save: create\", self, itemToSave, e);\r\n                    dfd.reject(e);\r\n                });\r\n            }\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        /**\r\n         * Removes the model from the adapter.\r\n         *\r\n         * @method $remove\r\n         * @param {PreparedQueryOptions} queryOptions\r\n         * @returns {promise}\r\n         */\r\n        Entity.prototype.$remove = function (queryOptions) {\r\n            if (this[this.$model.primaryKeyFieldName]) {\r\n                return this.$model.adapter.remove(this.$model, this[this.$model.primaryKeyFieldName], queryOptions);\r\n            }\r\n            $log.error('Entity: $remove', 'The primary key was not found');\r\n            return $q.reject(\"The primary key was not found.\");\r\n        };\r\n\r\n        /**\r\n         * Stores the model's state so that it can later be reset to the state if needed. This is called\r\n         * on $save so that the model's state is always at the latest save point.\r\n         *\r\n         * @method $storeState\r\n         */\r\n        Entity.prototype.$storeState = function () {\r\n            this.$entity.storedState = this.$model.getRawModelObject(this, false);\r\n            this.$entity.lastDirtyCheck = new Date().getTime();\r\n            this.$entity.lastDirtyState = false;\r\n        };\r\n\r\n        /**\r\n         * Checks to see if the properties have diverged from the stored state. If so, this means that\r\n         * the properties have been changed and have not been saved.\r\n         *\r\n         * @method $isDirty\r\n         * @returns {Boolean} True if the properties are different than what is in the stored state.\r\n         */\r\n        Entity.prototype.$isDirty = function () {\r\n            if (this.$entity.saveInProgress) {\r\n                return false;\r\n            }\r\n\r\n            if (!this.$entity.storedState) {\r\n                return false;\r\n            }\r\n\r\n            var now = new Date().getTime();\r\n            var delta = now - this.$entity.lastDirtyCheck;\r\n            if (this.$entity.lastDirtyCheck && delta < this.$model.dirtyCheckThreshold) {\r\n                return this.$entity.lastDirtyState;\r\n            }\r\n\r\n            this.$entity.lastDirtyCheck = new Date().getTime();\r\n\r\n            // TODO: This does not dirty check associations\r\n            var field;\r\n            var viewValue;\r\n            var storedValue;\r\n            for (field in this.$model.fields) {\r\n                if (this.$model.fields.hasOwnProperty(field)) {\r\n                    storedValue = this.$entity.storedState[field];\r\n                    viewValue = this[field];\r\n\r\n                    if (storedValue !== viewValue) {\r\n                        $log.debug(\"Entity: $isDirty\", this[this.$model.primaryKeyFieldName], true, delta);\r\n                        this.$entity.lastDirtyState = true;\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            $log.debug(\"Entity: $isDirty\", this[this.$model.primaryKeyFieldName], false, delta);\r\n            this.$entity.lastDirtyState = false;\r\n            return false;\r\n        };\r\n\r\n        /**\r\n         * Resets a model back to its stored state. This will reset any pending changes back to the\r\n         * entities last save or initial retrieval.\r\n         *\r\n         * @method $reset\r\n         * @returns {Array} A list of the changed field names and their before and after values\r\n         */\r\n        Entity.prototype.$reset = function () {\r\n            if (!this.$entity.storedState) {\r\n                this.$storeState();\r\n                return [];\r\n            }\r\n\r\n            var prop;\r\n            var changedProperties = [];\r\n\r\n            for (prop in this.$entity.storedState) {\r\n                if (this.$entity.storedState.hasOwnProperty(prop) && this[prop] !== this.$entity.storedState[prop]) {\r\n                    changedProperties.push({\r\n                        name: prop,\r\n                        before: this[prop],\r\n                        after: this.$entity.storedState[prop]\r\n                    });\r\n                    this[prop] = this.$entity.storedState[prop];\r\n                }\r\n            }\r\n\r\n            this.$entity.lastDirtyState = false;\r\n            this.$entity.lastDirtyCheck = new Date().getTime();\r\n\r\n            $log.debug(\"Entity: $reset\", this[this.$model.primaryKeyFieldName], changedProperties);\r\n            return changedProperties;\r\n        };\r\n\r\n        return Entity;\r\n    }\r\n]);","angular.module('recall').factory('recallLocalStorage', [\r\n    '$document',\r\n    '$window',\r\n\r\n    function ($document, $window) {\r\n\r\n        /**\r\n         * The localStorage utility helps manage the storage and retrieval of registered application data.\r\n         */\r\n        var storage = {\r\n            keys: {\r\n                LAST_SYNC: 'LAST_SYNC'\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Checks if the key is registered with the class.\r\n         *\r\n         * @param {String} key\r\n         * @returns {Boolean} True if the key exists\r\n         */\r\n        var keyExists = function (key) {\r\n            return storage.keys[key] !== undefined;\r\n        };\r\n\r\n        /**\r\n         * Appends a modifier to a key\r\n         * @param {String} key\r\n         * @param {String} modifier\r\n         * @returns {String} The key with the modifier appended.\r\n         */\r\n        var addKeyModifier = function (key, modifier) {\r\n            if (modifier) {\r\n                key += \"_\" + modifier;\r\n            }\r\n            return key;\r\n        };\r\n\r\n        /**\r\n         * Register a new key with the local storage service.\r\n         * @param {String} key\r\n         */\r\n        storage.registerKey = function (key) {\r\n            if (!keyExists(key)) {\r\n                storage.keys[key] = key;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Stores data by key in local browser storage.\r\n         *\r\n         * @param {String} key The key to use as the local storage name. Must be a key found in localStorage.keys.\r\n         * @param {String} value The string value to store.\r\n         * @param {String} keyModifier An additional identifier on the key.\r\n         */\r\n        storage.set = function (key, value, keyModifier) {\r\n            if (keyExists(key)) {\r\n                key = addKeyModifier(key, keyModifier);\r\n                if (storage.supportsLocalStorage()) {\r\n                    $window.localStorage.setItem(key, value);\r\n                } else {\r\n                    var life = 60 * 60 * 24 * 5;\r\n                    var v = encodeURIComponent(value);\r\n                    $document.cookie = key + '=' + v + '; max-age=' + life + ';';\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Retrieves stored data by key.\r\n         *\r\n         * @param {String} key The key of the data to retrieve. Must be a key found in localStorage.keys.\r\n         * @param {String} keyModifier An additional identifier on the key.\r\n         * @return {String} The string value stored.\r\n         */\r\n        storage.get = function (key, keyModifier) {\r\n            var value = \"\";\r\n\r\n            if (keyExists(key)) {\r\n                key = addKeyModifier(key, keyModifier);\r\n                if (storage.supportsLocalStorage()) {\r\n                    value = $window.localStorage.getItem(key) || \"\";\r\n                } else {\r\n                    var regexp = new RegExp(key + \"=([^;]+)\", \"g\");\r\n                    var c = regexp.exec($document.cookie);\r\n\r\n                    if (c) {\r\n                        value = decodeURIComponent(c[1]) ;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return value;\r\n        };\r\n\r\n        /**\r\n         * Removes stored data by key.\r\n         *\r\n         * @param {String} key The key of the data to remove. Must be a key found in localStorage.keys.\r\n         * @param {String} keyModifier An additional identifier on the key.\r\n         */\r\n        storage.remove = function (key, keyModifier) {\r\n            if (keyExists(key)) {\r\n                key = addKeyModifier(key, keyModifier);\r\n                if (storage.supportsLocalStorage()) {\r\n                    $window.localStorage.removeItem(key);\r\n                } else {\r\n                    $document.cookie = key + '=; max-age=0;';\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Checks if the browser supports html5 local storage.\r\n         *\r\n         * @private\r\n         * @returns {Boolean} True if the browser does support html5 local storage.\r\n         */\r\n        storage.supportsLocalStorage = function () {\r\n            try {\r\n                return 'localStorage' in $window && $window.localStorage !== null;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        };\r\n\r\n        return storage;\r\n    }\r\n]);","angular.module('recall').factory(\"recallModel\", [\r\n    '$log',\r\n    '$q',\r\n    'recallAssociation',\r\n    'recallEntity',\r\n    'recallModelField',\r\n\r\n    function ($log,\r\n              $q,\r\n              Association,\r\n              Entity,\r\n              ModelField) {\r\n\r\n        // Bubbles an error promise to the top.\r\n        var propagateError = function (e) {\r\n            return $q.reject(e);\r\n        };\r\n\r\n        /**\r\n         * A Model is in charge of defining a structure for a type of Entity. The model provides CRUD operations for\r\n         * that type of Entity as well as some other utility functions.\r\n         *\r\n         * Models should not be created directly. Instead, the recall service should be used as a proxy for creating\r\n         * models.\r\n         *\r\n         * @constructor\r\n         */\r\n        var Model = function (modelDefinition) {\r\n            this.modelName = modelDefinition.name;\r\n            this.dataSourceName = modelDefinition.dataSourceName || modelDefinition.name;\r\n\r\n            // Add the model definition to the Model as read only\r\n            Object.defineProperty(this, \"modelDefinition\", {value: modelDefinition, writable: false});\r\n\r\n            // Add a Constructor method to the Model for constructing new Entities from the Model: new Model.Entity();\r\n            var self = this;\r\n            Object.defineProperty(this, \"Entity\", {writable: false, configurable: false, value: function (obj, persisted) {\r\n                return( new Entity(obj, self, persisted === true) );\r\n            }});\r\n\r\n            this.fields = {};\r\n            this.associations = [];\r\n\r\n            this.dirtyCheckThreshold = 30;\r\n\r\n            this.primaryKeyFieldName = null;\r\n            this.lastModifiedFieldName = null;\r\n            this.deletedFieldName = null;\r\n            this.adapter = null;\r\n        };\r\n\r\n        Model.prototype.setLastModifiedFieldName = function (lastModifiedFieldName) {\r\n            this.lastModifiedFieldName = lastModifiedFieldName;\r\n        };\r\n\r\n        Model.prototype.setDeletedFieldName = function (deletedFieldName) {\r\n            this.deletedFieldName = deletedFieldName;\r\n        };\r\n\r\n        Model.prototype.setAdapter = function (adapter) {\r\n            this.adapter = adapter;\r\n        };\r\n\r\n        Model.prototype.setDirtyCheckThreshold = function (dirtyCheckThreshold) {\r\n            this.dirtyCheckThreshold = dirtyCheckThreshold;\r\n        };\r\n\r\n        // Initializes the fields using the common ModelField class\r\n        Model.prototype.initializeModelFields = function () {\r\n            var modelDefinitionFields = this.modelDefinition.fields;\r\n            var field;\r\n            var modelField;\r\n            var lastModifiedField;\r\n            var deletedField;\r\n            for (field in modelDefinitionFields) {\r\n                if (modelDefinitionFields.hasOwnProperty(field)) {\r\n                    modelField = new ModelField(field, modelDefinitionFields[field]);\r\n\r\n                    if (modelField.primaryKey) {\r\n                        this.primaryKeyFieldName = field;\r\n                    }\r\n\r\n                    if (modelField.invalid) {\r\n                        return false;\r\n                    } else {\r\n                        this.fields[field] = modelField;\r\n                    }\r\n\r\n                    if (field === this.lastModifiedFieldName) {\r\n                        lastModifiedField = modelField;\r\n                    }\r\n\r\n                    if (field === this.deletedFieldName) {\r\n                        deletedField = field;\r\n                    }\r\n                }\r\n            }\r\n            if (lastModifiedField && lastModifiedField.type !== \"DATE\") {\r\n                $log.error('Model: The last modified field is not a Date field');\r\n                return false;\r\n            }\r\n            if (this.lastModifiedFieldName && !lastModifiedField) {\r\n                this.fields[this.lastModifiedFieldName] = new ModelField(this.lastModifiedFieldName, {\r\n                    type: \"DATE\",\r\n                    index: true,\r\n                    getDefaultValue: function () {\r\n                        return new Date().toISOString();\r\n                    }\r\n                });\r\n            }\r\n            if (deletedField && deletedField.type !== \"BOOLEAN\") {\r\n                $log.error('Model: The deletedField field is not a Boolean field');\r\n                return false;\r\n            }\r\n            if (this.deletedFieldName && !deletedField) {\r\n                this.fields[this.deletedFieldName] = new ModelField(this.deletedFieldName, {\r\n                    type: \"BOOLEAN\",\r\n                    index: true,\r\n                    getDefaultValue: function () {\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n            return true;\r\n        };\r\n\r\n        // TODO: Support many to many associations\r\n        // Initialize the Model associations using the HasOneAssociation and HasManyAssociation classes\r\n        Model.prototype.initializeAssociations = function () {\r\n            var modelDefinitionAssociations = this.modelDefinition.associations;\r\n            if (!modelDefinitionAssociations) {\r\n                return;\r\n            }\r\n            var i;\r\n            var association;\r\n            for (i = 0; i < modelDefinitionAssociations.length; i++) {\r\n                association = new Association(modelDefinitionAssociations[i]);\r\n\r\n                if (association && !association.invalid) {\r\n                    if (association.type === 'hasOne') {\r\n                        if (!this.fields[association.mappedBy]) {\r\n                            // If no field is defined for the foreign key, define one assuming the same foreign key type.\r\n                            this.fields[association.mappedBy] = new ModelField(association.mappedBy, {\r\n                                type: this.fields[this.primaryKeyFieldName].type,\r\n                                index: association.mappedBy\r\n                            });\r\n                        } else {\r\n                            this.fields[association.mappedBy].index = association.mappedBy;\r\n                        }\r\n                    }\r\n\r\n                    this.associations.push(association);\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Gets a Model Association by the alias name. The alias is defined as the \"as\" property on an alias if\r\n         * defined and falls back to the model name if \"as\" is not defined.\r\n         *\r\n         * @param {String} alias The association's alias\r\n         * @returns {Object} The association object\r\n         */\r\n        Model.prototype.getAssociationByAlias = function (alias) {\r\n            var i;\r\n            for (i = 0; i < this.associations.length; i++) {\r\n                if (this.associations[i].alias === alias) {\r\n                    return this.associations[i];\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Extends an entity with a raw object. The raw object could be input from a controller or the result from\r\n         * an adapter.\r\n         *\r\n         * @param {Object} entity The entity to extend\r\n         * @param {Object} rawObject The object to extend from.\r\n         */\r\n        Model.prototype.extendFromRawObject = function (entity, rawObject) {\r\n            angular.extend(entity, this.getRawModelObject(rawObject));\r\n        };\r\n\r\n        /**\r\n         * Gets a raw representation of the model object to be used in adapter transactions. This returns an object\r\n         * in which only the Model defined fields are set. This also looks through expanded associations to set the\r\n         * foreignKey field for one to n associations and sets the association to the raw association object.\r\n         *\r\n         * @param {Object} modelEntity\r\n         * @param {Boolean} [includeExpandedAssociations = true] Include the expanded association in the raw object.\r\n         * @returns {Object} The raw object\r\n         */\r\n        Model.prototype.getRawModelObject = function (modelEntity, includeExpandedAssociations) {\r\n            var object = {};\r\n            var field;\r\n            for (field in this.fields) {\r\n                if (this.fields.hasOwnProperty(field)) {\r\n                    object[field] = modelEntity[field];\r\n                }\r\n            }\r\n            var i;\r\n            var alias;\r\n            var foreignKey;\r\n            var ForeignModel;\r\n            var a;\r\n            for (i = 0; i < this.associations.length; i++) {\r\n                alias = this.associations[i].alias;\r\n                ForeignModel = this.associations[i].getModel();\r\n\r\n                if (this.associations[i].type === 'hasOne') {\r\n                    if (modelEntity[alias] !== undefined) {\r\n                        foreignKey = modelEntity[alias][ForeignModel.primaryKeyFieldName];\r\n                        object[this.associations[i].mappedBy] = foreignKey;\r\n\r\n                        if (includeExpandedAssociations !== false) {\r\n                            object[alias] = ForeignModel.getRawModelObject(modelEntity[alias]);\r\n                        }\r\n                    }\r\n                } else if (this.associations[i].type === 'hasMany' && includeExpandedAssociations !== false) {\r\n                    if (modelEntity[alias] !== undefined && modelEntity[alias] instanceof Array) {\r\n                        object[alias] = [];\r\n                        for (a = 0; a < modelEntity[alias].length; a++) {\r\n                            object[alias].push(ForeignModel.getRawModelObject(modelEntity[alias][a]));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Applies the default values on any undefined field in an entity.\r\n         *\r\n         * @param {Object} entity The entity to set the default values on\r\n         */\r\n        Model.prototype.applyDefaultValues = function (entity) {\r\n            var field;\r\n            for (field in this.fields) {\r\n                if (this.fields.hasOwnProperty(field)) {\r\n                    if (typeof this.fields[field].getDefaultValue === 'function' && entity[field] === undefined) {\r\n                        entity[field] = this.fields[field].getDefaultValue(entity);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Transforms all objects returned by adapter transactions. This calls the transformResult function defined\r\n         * in the model. This also recursively calls transformResult on all associations.\r\n         *\r\n         * @method transformResult\r\n         * @param {Object} resultEntity\r\n         * @returns {Object} The transformed result\r\n         */\r\n        Model.prototype.transformResult = function (resultEntity) {\r\n            var i;\r\n            var alias;\r\n            var ForeignModel;\r\n            var a;\r\n            for (i = 0; i < this.associations.length; i++) {\r\n                alias = this.associations[i].alias;\r\n                ForeignModel = this.associations[i].getModel();\r\n\r\n                if (this.associations[i].type === 'hasOne') {\r\n                    if (resultEntity[alias] !== undefined) {\r\n                        resultEntity[alias] = ForeignModel.transformResult(resultEntity[alias]);\r\n                    }\r\n                } else if (this.associations[i].type === 'hasMany') {\r\n                    if (resultEntity[alias] !== undefined && resultEntity[alias] instanceof Array) {\r\n                        for (a = 0; a < resultEntity[alias].length; a++) {\r\n                            resultEntity[alias][a] = ForeignModel.transformResult(resultEntity[alias][a]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            resultEntity = this.getRawModelObject(resultEntity);\r\n            if (typeof this.modelDefinition.transformResult === 'function') {\r\n                resultEntity = this.modelDefinition.transformResult(resultEntity);\r\n            }\r\n            return resultEntity;\r\n        };\r\n\r\n        /**\r\n         * Ran before the create and update adapter transactions. This calls the preSave function defined in the\r\n         * model.\r\n         *\r\n         * @method preSave\r\n         * @param {Object} entity\r\n         * @returns {Object} The raw transformed entity\r\n         */\r\n        Model.prototype.preSave = function (entity) {\r\n            entity = this.getRawModelObject(entity);\r\n            if (typeof this.modelDefinition.preSave === 'function') {\r\n                return this.modelDefinition.preSave(entity);\r\n            }\r\n            return entity;\r\n        };\r\n\r\n        /**\r\n         * Ran before the create adapter transaction. This applies the default values to any undefined fields and\r\n         * then calls the preCreate function defined in the model.\r\n         *\r\n         * @method preCreate\r\n         * @param {Object} rawEntity\r\n         * @returns {Object} The raw transformed entity\r\n         */\r\n        Model.prototype.preCreate = function (rawEntity) {\r\n            this.applyDefaultValues(rawEntity);\r\n            if (typeof this.modelDefinition.preCreate === 'function') {\r\n                return this.modelDefinition.preCreate(rawEntity);\r\n            }\r\n            return rawEntity;\r\n        };\r\n\r\n        /**\r\n         * Ran before the update adapter transaction. This calls the preUpdate function defined in the model.\r\n         *\r\n         * @method preUpdate\r\n         * @param {Object} rawEntity\r\n         * @returns {Object} The raw transformed entity\r\n         */\r\n        Model.prototype.preUpdate = function (rawEntity) {\r\n            if (typeof this.modelDefinition.preUpdate === 'function') {\r\n                return this.modelDefinition.preUpdate(rawEntity);\r\n            }\r\n            return rawEntity;\r\n        };\r\n\r\n        /**\r\n         * Retrieves a single model from the adapter given a primary key. Query options can be passed to determine\r\n         * select and expand operations.\r\n         *\r\n         * @method findOne\r\n         * @param {String} pk The primary key of the model to retrieve\r\n         * @param {Object} [queryOptions] Query options to use for retrieval\r\n         * @returns {promise} Resolves with the Entity\r\n         */\r\n        Model.prototype.findOne = function (pk, queryOptions) {\r\n            var self = this;\r\n            if (!pk) {\r\n                $log.error('Model: FindOne', 'The primary key was not supplied');\r\n                return $q.reject(\"The primary key was not supplied.\");\r\n            }\r\n\r\n            return this.adapter.findOne(this, pk, queryOptions).then(function (response) {\r\n                var result = self.transformResult(response.data);\r\n                var entity = new Entity(result, self, true);\r\n                $log.debug(\"Model: FindOne\", entity, response, queryOptions);\r\n                return entity;\r\n            }, propagateError);\r\n        };\r\n\r\n        /**\r\n         * Retrieves a list of models from the adapter. Query options can be passed to determine top, skip, order by,\r\n         * select, expand, and filter operations.\r\n         *\r\n         * @method find\r\n         * @param {Object} [queryOptions] Query options to use for retrieval\r\n         * @returns {promise} Resolves with data.results and data.totalCount where results are Entities\r\n         */\r\n        Model.prototype.find = function (queryOptions) {\r\n            var self = this;\r\n            return this.adapter.find(this, queryOptions).then(function (response) {\r\n                var results = [];\r\n                var i;\r\n                for (i = 0; i < response.data.length; i++) {\r\n                    results.push(new Entity(self.transformResult(response.data[i]), self, true));\r\n                }\r\n\r\n                var clientResponse = {\r\n                    results: results,\r\n                    totalCount: response.count\r\n                };\r\n                $log.debug(\"Model: Find\", clientResponse, response, queryOptions);\r\n                return clientResponse;\r\n            }, propagateError);\r\n        };\r\n\r\n        /**\r\n         * Removes the model from the adapter given a primary key.\r\n         *\r\n         * @method remove\r\n         * @param {String} pk The primary key of the model to remove\r\n         * @param {Object} [queryOptions] Query options\r\n         * @returns {promise}\r\n         */\r\n        Model.prototype.remove = function (pk, queryOptions) {\r\n            if (!pk) {\r\n                $log.error('Model: Remove', 'The primary key was not supplied');\r\n                return $q.reject(\"The primary key was not supplied.\");\r\n            }\r\n            return this.adapter.remove(this, pk, queryOptions);\r\n        };\r\n\r\n        return Model;\r\n    }\r\n]);","angular.module('recall').factory(\"recallModelField\", [\r\n    '$log',\r\n\r\n    function ($log) {\r\n\r\n        /**\r\n         * Model Field class to make all model fields consistent\r\n         * @param {String} name\r\n         * @param {Object | String} definition The Field Definition or the Field Type\r\n         * @constructor\r\n         */\r\n        var ModelField = function (name, definition) {\r\n            this.invalid = false;\r\n            this.name = name;\r\n\r\n            this.primaryKey = false;\r\n            this.unique = false;\r\n            this.index = false;\r\n            this.notNull = false;\r\n\r\n            if (typeof definition === 'string') {\r\n                this.type = definition.toUpperCase();\r\n            } else if (definition.primaryKey === true) {\r\n                asPrimaryKey(this, definition);\r\n            } else {\r\n                fromDefinition(this, definition);\r\n            }\r\n\r\n            if (!this.validateField()) {\r\n                $log.error('ModelField: The field definition is invalid', this, definition);\r\n            }\r\n        };\r\n\r\n        ModelField.prototype.validateField = function () {\r\n            if (!this.name || !this.type) {\r\n                this.invalid = true;\r\n                return false;\r\n            }\r\n            if (this.name.match(/[^\\w+]/) !== null) {\r\n                this.invalid = true;\r\n                return false;\r\n            }\r\n            this.invalid = false;\r\n            return true;\r\n        };\r\n\r\n        var asPrimaryKey = function (field, definition) {\r\n            // The adapter or the adapter's handler should enforce uniqueness of the primary key.\r\n            // The index on the primary key should be handled automatically without needing to specify an index.\r\n            // In order to pass validation during creation, the primary key should not be set as notNull.\r\n            // This of course should be enforced by the adapter or the adapter's handler.\r\n            field.primaryKey = true;\r\n            field.type = definition.type ? definition.type.toUpperCase() : null;\r\n            field.notNull = false;\r\n            field.unique = false;\r\n            field.index = false;\r\n\r\n            if (typeof definition.getDefaultValue === 'function') {\r\n                $log.warn('ModelField: getDefaultValue is ignored for the primary key');\r\n            }\r\n            if (typeof definition.validate === 'function') {\r\n                $log.warn('ModelField: validate is ignored for the primary key');\r\n            }\r\n        };\r\n\r\n        var fromDefinition = function (field, definition) {\r\n            field.type = definition.type ? definition.type.toUpperCase() : null;\r\n            field.unique = definition.unique === true;\r\n            field.index = (typeof definition.index === 'string') ? definition.index : (definition.index === true) ? field.name : false;\r\n            field.notNull = definition.notNull === true;\r\n\r\n            if (typeof definition.getDefaultValue === 'function') {\r\n                field.getDefaultValue = definition.getDefaultValue;\r\n            }\r\n            if (typeof definition.validate === 'function') {\r\n                field.validate = definition.validate;\r\n            }\r\n        };\r\n\r\n        return ModelField;\r\n    }\r\n]);","// Date.toISOString polyfill: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\r\nif (!Date.prototype.toISOString) {\r\n    (function () {\r\n\r\n        function pad(number) {\r\n            if (number < 10) {\r\n                return '0' + number;\r\n            }\r\n            return number;\r\n        }\r\n\r\n        Date.prototype.toISOString = function () {\r\n            return this.getUTCFullYear() +\r\n                '-' + pad(this.getUTCMonth() + 1) +\r\n                '-' + pad(this.getUTCDate()) +\r\n                'T' + pad(this.getUTCHours()) +\r\n                ':' + pad(this.getUTCMinutes()) +\r\n                ':' + pad(this.getUTCSeconds()) +\r\n                '.' + (this.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +\r\n                'Z';\r\n        };\r\n    }());\r\n}","angular.module('recall').factory('recallPredicate', [\r\n    function () {\r\n        /*\r\n         * BASED ON:\r\n         * Predicate\r\n         * version: 1.1.2\r\n         * author: David Hamilton\r\n         * license: https://github.com/nova706/PreparedQueryOptions/blob/master/LICENSE.txt (MIT)\r\n         * https://github.com/nova706/PreparedQueryOptions\r\n         *\r\n         */\r\n\r\n        /**\r\n         * A predicate is used for the $filter operator in a query. Predicates can be joined to query\r\n         * using a group of filters with the 'and' operator.\r\n         *\r\n         * This is a helper class for the PreparedQueryOptions class to assist in building complex\r\n         * filter clauses.\r\n         *\r\n         * @class Predicate\r\n         * @constructor\r\n         * @param {String} [property] The property to filter by.\r\n         * @param {Function} [parser] A function that returns the predicate string.\r\n         */\r\n        function Predicate(property, parser) {\r\n            this.property = property;\r\n            this.parser = parser;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Joins a provided set of predicates using the group operator and returns a new Predicate\r\n         *\r\n         * @method join\r\n         * @param {Predicate[]} predicates Array of predicates to join.\r\n         * @param {String} [groupOperator] The operator for the filter set ('and' 'or').\r\n         * @return {Predicate} Predicate object.\r\n         */\r\n        Predicate.join = function (predicates, groupOperator) {\r\n            if (predicates instanceof Array && predicates.length > 0) {\r\n                return new Predicate().join(predicates, groupOperator);\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Sets the property of a predicate\r\n         *\r\n         * @method setProperty\r\n         * @param {String} property\r\n         * @return {Predicate} Predicate object.\r\n         */\r\n        Predicate.prototype.setProperty = function (property) {\r\n            this.property = property;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operator to 'eq' and the value to the input parameter\r\n         *\r\n         * @method equals\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.equals = function (value) {\r\n            this.parser = function () {\r\n                return this.property + ' eq ' + escapeValue(value);\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operator to 'ne' and the value to the input parameter\r\n         *\r\n         * @method notEqualTo\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.notEqualTo = function (value) {\r\n            this.parser = function () {\r\n                return this.property + ' ne ' +  escapeValue(value);\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operator to 'gt' and the value to the input parameter\r\n         *\r\n         * @method greaterThan\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.greaterThan = function (value) {\r\n            this.parser = function () {\r\n                return this.property + ' gt ' +  escapeValue(value);\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operator to 'ge' and the value to the input parameter\r\n         *\r\n         * @method greaterThanOrEqualTo\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.greaterThanOrEqualTo = function (value) {\r\n            this.parser = function () {\r\n                return this.property + ' ge ' +  escapeValue(value);\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operator to 'lt' and the value to the input parameter\r\n         *\r\n         * @method lessThan\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.lessThan = function (value) {\r\n            this.parser = function () {\r\n                return this.property + ' lt ' +  escapeValue(value);\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operator to 'le' and the value to the input parameter\r\n         *\r\n         * @method lessThanOrEqualTo\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.lessThanOrEqualTo = function (value) {\r\n            this.parser = function () {\r\n                return this.property + ' le ' +  escapeValue(value);\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operation to substringof and the value to the input parameter\r\n         *\r\n         * @method contains\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.contains = function (value) {\r\n            this.parser = function () {\r\n                return 'substringof(' +  escapeValue(value) + ', ' + this.property + ')';\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operation to startswith and the value to the input parameter\r\n         *\r\n         * @method startsWith\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.startsWith = function (value) {\r\n            this.parser = function () {\r\n                return 'startswith(' + this.property + ', ' +  escapeValue(value) + ')';\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operation to endswith and the value to the input parameter\r\n         *\r\n         * @method startsWith\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.endsWith = function (value) {\r\n            this.parser = function () {\r\n                return 'endswith(' + this.property + ', ' +  escapeValue(value) + ')';\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Joins an existing predicate with additional predicates using the group operator\r\n         *\r\n         * @method join\r\n         * @param {Predicate|Predicate[]} predicates A single predicate or an array of predicates to join to the existing one.\r\n         * @param {String} [groupOperator] The operator for the filter set ('and' 'or').\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.join = function (predicates, groupOperator) {\r\n            var initialPredicate;\r\n\r\n            if (this.property && typeof this.parser === 'function') {\r\n                initialPredicate = new Predicate(this.property, this.parser);\r\n            }\r\n\r\n            var newPredicates = [];\r\n            if (predicates instanceof Predicate) {\r\n                newPredicates.push(predicates);\r\n            } else if (predicates instanceof Array && predicates.length > 0) {\r\n                var i;\r\n                for (i = 0; i < predicates.length; i++) {\r\n                    if (predicates[i]) {\r\n                        newPredicates.push(predicates[i]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (newPredicates.length > 0) {\r\n                delete this.parser;\r\n                delete this.property;\r\n\r\n                this.joinedPredicates = (this.joinedPredicates) ? this.joinedPredicates.concat(newPredicates) : newPredicates;\r\n                if (groupOperator || !this.groupOperator) {\r\n                    this.groupOperator = (groupOperator === 'or') ? 'or' : 'and';\r\n                }\r\n                if (initialPredicate) {\r\n                    this.joinedPredicates.unshift(initialPredicate);\r\n                }\r\n            }\r\n\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Joins an existing predicate with additional predicates using the 'and' group operator\r\n         *\r\n         * @method and\r\n         * @param {Predicate|Predicate[]} predicates A single predicate or an array of predicates to join to the existing one.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.and = function (predicates) {\r\n            return this.join(predicates, 'and');\r\n        };\r\n\r\n        /**\r\n         * Joins an existing predicate with additional predicates using the 'or' group operator\r\n         *\r\n         * @method or\r\n         * @param {Predicate|Predicate[]} predicates A single predicate or an array of predicates to join to the existing one.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.or = function (predicates) {\r\n            return this.join(predicates, 'or');\r\n        };\r\n\r\n        /**\r\n         * Evaluate an object to see if it matches the predicate filter conditions.\r\n         *\r\n         * @method test\r\n         * @param {Object} object The object to test against the predicate.\r\n         * @param {Boolean} [failOnMissingAssociation=true] Should the test fail when the a filter is performed against an expanded association that is not present\r\n         * @return {Boolean} True if the object matches the filter conditions.\r\n         */\r\n        Predicate.prototype.test = function (object, failOnMissingAssociation) {\r\n            return testPredicate(this, object, failOnMissingAssociation);\r\n        };\r\n\r\n        /**\r\n         * Builds and returns a URL parameter string based on the predicate.\r\n         *\r\n         * @method parsePredicate\r\n         * @param {Boolean} [nested = false] Used for building the nested group during recursion\r\n         * @returns {String}\r\n         */\r\n        Predicate.prototype.parsePredicate = function (nested) {\r\n            nested = (nested === true);\r\n            var urlString = '';\r\n\r\n            if (this.property && typeof this.parser === 'function') {\r\n                return this.parser();\r\n            }\r\n\r\n            if (this.joinedPredicates && this.joinedPredicates.length > 0) {\r\n                var i;\r\n                var predicate;\r\n                var predicateString;\r\n                for (i = 0; i < this.joinedPredicates.length; i++) {\r\n                    predicate = this.joinedPredicates[i];\r\n                    predicateString = predicate.parsePredicate(true);\r\n                    urlString += (i > 0) ? ' ' + this.groupOperator + ' ' + predicateString : predicateString;\r\n                }\r\n            }\r\n\r\n            return nested ? '(' + urlString + ')' : urlString;\r\n        };\r\n\r\n        /**\r\n         * Creates a predicate structure from a string\r\n         *\r\n         * @method fromString\r\n         * @param {String} predicateString\r\n         * @return {Predicate|null} null if the predicate could not be built from the string\r\n         */\r\n        Predicate.fromString = function (predicateString) {\r\n            if (typeof predicateString !== \"string\") {\r\n                return null;\r\n            }\r\n\r\n            // Extract all the filters out of the predicate string\r\n            var conditionMatcher = new RegExp(\"(substringof\\\\(.+?\\\\)|startswith\\\\(.+?\\\\)|endswith\\\\(.+?\\\\)|[\\\\w\\\\.]+?\\\\s(?:eq|ne|gt|ge|lt|le)\\\\s(?:\\\\w+|\\\\'.+?\\\\'))\", \"g\");\r\n            var filters = predicateString.match(conditionMatcher);\r\n\r\n            if (!filters) {\r\n                return null;\r\n            }\r\n\r\n            // Convert each filter into a predicate\r\n            var i;\r\n            for (i = 0; i < filters.length; i++) {\r\n                filters[i] = getPredicateFromSegment(filters[i]);\r\n                if (filters[i] === null) {\r\n                    return null;\r\n                }\r\n            }\r\n\r\n            if (filters.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            // Remove all predicates from string\r\n            i = 0;\r\n            predicateString = predicateString.replace(conditionMatcher, function () {\r\n                return i++;\r\n            });\r\n\r\n            if (filters.length === 1) {\r\n                if (predicateString.replace(/[0-9]|\\s|and|or/g, \"\") !== \"\") {\r\n                    return null;\r\n                }\r\n                return filters[0];\r\n            }\r\n\r\n            return buildPredicateFromMap(predicateString, filters);\r\n        };\r\n\r\n        /**\r\n         * Builds a predicate based on a predicate map and array of extracted filters\r\n         * @param {String} predicateMap A String representing a map of a predicate where the indexes map to the filters array\r\n         *                              \"1 and (2 or 3)\" where filters.length === 3\r\n         * @param {Predicate[]} filters An array of Predicates whose index map to the indexes on the predicateMap\r\n         * @returns {Predicate|Null} The resulting Predicate or null if the map is invalid\r\n         */\r\n        var buildPredicateFromMap = function (predicateMap, filters) {\r\n            var closeParenthesisIndex;\r\n            var openParenthesisIndex;\r\n            var groupString;\r\n            var filterIndexes;\r\n            var groupPredicate = null;\r\n            var groupFilters;\r\n            var operator;\r\n            var testNextLevel = true;\r\n\r\n            while (testNextLevel) {\r\n                closeParenthesisIndex = predicateMap.indexOf(')');\r\n                if (closeParenthesisIndex !== -1) {\r\n                    openParenthesisIndex = predicateMap.lastIndexOf('(', closeParenthesisIndex);\r\n                    groupString = predicateMap.substring(openParenthesisIndex + 1, closeParenthesisIndex);\r\n                    predicateMap = predicateMap.substring(0, openParenthesisIndex) + filters.length + predicateMap.substring(closeParenthesisIndex + 1);\r\n                } else {\r\n                    groupString = predicateMap;\r\n                    testNextLevel = false;\r\n                }\r\n\r\n                // If the group contains invalid characters then return null as an invalid predicate string.\r\n                if (groupString.replace(/[0-9]|\\s|and|or/g, \"\") !== \"\") {\r\n                    return null;\r\n                }\r\n\r\n                // If the group uses both 'and' and 'or' then return null as an invalid predicate string.\r\n                if (groupString.indexOf('and') >= 0 && groupString.indexOf('or') >= 0) {\r\n                    return null;\r\n                }\r\n\r\n                filterIndexes = groupString.match(/[0-9]+/g);\r\n                groupFilters = [];\r\n                var i;\r\n                for (i = 0; i < filterIndexes.length; i++) {\r\n                    groupFilters.push(filters[Number(filterIndexes[i])]);\r\n                }\r\n                operator = groupString.indexOf('or') >= 0 ? 'or' : 'and';\r\n                groupPredicate = new Predicate().join(groupFilters, operator);\r\n                filters.push(groupPredicate);\r\n            }\r\n\r\n            return groupPredicate;\r\n        };\r\n\r\n        /**\r\n         * Takes a predicate's value and if it is a string, adds single quotes around it.\r\n         *\r\n         * @method escapeValue\r\n         * @param {String|Boolean|Number|Date} value\r\n         * @returns {string} The string value\r\n         */\r\n        var escapeValue = function (value) {\r\n            if (value instanceof Date) {\r\n                value = value.toISOString();\r\n            }\r\n            return (typeof value === 'string') ? \"'\" + value + \"'\" : value.toString();\r\n        };\r\n\r\n        /**\r\n         * Returns the raw value of the predicate string\r\n         *\r\n         * @method convertValueToType\r\n         * @param {String} value\r\n         * @returns {String|Boolean|Number}\r\n         */\r\n        var convertValueToType = function (value) {\r\n            if (typeof value === 'string') {\r\n                if (value.indexOf(\"'\") >= 0) {\r\n                    return value.replace(/\\'/g, '');\r\n                }\r\n                if (value.toLowerCase() === 'true') {\r\n                    return true;\r\n                }\r\n                if (value.toLowerCase() === 'false') {\r\n                    return false;\r\n                }\r\n            }\r\n            if (!isNaN(value)) {\r\n                return Number(value);\r\n            }\r\n            return value;\r\n        };\r\n\r\n        /**\r\n         * Tests a predicate group to see if the object matches\r\n         * @param {Predicate} predicate\r\n         * @param {Object} object\r\n         * @returns {Boolean} True if the object matches the predicate\r\n         */\r\n        var testPredicateGroup = function (predicate, object) {\r\n            var result;\r\n            var i;\r\n            for (i = 0; i < predicate.joinedPredicates.length; i++) {\r\n                result = testPredicate(predicate.joinedPredicates[i], object);\r\n\r\n                // If the operator is 'and' and any of the filters do not match, return false.\r\n                if (predicate.groupOperator === 'and' && result === false) {\r\n                    return false;\r\n                }\r\n\r\n                // If the operator is 'or' and any of the filters match, return true.\r\n                if (predicate.groupOperator === 'or' && result === true) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            // The operator was 'and' and all of the filters matched or the operator was 'or' and none of the filters matched.\r\n            return predicate.groupOperator === 'and';\r\n        };\r\n\r\n        /**\r\n         * Tests an object to see if the filter conditions match a given predicate. Used for recursive tests.\r\n         *\r\n         * @param {Predicate} predicate\r\n         * @param {Object} object\r\n         * @param {Boolean} [failOnMissingAssociation=true] Should the test fail when the a filter is performed against an expanded association that is not present\r\n         */\r\n        var testPredicate = function (predicate, object, failOnMissingAssociation) {\r\n            if (predicate.joinedPredicates && predicate.joinedPredicates.length > 0) {\r\n                return testPredicateGroup(predicate, object);\r\n            }\r\n            if (predicate.property) {\r\n                var propertyPath = predicate.property.split('.');\r\n                var objectValue = object;\r\n                var i;\r\n                for (i = 0; i < propertyPath.length; i++) {\r\n                    if (objectValue.hasOwnProperty(propertyPath[i]) && objectValue[propertyPath[i]] !== undefined) {\r\n                        objectValue = objectValue[propertyPath[i]];\r\n                    } else {\r\n                        return (failOnMissingAssociation === false);\r\n                    }\r\n                }\r\n\r\n                var condition = predicate.parsePredicate();\r\n                if (condition.indexOf('(') >= 0) {\r\n                    return testComplexPredicate(condition, objectValue);\r\n                }\r\n                return testSimplePredicate(condition, objectValue);\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        /**\r\n         * Tests a complex predicate that uses startswith, endswith, or substringof\r\n         * @param {String} condition The Predicate condition\r\n         * @param {String|Number|Boolean} objectValue The value that is being tested\r\n         * @returns {Boolean} True if the object value matches the condition\r\n         */\r\n        var testComplexPredicate = function (condition, objectValue) {\r\n            var value;\r\n            var operator = condition.substr(0, condition.indexOf('('));\r\n            var start = condition.indexOf('(') + 1;\r\n            var end = condition.indexOf(')') - start;\r\n            var conditionParams = condition.substr(start, end);\r\n            conditionParams = conditionParams.replace(/\\'/g, '').split(', ');\r\n\r\n            switch (operator) {\r\n                case 'startswith':\r\n                    value = conditionParams[1].toLowerCase();\r\n                    return (objectValue.indexOf(value) === 0);\r\n                case 'endswith':\r\n                    value = conditionParams[1].toLowerCase();\r\n                    return (objectValue.indexOf(value) === objectValue.length - 1 - value.length);\r\n                case 'substringof':\r\n                    value = conditionParams[0].toLowerCase();\r\n                    return (objectValue.indexOf(value) >= 0);\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        /**\r\n         * Tests a simple predicate that uses lt, gt, le, ge, ne, or eq\r\n         * @param {String} condition The Predicate condition\r\n         * @param {String|Number|Boolean} objectValue The value that is being tested\r\n         * @returns {Boolean} True if the object value matches the condition\r\n         */\r\n        var testSimplePredicate = function (condition, objectValue) {\r\n            var conditionParams = condition.split(' ');\r\n            var operator = conditionParams[1];\r\n\r\n            var value = conditionParams.slice(2).join(' ');\r\n            value = convertValueToType(value);\r\n\r\n            // If both the predicate value and the object values are Date-like, convert them to dates to compare\r\n            if (objectValue instanceof Date && !isNaN(Date.parse(value))) {\r\n                value = Date.parse(value);\r\n                objectValue = objectValue.getTime();\r\n            } else if (typeof objectValue === 'string' && !isNaN(Date.parse(objectValue))) {\r\n                objectValue = Date.parse(objectValue);\r\n                value = Date.parse(value);\r\n            }\r\n\r\n            /* jshint eqeqeq: false */\r\n            switch (operator) {\r\n                case 'lt':\r\n                    return objectValue < value;\r\n                case 'gt':\r\n                    return objectValue > value;\r\n                case 'le':\r\n                    return objectValue <= value;\r\n                case 'ge':\r\n                    return objectValue >= value;\r\n                case 'ne':\r\n                    return objectValue != value;\r\n                case 'eq':\r\n                    return objectValue == value;\r\n            }\r\n            /* jshint eqeqeq: true */\r\n\r\n            return false;\r\n        };\r\n\r\n        /**\r\n         * Builds a predicate from a complex segment that uses startswith, endswith, or substringof\r\n         * @param {String} condition The predicate condition\r\n         * @returns {Predicate} The resulting Predicate\r\n         */\r\n        var getComplexPredicateFromSegment = function (condition) {\r\n            var predicate;\r\n            var value;\r\n            var parenPos = condition.indexOf('(');\r\n            var operator = condition.substring(0, parenPos);\r\n            var conditionParams = condition.substring(parenPos + 1, condition.indexOf(')')).split(', ');\r\n\r\n            switch (operator) {\r\n                case 'startswith':\r\n                    value = convertValueToType(conditionParams[1]);\r\n                    predicate = new Predicate(conditionParams[0]).startsWith(value);\r\n                    break;\r\n                case 'endswith':\r\n                    value = convertValueToType(conditionParams[1]);\r\n                    predicate = new Predicate(conditionParams[0]).endsWith(value);\r\n                    break;\r\n                case 'substringof':\r\n                    value = convertValueToType(conditionParams[0]);\r\n                    predicate = new Predicate(conditionParams[1]).contains(value);\r\n                    break;\r\n            }\r\n\r\n            return predicate;\r\n        };\r\n\r\n        /**\r\n         * Builds a predicate from a simple segment that uses eq, ne, gt, ge, lt, or le\r\n         * @param {String} condition The predicate condition\r\n         * @returns {Predicate} The resulting Predicate\r\n         */\r\n        var getSimplePredicateFromSegment = function (condition) {\r\n            var conditionParams = condition.split(' ');\r\n            var operator = conditionParams[1];\r\n            var value = convertValueToType(conditionParams.slice(2).join(' '));\r\n\r\n            var predicate = new Predicate(conditionParams[0]);\r\n\r\n            switch (operator) {\r\n                case 'eq':\r\n                    predicate.equals(value);\r\n                    break;\r\n                case 'ne':\r\n                    predicate.notEqualTo(value);\r\n                    break;\r\n                case 'gt':\r\n                    predicate.greaterThan(value);\r\n                    break;\r\n                case 'ge':\r\n                    predicate.greaterThanOrEqualTo(value);\r\n                    break;\r\n                case 'lt':\r\n                    predicate.lessThan(value);\r\n                    break;\r\n                case 'le':\r\n                    predicate.lessThanOrEqualTo(value);\r\n                    break;\r\n            }\r\n            return predicate;\r\n        };\r\n\r\n        /**\r\n         * Creates a predicate from a single condition eg: \"property eq 'value'\"\r\n         *\r\n         * @param {String} condition\r\n         * @return {Predicate} The predicate built from the condition\r\n         */\r\n        var getPredicateFromSegment = function (condition) {\r\n            if (condition.indexOf('(') >= 0) {\r\n                return getComplexPredicateFromSegment(condition);\r\n            }\r\n            return getSimplePredicateFromSegment(condition);\r\n        };\r\n\r\n        return Predicate;\r\n    }\r\n]);","angular.module('recall').factory('recallPreparedQueryOptions', [\r\n    'recallPredicate',\r\n\r\n    function (Predicate) {\r\n        /*\r\n         * BASED ON:\r\n         * PreparedQueryOptions\r\n         * version: 1.1.2\r\n         * author: David Hamilton\r\n         * license: https://github.com/nova706/PreparedQueryOptions/blob/master/LICENSE.txt (MIT)\r\n         * https://github.com/nova706/PreparedQueryOptions\r\n         *\r\n         */\r\n\r\n        /**\r\n         * PreparedQueryOptions are used to set, store and parse OData query parameters. Instead of passing\r\n         * multiple arguments to methods for each query option, simply pass the preparedQueryOptions object.\r\n         * Use the parseOptions method on the object to return an OData string for a query.\r\n         *\r\n         * @class PreparedQueryOptions\r\n         * @constructor\r\n         */\r\n        function PreparedQueryOptions() {\r\n            /**\r\n             * Stores the query options that have been set.\r\n             * @property options\r\n             * @type Object\r\n             * @default {}\r\n             */\r\n            this.options = {};\r\n        }\r\n\r\n        var isPredicate = function (object) {\r\n            return object && typeof object === \"object\" && typeof object.parsePredicate === \"function\";\r\n        };\r\n\r\n        /**\r\n         * Used in Sync Adapters to perform the CRUD operation against the Master instead of the Slave.\r\n         *\r\n         * @method preferMaster\r\n         * @param {Boolean} [preferMaster=false] Whether the SyncAdapter should prefer the slave or master.\r\n         * @return {PreparedQueryOptions|Boolean} PreparedQueryOptions object or the current preferMaster value.\r\n         */\r\n        PreparedQueryOptions.prototype.preferMaster = function (preferMaster) {\r\n            if (arguments.length === 0) {\r\n                return this.options.preferMaster || null;\r\n            }\r\n            if (preferMaster === null) {\r\n                delete this.options.preferMaster;\r\n                return this;\r\n            }\r\n            this.options.preferMaster = preferMaster === true;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets the number of results to retrieve. Passing a null top value will clear the top option. Negating the value\r\n         * will return the current top value.\r\n         *\r\n         * @method $top\r\n         * @param {Number} [top] Number of results to query for.\r\n         * @return {PreparedQueryOptions|Number} PreparedQueryOptions object or the current $top value.\r\n         */\r\n        PreparedQueryOptions.prototype.$top = function (top) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$top || null;\r\n            }\r\n            if (typeof top === 'number' && top >= 0) {\r\n                this.options.$top = top;\r\n            }\r\n            if (top === null) {\r\n                delete this.options.$top;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets the index of the first result to retrieve. Passing a null skip value will clear the skip option. Negating the\r\n         * value will return the current skip value.\r\n         *\r\n         * @method $skip\r\n         * @param {Number} [skip] The index of the first result to retrieve\r\n         * @return {PreparedQueryOptions|Number} PreparedQueryOptions object or the current $skip value.\r\n         */\r\n        PreparedQueryOptions.prototype.$skip = function (skip) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$skip || null;\r\n            }\r\n            if (typeof skip === 'number' && skip >= 0) {\r\n                this.options.$skip = skip;\r\n            }\r\n            if (skip === null) {\r\n                delete this.options.$skip;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets orderBy string. Passing a null order by value will clear the order by option. Negating the value will return\r\n         * the current order by value.\r\n         *\r\n         * @method $orderBy\r\n         * @param {String} [orderBy] The orderBy string used to retrieve the results in a sorted order.\r\n         * @return {PreparedQueryOptions|String} PreparedQueryOptions object or the current $orderby value.\r\n         */\r\n        PreparedQueryOptions.prototype.$orderBy = function (orderBy) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$orderby || null;\r\n            }\r\n            if (orderBy && typeof orderBy === 'string') {\r\n                this.options.$orderby = orderBy;\r\n            }\r\n            if (orderBy === null) {\r\n                delete this.options.$orderby;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets expand string. Passing a null expand value will clear the expand option. Negating the value will return the\r\n         * current expand value.\r\n         *\r\n         * @method $expand\r\n         * @param {String | Array} [foreignKey] The foreignKey to expand when retrieving the results.\r\n         * @return {PreparedQueryOptions|String} PreparedQueryOptions object or the current $expand value.\r\n         */\r\n        PreparedQueryOptions.prototype.$expand = function (foreignKey) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$expand || null;\r\n            }\r\n            if (typeof foreignKey === 'string') {\r\n                this.options.$expand = foreignKey;\r\n            } else if (foreignKey instanceof Array) {\r\n                this.options.$expand = foreignKey.join(',');\r\n            }\r\n            if (foreignKey === null) {\r\n                delete this.options.$expand;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets select string. Passing a null select value will clear the select option. Negating the value will return the\r\n         * current select value.\r\n         *\r\n         * @method $select\r\n         * @param {String | Array} [property] A single property name or array of property names to select.\r\n         * @return {PreparedQueryOptions|String} PreparedQueryOptions object or the current $select value.\r\n         */\r\n        PreparedQueryOptions.prototype.$select = function (property) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$select || null;\r\n            }\r\n            if (typeof property === 'string') {\r\n                this.options.$select = property;\r\n            } else if (property instanceof Array) {\r\n                this.options.$select = property.join(',');\r\n            }\r\n            if (property === null) {\r\n                delete this.options.$select;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Enables or disables inline count. Passing a null inline count value will clear the inline count option. Negating\r\n         * the value will return the current inline count value: \"allpages\" or null.\r\n         *\r\n         * @method $inlineCount\r\n         * @param {Boolean} [enable=true] Flag to enable or disable inline count.\r\n         * @return {PreparedQueryOptions|String} PreparedQueryOptions object or the current $inlinecount value.\r\n         */\r\n        PreparedQueryOptions.prototype.$inlineCount = function (enable) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$inlinecount || null;\r\n            }\r\n            if (enable !== false && enable !== null) {\r\n                this.options.$inlinecount = \"allpages\";\r\n            } else {\r\n                delete this.options.$inlinecount;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets the filter option. Include the Predicate class to assist in building complex filter clauses.\r\n         * Passing a null filter value will clear the filter option. Negating the value will return the current filter value.\r\n         *\r\n         * @method $filter\r\n         * @param {String | Predicate} [filter] The filter clause to use when retrieving the results.\r\n         * @return {PreparedQueryOptions|Predicate} PreparedQueryOptions object or the current $filter predicate.\r\n         */\r\n        PreparedQueryOptions.prototype.$filter = function (filter) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$filter || null;\r\n            }\r\n            if (filter && typeof filter === 'string') {\r\n                this.options.$filter = Predicate.fromString(filter);\r\n            } else if (isPredicate(filter)) {\r\n                this.options.$filter = filter;\r\n            }\r\n            if (filter === null) {\r\n                delete this.options.$filter;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets a custom query option parameter. Passing a null value will clear the filter. Negating the value will return\r\n         * the current custom filter value.\r\n         *\r\n         * @method custom\r\n         * @param {String} optionName The name of the option. Must not start with '$'.\r\n         * @param {String|Number|Boolean} [value] The string value of the option.\r\n         * @return {PreparedQueryOptions} PreparedQueryOptions object or the current custom filter value.\r\n         */\r\n        PreparedQueryOptions.prototype.custom = function (optionName, value) {\r\n            if (arguments.length === 1) {\r\n                return this.options[optionName] || null;\r\n            }\r\n            if (optionName && typeof optionName === 'string' && optionName.indexOf('$') !== 0 && value && (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean')) {\r\n                this.options[optionName] = value;\r\n            }\r\n            if (optionName && value === null) {\r\n                delete this.options[optionName];\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Extend existing query with options from another query. Only the original query will be modified. Any\r\n         * matching options will be overridden in the original query.\r\n         *\r\n         * @method extend\r\n         * @param {PreparedQueryOptions} preparedQueryOptions The prepared query objects with the properties to be added.\r\n         * @return {PreparedQueryOptions} PreparedQueryOptions object.\r\n         */\r\n        PreparedQueryOptions.prototype.extend = function (preparedQueryOptions) {\r\n            var key;\r\n            for (key in preparedQueryOptions.options) {\r\n                if (preparedQueryOptions.options.hasOwnProperty(key)) {\r\n                    this.options[key] = preparedQueryOptions.options[key];\r\n                }\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Builds and returns a URL parameter string based on the query options.\r\n         *\r\n         * @method parseOptions\r\n         * @returns {String}\r\n         * @example '$top=25&$skip=0'\r\n         */\r\n        PreparedQueryOptions.prototype.parseOptions = function () {\r\n            var parameters = '';\r\n\r\n            var appendSeparator = function () {\r\n                parameters += (parameters === '') ? '?' : '&';\r\n            };\r\n\r\n            var option;\r\n            for (option in this.options) {\r\n                if (this.options.hasOwnProperty(option)) {\r\n                    appendSeparator();\r\n                    if (isPredicate(this.options[option])) {\r\n                        parameters += option + '=' + this.options[option].parsePredicate();\r\n                    } else {\r\n                        parameters += option + '=' + this.options[option];\r\n                    }\r\n                }\r\n            }\r\n\r\n            return parameters;\r\n        };\r\n\r\n        /**\r\n         * Class method to create a new PreparedQueryOptions object from a simple object\r\n         *\r\n         * @method fromObject\r\n         * @param {Object} object the object to build from\r\n         * @returns {PreparedQueryOptions}\r\n         */\r\n        PreparedQueryOptions.fromObject = function (object) {\r\n            var preparedQueryOptions = new PreparedQueryOptions();\r\n            var property;\r\n            for (property in object) {\r\n                if (object.hasOwnProperty(property) && typeof preparedQueryOptions[property] === \"function\") {\r\n                    preparedQueryOptions[property](object[property]);\r\n                }\r\n            }\r\n            return preparedQueryOptions;\r\n        };\r\n\r\n        return PreparedQueryOptions;\r\n    }\r\n]);","/**\r\n * The recallProvider is the entry point for common configuration options. Specific adapters may have their own\r\n * configuration options\r\n */\r\nangular.module('recall').provider('recall', [\r\n    function () {\r\n        var config = {};\r\n\r\n        // The default adapter to use unless otherwise specified by the model Definition\r\n        config.adapter = null;\r\n        this.setAdapter = function (adapter) {\r\n            config.adapter = adapter;\r\n            return this;\r\n        };\r\n\r\n        // Time in milliseconds to throttle Entity dirty checking. This allows for multiple digest cycles to pass\r\n        // between checking if an Entity is dirty by examining its stored state\r\n        config.dirtyCheckThreshold = 30;\r\n        this.setDirtyCheckThreshold = function (dirtyCheckThreshold) {\r\n            config.dirtyCheckThreshold = dirtyCheckThreshold;\r\n            return this;\r\n        };\r\n\r\n        // The default last modified field name. To enable synchronization, this must be set.\r\n        config.lastModifiedFieldName = null;\r\n        this.setLastModifiedFieldName = function (lastModifiedFieldName) {\r\n            config.lastModifiedFieldName = lastModifiedFieldName;\r\n            return this;\r\n        };\r\n\r\n        // The default soft delete field name. To enable synchronization, this must be set.\r\n        config.deletedFieldName = null;\r\n        this.setDeletedFieldName = function (deletedFieldName) {\r\n            config.deletedFieldName = deletedFieldName;\r\n            return this;\r\n        };\r\n\r\n        this.$get = ['$injector', 'recallModel', function ($injector, Model) {\r\n\r\n            var service = {\r\n                adapter: config.adapter,\r\n                lastModifiedFieldName: config.lastModifiedFieldName,\r\n                deletedFieldName: config.deletedFieldName,\r\n                dirtyCheckThreshold: config.dirtyCheckThreshold,\r\n                models: {}\r\n            };\r\n\r\n            /**\r\n             * Get an array of the defined Models.\r\n             * @returns {Entity[]} The models\r\n             */\r\n            service.getModels = function () {\r\n                var theModels = [];\r\n                var model;\r\n                for (model in this.models) {\r\n                    if (this.models.hasOwnProperty(model)) {\r\n                        theModels.push(this.models[model]);\r\n                    }\r\n                }\r\n                return theModels;\r\n            };\r\n\r\n            /**\r\n             * Gets a defined model by its name\r\n             * @param {String} modelName\r\n             * @returns {Entity} The model or null if the model is not found\r\n             */\r\n            service.getModel = function (modelName) {\r\n                return this.models[modelName] || null;\r\n            };\r\n\r\n            /**\r\n             * Creates a model based on a definition.\r\n             * @param {Object} modelDefinition The definition of the model including fields and associations\r\n             * @param {Object|String} [adapter] The adapter that is used to perform the CRUD actions\r\n             * @returns {Object} The model\r\n             */\r\n            service.defineModel = function (modelDefinition, adapter) {\r\n                adapter = adapter || this.adapter;\r\n\r\n                // If the adapter is a string, assume it is the name of the adapter factory and inject it\r\n                adapter = (typeof adapter === 'string') ? $injector.get(adapter) : adapter;\r\n\r\n                // If there was no adapter set, then return out as the model can not be used.\r\n                if (!adapter) {\r\n                    return null;\r\n                }\r\n\r\n                // TODO: Validated the model definition\r\n                if (!modelDefinition || !modelDefinition.name) {\r\n                    return null;\r\n                }\r\n\r\n                // If the model is already defined, just return it.\r\n                if (this.models[modelDefinition.name]) {\r\n                    return this.models[modelDefinition.name];\r\n                }\r\n\r\n                var model = new Model(modelDefinition);\r\n                model.setLastModifiedFieldName(this.lastModifiedFieldName);\r\n                model.setDeletedFieldName(this.deletedFieldName);\r\n                model.setAdapter(adapter);\r\n                model.setDirtyCheckThreshold(this.dirtyCheckThreshold);\r\n\r\n                var fieldsValid = model.initializeModelFields();\r\n\r\n                if (!fieldsValid) {\r\n                    return null;\r\n                }\r\n\r\n                model.initializeAssociations();\r\n\r\n                // Call the model validation on the adapter after all Entity properties and methods are set.\r\n                if (typeof adapter.modelValidationHook === 'function' && !adapter.modelValidationHook(model)) {\r\n                    return null;\r\n                }\r\n\r\n                this.models[model.modelName] = model;\r\n\r\n                return model;\r\n            };\r\n\r\n            return service;\r\n        }];\r\n    }\r\n]);"]}