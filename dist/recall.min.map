{"version":3,"file":"recall.min.js","sources":["../src/_module.js","../src/adapterResponse.js","../src/adapters/baseClientSideAdapter.js","../src/adapters/browserStorage/browserStorage.adapter.js","../src/adapters/browserStorage/indexedDB.service.js","../src/adapters/browserStorage/webSQL.service.js","../src/adapters/dropboxDatastore/dropboxDatastore.adapter.js","../src/adapters/dropboxDatastore/dropboxDatastore.service.js","../src/adapters/odataREST.adapter.js","../src/adapters/sync.adapter.js","../src/association.js","../src/entity.js","../src/localStorage.js","../src/model.js","../src/modelField.js","../src/polyfill.js","../src/predicate.js","../src/preparedQueryOptions.js","../src/recallService.js"],"names":["angular","module","factory","AdapterResponse","data","count","status","headers","config","this","OK","CREATED","ACCEPTED","NO_CONTENT","BAD_REQUEST","UNAUTHORIZED","NOT_FOUND","CONFLICT","INTERNAL_SERVER_ERROR","NOT_IMPLEMENTED","$log","$q","$window","recall","Predicate","BaseClientSideAdapter","name","service","connectionArguments","pkGenerator","generatePrimaryKey","db","connectionPromise","prototype","connect","dfd","defer","adapter","resolve","apply","then","debug","e","error","reject","promise","create","theModel","modelInstance","response","buildError","modelName","primaryKeyFieldName","getRawModelObject","lastModifiedFieldName","Date","toISOString","result","findOne","pk","queryOptions","includeDeleted","deletedFieldName","performExpand","find","filterPredicate","$filter","results","i","promises","length","resultMatchesFilters","push","all","applyFilter","applyOrderBy","totalCount","applyPaging","update","extend","remove","synchronize","dataToSync","lastSync","hardDelete","syncInstance","syncResults","ignoreList","getSyncList","rawModelInstance","predicate","lessThan","filteredResults","greaterThan","indexOf","expandHasOne","instance","association","pathsToExpand","undefined","mappedBy","alias","pathToExpand","join","expandPath","substring","expandHasMany","findByAssociation","filter","getOptions","split","toExpand","getAssociationByAlias","model","getModel","type","$expand","paths","test","a","orderBy","$orderBy","property","direction","isDate","fields","sort","b","aTest","bTest","toLowerCase","top","$top","skip","$skip","slice","provider","providerConfig","preferredBackend","preferIndexedDB","preferWebSQL","dbName","setDbName","dbVersion","setDbVersion","dbSize","setDbSize","s4","Math","floor","random","toString","setPkGenerator","$get","indexedDBService","webSQLService","init","openDatabase","indexedDB","migrate","field","indexName","objectStore","models","getModels","objectStoreNames","contains","dataSourceName","createObjectStore","keyPath","hasOwnProperty","unique","index","createIndex","handleVersionChange","onversionchange","close","alert","openRequest","open","onupgradeneeded","event","target","onsuccess","onerror","errorCode","tx","transaction","store","req","add","get","openCursor","cursor","value","updateReq","put","key","createTables","migrateTables","theDb","columns","columnValues","placeholders","convertValueToSQL","sql","executeSql","transformSQLResult","columnNames","createTable","getModelFieldSQL","modelField","modelFieldSQL","primaryKey","notNull","column","operations","addColumnToTable","tableName","migrateTable","tableRows","row","tableSQL","tbl_name","missingFields","rows","item","convertValueToModel","sqlResultInstance","getSQLModelObject","obj","clientKey","setClientKey","authDriver","setAuthDriver","driver","dropboxDatastoreService","Dropbox","client","Client","authenticate","interactive","isAuthenticated","datastoreManager","getDatastoreManager","openDefaultDatastore","datastore","table","getTable","getOrInsert","transformResult","query","updateResult","deleteRecord","theResults","rawObj","getId","set","serverAPILocation","setServerAPILocation","resultsField","setResultsField","totalCountFiled","setTotalCountFiled","$http","getUrlWithOptions","url","parseOptions","post","success","method","masterAdapter","setMaster","slaveAdapter","setSlave","$injector","localStorage","PreparedQueryOptions","modelValidationHook","master","getMaster","slave","getSlave","preferMaster","force","Array","clearLastSyncTime","processSyncRequest","getAdapter","SyncResult","sent","returned","totalProcessed","getLastSyncTime","keys","LAST_SYNC","updateLastSyncTimeToNow","sendSyncRequestData","processSyncResponseData","syncRequestData","syncResponseData","totalItemsProcessed","handleError","handleComplete","greaterThanOrEqualTo","syncResponse","Association","definition","invalid","hasOne","hasMany","as","foreignKey","recallService","expand","entity","self","Model","$entity","storedState","equals","$getPrimaryKey","existingPredicate","base","stored","Entity","object","persisted","extendFromRawObject","Object","defineProperty","lastDirtyCheck","getTime","lastDirtyState","saveInProgress","$convertAssociationsToEntities","$storeState","$model","ForeignModel","associations","associationName","$isValid","fieldIsUndefined","matchesType","isNaN","parse","validate","$save","warn","$reset","itemToSave","preSave","updateSavedState","succeeded","preUpdate","preCreate","$remove","$isDirty","now","delta","dirtyCheckThreshold","viewValue","storedValue","prop","changedProperties","before","after","$document","storage","keyExists","addKeyModifier","modifier","registerKey","keyModifier","supportsLocalStorage","setItem","life","v","encodeURIComponent","cookie","getItem","regexp","RegExp","c","exec","decodeURIComponent","removeItem","ModelField","propagateError","modelDefinition","writable","configurable","setLastModifiedFieldName","setDeletedFieldName","setAdapter","setDirtyCheckThreshold","initializeModelFields","lastModifiedField","deletedField","modelDefinitionFields","getDefaultValue","initializeAssociations","modelDefinitionAssociations","rawObject","modelEntity","includeExpandedAssociations","applyDefaultValues","resultEntity","rawEntity","clientResponse","toUpperCase","asPrimaryKey","fromDefinition","validateField","match","pad","number","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","toFixed","parser","predicates","groupOperator","setProperty","escapeValue","notEqualTo","lessThanOrEqualTo","startsWith","endsWith","initialPredicate","newPredicates","joinedPredicates","concat","unshift","and","or","failOnMissingAssociation","testPredicate","parsePredicate","nested","urlString","predicateString","fromString","conditionMatcher","filters","getPredicateFromSegment","replace","buildPredicateFromMap","predicateMap","closeParenthesisIndex","openParenthesisIndex","groupString","filterIndexes","groupFilters","operator","groupPredicate","testNextLevel","lastIndexOf","Number","convertValueToType","testPredicateGroup","propertyPath","objectValue","condition","testComplexPredicate","testSimplePredicate","substr","start","end","conditionParams","getComplexPredicateFromSegment","parenPos","getSimplePredicateFromSegment","options","isPredicate","arguments","$orderby","$select","$inlineCount","enable","$inlinecount","custom","optionName","preparedQueryOptions","option","parameters","appendSeparator","fromObject","theModels","defineModel","fieldsValid"],"mappings":"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","sourcesContent":["angular.module('recall', []);","angular.module('recall').factory(\"recallAdapterResponse\", [\r\n    function () {\r\n\r\n        /**\r\n         * The AdapterResponse class represents a response that is coming back from an adapter. Every Adapter should\r\n         * resolve and reject with a properly formed AdapterResponse so that the Model can handle the response.\r\n         *\r\n         * @param {Object|Array|String} data The raw data from the adapter or an error message\r\n         * @param {Number} [count] The number of records affected by the action. Left null if not set\r\n         * @param {Number} [status=200] The status of the response\r\n         * @param {Object} [headers] The response headers (used by $http)\r\n         * @param {Object} [config] The configuration of the request (used by $http)\r\n         * @constructor\r\n         */\r\n        var AdapterResponse = function (data, count, status, headers, config) {\r\n            this.data = data;\r\n            this.count = (count >= 0) ? count : null;\r\n            this.status = status || AdapterResponse.OK;\r\n            this.headers = headers;\r\n            this.config = config;\r\n        };\r\n\r\n        // 2xx status codes used in OOTB adapters\r\n        AdapterResponse.OK = 200;\r\n        AdapterResponse.CREATED = 201;\r\n        AdapterResponse.ACCEPTED = 202;\r\n        AdapterResponse.NO_CONTENT = 204;\r\n\r\n        // 4xx status codes used in OOTB adapters\r\n        AdapterResponse.BAD_REQUEST = 400;\r\n        AdapterResponse.UNAUTHORIZED = 401;\r\n        AdapterResponse.NOT_FOUND = 404;\r\n        AdapterResponse.CONFLICT = 409;\r\n\r\n        // 5xx status codes used in OOTB adapters\r\n        AdapterResponse.INTERNAL_SERVER_ERROR = 500;\r\n        AdapterResponse.NOT_IMPLEMENTED = 501;\r\n\r\n        return AdapterResponse;\r\n    }\r\n]);","angular.module('recall').factory('recallBaseClientSideAdapter', [\r\n    '$log',\r\n    '$q',\r\n    '$window',\r\n    'recall',\r\n    'recallAdapterResponse',\r\n    'recallPredicate',\r\n\r\n    function ($log, $q, $window, recall, AdapterResponse, Predicate) {\r\n\r\n        var BaseClientSideAdapter = function (name, service, connectionArguments, pkGenerator) {\r\n            this.name = name;\r\n            this.service = service;\r\n            this.connectionArguments = connectionArguments;\r\n            this.generatePrimaryKey = pkGenerator;\r\n            this.db = null;\r\n            this.connectionPromise = null;\r\n        };\r\n\r\n        // Connects to the database\r\n        BaseClientSideAdapter.prototype.connect = function () {\r\n            var dfd = $q.defer();\r\n            var adapter = this;\r\n\r\n            if (adapter.db) {\r\n                dfd.resolve(adapter.db);\r\n            } else if (adapter.connectionPromise) {\r\n                return adapter.connectionPromise;\r\n            } else {\r\n\r\n                adapter.service.connect.apply(this, adapter.connectionArguments).then(function (db) {\r\n                    $log.debug(adapter.name + ': Connection Success');\r\n                    adapter.db = db;\r\n                    dfd.resolve(adapter.db);\r\n                }, function (e) {\r\n                    $log.error(adapter.name + ': Connect', e);\r\n                    dfd.reject(e);\r\n                });\r\n\r\n            }\r\n\r\n            adapter.connectionPromise = dfd.promise;\r\n            return dfd.promise;\r\n        };\r\n\r\n        /**\r\n         * Creates a new Entity\r\n         * @param {Object} theModel The model of the entity to create\r\n         * @param {Object} modelInstance The entity to create\r\n         * @returns {promise} Resolved with an AdapterResponse\r\n         */\r\n        BaseClientSideAdapter.prototype.create = function (theModel, modelInstance) {\r\n            var dfd = $q.defer();\r\n            var adapter = this;\r\n            var response;\r\n\r\n            var buildError = function (e) {\r\n                response = new AdapterResponse(e, 0, AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                $log.error(adapter.name + ': Create ' + theModel.modelName, response, modelInstance);\r\n                return response;\r\n            };\r\n\r\n            modelInstance[theModel.primaryKeyFieldName] = adapter.generatePrimaryKey();\r\n            modelInstance = theModel.getRawModelObject(modelInstance, false);\r\n\r\n            // TODO: Store all dates in ISO format\r\n            modelInstance[theModel.lastModifiedFieldName] = new Date().toISOString();\r\n\r\n            adapter.connect().then(function (db) {\r\n\r\n                adapter.service.create(db, theModel, modelInstance).then(function (result) {\r\n                    response = new AdapterResponse(result, 1, AdapterResponse.CREATED);\r\n                    $log.debug(adapter.name + ': Create ' + theModel.modelName, response);\r\n                    dfd.resolve(response);\r\n                }, function (e) {\r\n                    dfd.reject(buildError(e));\r\n                });\r\n\r\n            }, function (e) {\r\n                dfd.reject(buildError(e));\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        /**\r\n         * Finds a single entity given a primary key\r\n         * @param {Object} theModel The model of the entity to find\r\n         * @param {String|Number} pk The primary key of the entity to find\r\n         * @param {PreparedQueryOptions} [queryOptions] The query options to use for $expand\r\n         * @param {Boolean} [includeDeleted=false] If true, includes soft-deleted entities\r\n         * @returns {promise} Resolved with an AdapterResponse\r\n         */\r\n        BaseClientSideAdapter.prototype.findOne = function (theModel, pk, queryOptions, includeDeleted) {\r\n            var dfd = $q.defer();\r\n            var adapter = this;\r\n            var response;\r\n\r\n            var buildError = function (e, status) {\r\n                response = new AdapterResponse(e, 0, status || AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                $log.error(adapter.name + ': FindOne ' + theModel.modelName, response, pk, queryOptions);\r\n                return response;\r\n            };\r\n\r\n            adapter.connect().then(function (db) {\r\n\r\n                adapter.service.findOne(db, theModel, pk).then(function (result) {\r\n\r\n                    if (result && (includeDeleted || !result[theModel.deletedFieldName])) {\r\n                        adapter.performExpand(result, theModel, queryOptions, db).then(function () {\r\n                            response = new AdapterResponse(result, 1);\r\n                            $log.debug(adapter.name + ': FindOne ' + theModel.modelName, response, pk, queryOptions);\r\n                            dfd.resolve(response);\r\n                        }, function (e) {\r\n                            dfd.reject(buildError(e));\r\n                        });\r\n                    } else {\r\n                        dfd.reject(buildError('Not Found', AdapterResponse.NOT_FOUND));\r\n                    }\r\n\r\n                }, function (e) {\r\n                    dfd.reject(buildError(e));\r\n                });\r\n\r\n            }, function (e) {\r\n                dfd.reject(buildError(e));\r\n            });\r\n            return dfd.promise;\r\n        };\r\n\r\n        /**\r\n         * Finds a set of Model entities\r\n         * @param {Object} theModel The model of the entities to find\r\n         * @param {PreparedQueryOptions} [queryOptions] The query options to use\r\n         * @param {Boolean} [includeDeleted=false] If true, includes soft-deleted entities\r\n         * @returns {promise} Resolved with an AdapterResponse\r\n         */\r\n        BaseClientSideAdapter.prototype.find = function (theModel, queryOptions, includeDeleted) {\r\n            var dfd = $q.defer();\r\n            var adapter = this;\r\n            var response;\r\n\r\n            var buildError = function (e) {\r\n                response = new AdapterResponse(e, 0, AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                $log.error(adapter.name + ': Find ' + theModel.modelName, response, queryOptions);\r\n                return response;\r\n            };\r\n\r\n            adapter.connect().then(function (db) {\r\n                var filterPredicate;\r\n\r\n                if (queryOptions && queryOptions.$filter()) {\r\n                    filterPredicate = queryOptions.$filter();\r\n                }\r\n\r\n                adapter.service.find(db, theModel, includeDeleted).then(function (results) {\r\n\r\n                    var i;\r\n                    var promises = [];\r\n                    for (i = 0; i < results.length; i++) {\r\n                        if (BaseClientSideAdapter.resultMatchesFilters(results[i], filterPredicate)) {\r\n                            promises.push(adapter.performExpand(results[i], theModel, queryOptions, db));\r\n                        }\r\n                    }\r\n\r\n                    $q.all(promises).then(function () {\r\n                        results = BaseClientSideAdapter.applyFilter(results, filterPredicate);\r\n                        results = BaseClientSideAdapter.applyOrderBy(theModel, results, queryOptions);\r\n\r\n                        var totalCount = results.length;\r\n                        results = BaseClientSideAdapter.applyPaging(results, queryOptions);\r\n                        response = new AdapterResponse(results, totalCount);\r\n\r\n                        $log.debug(adapter.name + ': Find ' + theModel.modelName, response, queryOptions);\r\n                        dfd.resolve(response);\r\n                    }, function (e) {\r\n                        dfd.reject(buildError(e));\r\n                    });\r\n\r\n                }, function (e) {\r\n                    dfd.reject(buildError(e));\r\n                });\r\n\r\n            }, function (e) {\r\n                dfd.reject(buildError(e));\r\n            });\r\n            return dfd.promise;\r\n        };\r\n\r\n        /**\r\n         * Updates a Model entity given the primary key of the entity\r\n         * @param {Object} theModel The model of the entity to update\r\n         * @param {String|Number} pk The primary key of the entity\r\n         * @param {Object} modelInstance The entity to update\r\n         * @returns {promise} Resolved with an AdapterResponse\r\n         */\r\n        BaseClientSideAdapter.prototype.update = function (theModel, pk, modelInstance) {\r\n            var dfd = $q.defer();\r\n            var adapter = this;\r\n            var response;\r\n\r\n            var buildError = function (e, status) {\r\n                response = new AdapterResponse(e, 0, status || AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                $log.error(adapter.name + ': Update ' + theModel.modelName, response, modelInstance);\r\n                return response;\r\n            };\r\n\r\n            delete modelInstance[theModel.primaryKeyFieldName];\r\n            // TODO: Convert all dates to ISO Format\r\n            modelInstance[theModel.lastModifiedFieldName] = new Date().toISOString();\r\n            modelInstance = theModel.getRawModelObject(modelInstance, false);\r\n\r\n            adapter.connect().then(function (db) {\r\n\r\n                adapter.service.findOne(db, theModel, pk).then(function (result) {\r\n\r\n                    if (result && !result[theModel.deletedFieldName]) {\r\n\r\n                        angular.extend(result, modelInstance);\r\n                        adapter.service.update(db, theModel, pk, result).then(function (result) {\r\n\r\n                            response = new AdapterResponse(result, 1);\r\n                            $log.debug(adapter.name + ': Update ' + theModel.modelName, response, modelInstance);\r\n                            dfd.resolve(response);\r\n\r\n                        }, function (e) {\r\n                            dfd.reject(buildError(e));\r\n                        });\r\n\r\n                    } else {\r\n                        dfd.reject(buildError('Not Found', AdapterResponse.NOT_FOUND));\r\n                    }\r\n\r\n                }, function (e) {\r\n                    dfd.reject(buildError(e));\r\n                });\r\n\r\n            }, function (e) {\r\n                dfd.reject(buildError(e));\r\n            });\r\n            return dfd.promise;\r\n        };\r\n\r\n        /**\r\n         * Performs a soft remove of an Entity given the primary key of the entity to remove\r\n         * @param {Object} theModel The model of the entity to remove\r\n         * @param {String|Number} pk The primary key of the entity\r\n         * @returns {promise} Resolved with an AdapterResponse\r\n         */\r\n        BaseClientSideAdapter.prototype.remove = function (theModel, pk) {\r\n            var dfd = $q.defer();\r\n            var adapter = this;\r\n            var response;\r\n\r\n            var buildError = function (e, status) {\r\n                response = new AdapterResponse(e, 0, status || AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                $log.error(adapter.name + ': Remove ' + theModel.modelName, response);\r\n                return response;\r\n            };\r\n\r\n            adapter.connect().then(function (db) {\r\n\r\n                adapter.service.findOne(db, theModel, pk).then(function (result) {\r\n\r\n                    if (result) {\r\n\r\n                        result[theModel.lastModifiedFieldName] = new Date().toISOString();\r\n                        result[theModel.deletedFieldName] = true;\r\n\r\n                        adapter.service.update(db, theModel, pk, result).then(function () {\r\n\r\n                            response = new AdapterResponse(null, 1, AdapterResponse.NO_CONTENT);\r\n                            $log.debug(adapter.name + ': Remove ' + theModel.modelName, response);\r\n                            dfd.resolve(response);\r\n\r\n                        }, function (e) {\r\n                            dfd.reject(buildError(e));\r\n                        });\r\n\r\n                    } else {\r\n                        dfd.reject(buildError('Not Found', AdapterResponse.NOT_FOUND));\r\n                    }\r\n\r\n                }, function (e) {\r\n                    dfd.reject(buildError(e));\r\n                });\r\n\r\n            }, function (e) {\r\n                dfd.reject(buildError(e));\r\n            });\r\n            return dfd.promise;\r\n        };\r\n\r\n        /**\r\n         * Takes an Array of entities and creates/updates/deletes them. Returns a list of entities that need to be synchronized\r\n         * @param {Object} theModel The model of the entities to synchronize\r\n         * @param {Array} [dataToSync] An array of objects to create/update/delete\r\n         * @param {String} lastSync An ISO Date String representing the last sync\r\n         * @param {Boolean} [hardDelete=false] If true,any entities that are marked for delete will be hard deleted\r\n         * @returns {promise} Resolved with an AdapterResponse representing the items needing to be synchronized\r\n         */\r\n        BaseClientSideAdapter.prototype.synchronize = function (theModel, dataToSync, lastSync, hardDelete) {\r\n            var dfd = $q.defer();\r\n            var adapter = this;\r\n            var response;\r\n\r\n            var buildError = function (e) {\r\n                response = new AdapterResponse(e, 0, AdapterResponse.INTERNAL_SERVER_ERROR);\r\n                $log.error(adapter.name + ': Synchronize ' + theModel.modelName, response, dataToSync);\r\n                return response;\r\n            };\r\n\r\n            dataToSync = dataToSync || [];\r\n\r\n            adapter.connect().then(function (db) {\r\n\r\n                var i;\r\n                var promises = [];\r\n                for (i = 0; i < dataToSync.length; i++) {\r\n                    promises.push(adapter.syncInstance(db, theModel, dataToSync[i][theModel.primaryKeyFieldName], dataToSync[i], hardDelete));\r\n                }\r\n\r\n                $q.all(promises).then(function (syncResults) {\r\n                    var i;\r\n                    var ignoreList = [];\r\n                    for (i = 0; i < syncResults.length; i++) {\r\n                        if (syncResults[i] && syncResults[i][theModel.primaryKeyFieldName]) {\r\n                            ignoreList.push(syncResults[i][theModel.primaryKeyFieldName]);\r\n                        }\r\n                    }\r\n\r\n                    adapter.getSyncList(db, theModel, lastSync, ignoreList).then(function (results) {\r\n                        response = new AdapterResponse(results, results.length, AdapterResponse.OK);\r\n                        $log.debug(adapter.name + ': Synchronize ' + theModel.modelName, response, syncResults);\r\n                        dfd.resolve(response);\r\n                    }, function (e) {\r\n                        dfd.reject(buildError(e));\r\n                    });\r\n\r\n                }, function (e) {\r\n                    dfd.reject(buildError(e));\r\n                });\r\n\r\n            }, function (e) {\r\n                dfd.reject(buildError(e));\r\n            });\r\n            return dfd.promise;\r\n        };\r\n\r\n        /**\r\n         * Synchronizes a single model instance. This will remove if it is marked for delete, update if it exists, create if it does not exist\r\n         * @param {Object} db The db returned from the connection\r\n         * @param {Object} theModel The model of the entities to synchronize\r\n         * @param {String|Number} pk The primary key of the entity\r\n         * @param {Object} rawModelInstance The raw entity to update\r\n         * @param {Boolean} [hardDelete=false]\r\n         * @returns {promise} Resolved with the instance or null\r\n         */\r\n        BaseClientSideAdapter.prototype.syncInstance = function (db, theModel, pk, rawModelInstance, hardDelete) {\r\n            var dfd = $q.defer();\r\n            var adapter = this;\r\n\r\n            adapter.service.findOne(db, theModel, pk).then(function (result) {\r\n\r\n                // Update if the stored instance's last modified time is before the rawModelInstance's last modified time\r\n                var predicate = new Predicate(theModel.lastModifiedFieldName).lessThan(rawModelInstance[theModel.lastModifiedFieldName]);\r\n\r\n                if (result && BaseClientSideAdapter.resultMatchesFilters(result, predicate)) {\r\n\r\n                    if (!rawModelInstance[theModel.deletedFieldName]) {\r\n\r\n                        // Update the instance\r\n                        delete rawModelInstance[theModel.primaryKeyFieldName];\r\n                        angular.extend(result, rawModelInstance);\r\n                        adapter.service.update(db, theModel, pk, result).then(function (result) {\r\n                            dfd.resolve(result);\r\n                        }, function (e) {\r\n                            dfd.reject(e);\r\n                        });\r\n\r\n                    } else if (hardDelete === true) {\r\n\r\n                        // Hard Delete the instance\r\n                        adapter.service.remove(db, theModel, pk).then(function (result) {\r\n                            dfd.resolve(result);\r\n                        }, function (e) {\r\n                            dfd.reject(e);\r\n                        });\r\n\r\n                    } else {\r\n\r\n                        // Soft Delete the instance\r\n                        result[theModel.lastModifiedFieldName] = new Date().toISOString();\r\n                        result[theModel.deletedFieldName] = true;\r\n\r\n                        adapter.service.update(db, theModel, pk, result).then(function (result) {\r\n                            dfd.resolve(result);\r\n                        }, function (e) {\r\n                            dfd.reject(e);\r\n                        });\r\n\r\n                    }\r\n\r\n                } else if (!result && !rawModelInstance[theModel.deletedFieldName]) {\r\n\r\n                    rawModelInstance[theModel.primaryKeyFieldName] = pk;\r\n                    adapter.service.create(db, theModel, rawModelInstance).then(function (result) {\r\n                        dfd.resolve(result);\r\n                    }, function (e) {\r\n                        dfd.reject(e);\r\n                    });\r\n\r\n                } else {\r\n                    // The stored instance is newer than the update or the object is already deleted\r\n                    dfd.resolve(null);\r\n                }\r\n\r\n            }, function (e) {\r\n                dfd.reject(e);\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        /**\r\n         * Finds all entities that have been modified since the lastSync\r\n         * @param {Object} db The db returned from the connection\r\n         * @param {Object} theModel The model of the entities to synchronize\r\n         * @param {String} lastSync An ISO Date String representing the last sync\r\n         * @param {Array} ignoreList An array of primary keys to ignore\r\n         * @returns {promise} Resolved the list of entities\r\n         */\r\n        BaseClientSideAdapter.prototype.getSyncList = function (db, theModel, lastSync, ignoreList) {\r\n            var dfd = $q.defer();\r\n            var adapter = this;\r\n\r\n            ignoreList = ignoreList || [];\r\n\r\n            adapter.service.find(db, theModel).then(function (results) {\r\n                var predicate;\r\n                var filteredResults = [];\r\n\r\n                if (lastSync) {\r\n                    predicate = new Predicate(theModel.lastModifiedFieldName).greaterThan(new Date(lastSync));\r\n                }\r\n\r\n                var i;\r\n                for (i = 0; i < results.length; i++) {\r\n                    if ((!predicate || BaseClientSideAdapter.resultMatchesFilters(results[i], predicate)) && ignoreList.indexOf(results[i][theModel.primaryKeyFieldName]) === -1) {\r\n                        filteredResults.push(results[i]);\r\n                    }\r\n                }\r\n\r\n                dfd.resolve(filteredResults);\r\n            }, function (e) {\r\n                dfd.reject(e);\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        // Expands a has one model association\r\n        BaseClientSideAdapter.prototype.expandHasOne = function (theModel, instance, association, db, pathsToExpand) {\r\n            var dfd = $q.defer();\r\n            var adapter = this;\r\n\r\n            if (instance[association.mappedBy] === undefined) {\r\n                instance[association.alias] = null;\r\n                dfd.resolve();\r\n                return dfd.promise;\r\n            }\r\n\r\n            adapter.service.findOne(db, theModel, instance[association.mappedBy]).then(function (result) {\r\n\r\n                if (result && !result[theModel.deletedFieldName]) {\r\n                    instance[association.alias] = result;\r\n                    if (pathsToExpand.length > 1) {\r\n\r\n                        var pathToExpand = pathsToExpand.join('.');\r\n                        adapter.expandPath(result, theModel, pathToExpand.substring(pathToExpand.indexOf('.') + 1), db).then(function () {\r\n                            dfd.resolve();\r\n                        }, function (e) {\r\n                            dfd.reject(e);\r\n                        });\r\n\r\n                    } else {\r\n                        dfd.resolve();\r\n                    }\r\n                } else {\r\n                    instance[association.alias] = null;\r\n                    dfd.resolve();\r\n                }\r\n            }, function (e) {\r\n                dfd.reject(e);\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        // Expands a has many model association\r\n        BaseClientSideAdapter.prototype.expandHasMany = function (theModel, instance, association, db, pathsToExpand) {\r\n            var dfd = $q.defer();\r\n            var adapter = this;\r\n\r\n            adapter.service.findByAssociation(db, theModel, instance[theModel.primaryKeyFieldName], association.mappedBy).then(function (results) {\r\n\r\n                var filter = association.getOptions(instance).$filter();\r\n                if (filter) {\r\n                    results = BaseClientSideAdapter.applyFilter(results, filter);\r\n                }\r\n\r\n                instance[association.alias] = results;\r\n                if (pathsToExpand.length > 1) {\r\n\r\n                    var i;\r\n                    var promises = [];\r\n                    var pathToExpand = pathsToExpand.join('.');\r\n                    for (i = 0; i < results.length; i++) {\r\n                        promises.push(adapter.expandPath(results[i], theModel, pathToExpand.substring(pathToExpand.indexOf('.') + 1), db));\r\n                    }\r\n                    $q.all(promises).then(function () {\r\n                        dfd.resolve();\r\n                    }, function (e) {\r\n                        dfd.reject(e);\r\n                    });\r\n\r\n                } else {\r\n                    dfd.resolve();\r\n                }\r\n\r\n            }, function (e) {\r\n                dfd.reject(e);\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        // Expands a Model association given an expand path\r\n        // Recursive\r\n        BaseClientSideAdapter.prototype.expandPath = function (result, theModel, pathToExpand, db) {\r\n            var pathsToExpand = pathToExpand.split('.');\r\n            var toExpand = pathsToExpand[0];\r\n            var adapter = this;\r\n\r\n            if (toExpand) {\r\n                var association = theModel.getAssociationByAlias(toExpand);\r\n                if (association) {\r\n                    var model = association.getModel();\r\n                    if (association.type === 'hasOne') {\r\n                        return adapter.expandHasOne(model, result, association, db, pathsToExpand);\r\n                    } else if (association.type === 'hasMany') {\r\n                        return adapter.expandHasMany(model, result, association, db, pathsToExpand);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // There is nothing left to expand, just resolve.\r\n            var dfd = $q.defer();\r\n            dfd.resolve();\r\n            return dfd.promise;\r\n        };\r\n\r\n        // Expands all Model associations defined in the query options $expand clause\r\n        BaseClientSideAdapter.prototype.performExpand = function (result, theModel, queryOptions, db) {\r\n            var dfd = $q.defer();\r\n            var $expand;\r\n            var promises = [];\r\n\r\n            if (queryOptions) {\r\n                $expand = queryOptions.$expand();\r\n            }\r\n            if ($expand) {\r\n                var paths = $expand.split(',');\r\n                var i;\r\n                for (i = 0; i < paths.length; i++) {\r\n                    promises.push(this.expandPath(result, theModel, paths[i], db));\r\n                }\r\n                $q.all(promises).then(function () {\r\n                    dfd.resolve();\r\n                }, function (e) {\r\n                    $log.error('BrowserStorageAdapter: PerformExpand', e, $expand, result);\r\n                    dfd.reject(e);\r\n                });\r\n            } else {\r\n                dfd.resolve();\r\n            }\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        // Checks if a result matches a predicate filter\r\n        BaseClientSideAdapter.resultMatchesFilters = function (result, predicate) {\r\n            return predicate ? predicate.test(result) : true;\r\n        };\r\n\r\n        // Applies a filter predicate to a set of results and returns an array of the matching results\r\n        BaseClientSideAdapter.applyFilter = function (results, filterPredicate) {\r\n            if (filterPredicate && results) {\r\n                results = results.filter(function (a) {\r\n                    return BaseClientSideAdapter.resultMatchesFilters(a, filterPredicate);\r\n                });\r\n            }\r\n            return results;\r\n        };\r\n\r\n        // Sorts the data given an $orderBy clause in query options\r\n        BaseClientSideAdapter.applyOrderBy = function (theModel, results, queryOptions) {\r\n            if (!queryOptions) {\r\n                return results;\r\n            }\r\n            var orderBy = queryOptions.$orderBy();\r\n            if (orderBy) {\r\n                var property = orderBy.split(' ')[0];\r\n                var direction = orderBy.split(' ')[1] || \"\";\r\n                var isDate = false;\r\n\r\n                if (theModel.fields[property] && theModel.fields[property].type === \"DATE\") {\r\n                    isDate = true;\r\n                }\r\n\r\n                results.sort(function (a, b) {\r\n                    var aTest = a[property];\r\n                    var bTest = b[property];\r\n\r\n                    if (isDate) {\r\n                        aTest = new Date(aTest);\r\n                        bTest = new Date(bTest);\r\n                    }\r\n\r\n                    if (aTest > bTest) {\r\n                        return (direction.toLowerCase() === 'desc') ? -1 : 1;\r\n                    }\r\n                    if (bTest > aTest) {\r\n                        return (direction.toLowerCase() === 'desc') ? 1 : -1;\r\n                    }\r\n                    return 0;\r\n                });\r\n            }\r\n            return results;\r\n        };\r\n\r\n        // Applies paging to a set of results and returns a sliced array of results\r\n        BaseClientSideAdapter.applyPaging = function (results, queryOptions) {\r\n            if (!queryOptions) {\r\n                return results;\r\n            }\r\n            var top = queryOptions.$top();\r\n            var skip = queryOptions.$skip();\r\n            if (top > 0 && skip >= 0) {\r\n                results = results.slice(skip, skip + top);\r\n            }\r\n            return results;\r\n        };\r\n\r\n        return BaseClientSideAdapter;\r\n    }\r\n]);","angular.module('recall.adapter.browserStorage', ['recall']).provider('recallBrowserStorageAdapter', [\r\n    function () {\r\n\r\n        var providerConfig = {};\r\n\r\n        providerConfig.preferredBackend = 'indexedDB';\r\n        this.preferIndexedDB = function () {\r\n            providerConfig.preferredBackend = 'indexedDB';\r\n            return this;\r\n        };\r\n        this.preferWebSQL = function () {\r\n            providerConfig.preferredBackend = 'webSQL';\r\n            return this;\r\n        };\r\n\r\n        // Sets the name of the database to use\r\n        providerConfig.dbName = 'recall';\r\n        this.setDbName = function (dbName) {\r\n            providerConfig.dbName = dbName;\r\n            return this;\r\n        };\r\n\r\n        // Sets the version of the database\r\n        providerConfig.dbVersion = 1;\r\n        this.setDbVersion = function (dbVersion) {\r\n            providerConfig.dbVersion = dbVersion;\r\n            return this;\r\n        };\r\n\r\n        // Sets the size of the database (WebSQL)\r\n        providerConfig.dbSize = 5 * 1024 * 1024; // 5MB\r\n        this.setDbSize = function (dbSize) {\r\n            providerConfig.dbSize = dbSize;\r\n            return this;\r\n        };\r\n\r\n        // Sets the default function to be used as a \"GUID\" generator\r\n        providerConfig.pkGenerator = function () {\r\n            function s4() {\r\n                return Math.floor((1 + Math.random()) * 0x10000)\r\n                    .toString(16)\r\n                    .substring(1);\r\n            }\r\n\r\n            return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\r\n                s4() + '-' + s4() + s4() + s4();\r\n        };\r\n        this.setPkGenerator = function (pkGenerator) {\r\n            providerConfig.pkGenerator = pkGenerator;\r\n            return this;\r\n        };\r\n\r\n        this.$get = [\r\n            '$log',\r\n            '$window',\r\n            'recallBaseClientSideAdapter',\r\n            'recallIndexedDBService',\r\n            'recallWebSQLService',\r\n\r\n            function ($log, $window, BaseClientSideAdapter, indexedDBService, webSQLService) {\r\n\r\n                var connectionArguments = [providerConfig.dbName, providerConfig.dbVersion, providerConfig.dbSize];\r\n\r\n                var init = function () {\r\n                    var service;\r\n                    if (providerConfig.preferredBackend === 'webSQL') {\r\n                        if ($window.openDatabase !== undefined) {\r\n                            service = webSQLService;\r\n                        } else if ($window.indexedDB !== undefined) {\r\n                            service = indexedDBService;\r\n                        }\r\n                    } else {\r\n                        if ($window.indexedDB !== undefined) {\r\n                            service = indexedDBService;\r\n                        } else if ($window.openDatabase !== undefined) {\r\n                            service = webSQLService;\r\n                        }\r\n                    }\r\n\r\n                    if (!service) {\r\n                        $log.error('BrowserStorageAdapter: IndexedDB and WebSQL are not available');\r\n                        return null;\r\n                    } else {\r\n                        return new BaseClientSideAdapter(\"BrowserStorageAdapter\", service, connectionArguments, providerConfig.pkGenerator);\r\n                    }\r\n                };\r\n\r\n                return init();\r\n            }\r\n        ];\r\n    }\r\n]);","angular.module('recall.adapter.browserStorage').factory('recallIndexedDBService', [\r\n    '$q',\r\n    '$window',\r\n    'recall',\r\n\r\n    function ($q, $window, recall) {\r\n\r\n        var indexedDBService = {};\r\n\r\n        indexedDBService.migrate = function (db) {\r\n            var i;\r\n            var model;\r\n            var field;\r\n            var indexName;\r\n            var objectStore;\r\n            var models = recall.getModels();\r\n            for (i = 0; i < models.length; i++) {\r\n                model = models[i];\r\n\r\n                if (!db.objectStoreNames.contains(model.dataSourceName)) {\r\n                    objectStore = db.createObjectStore(model.dataSourceName, { keyPath: model.primaryKeyFieldName });\r\n                    for (field in model.fields) {\r\n                        if (model.fields.hasOwnProperty(field)) {\r\n                            if (model.fields[field].unique === true || model.fields[field].index !== false) {\r\n                                indexName = model.fields[field].index;\r\n                                objectStore.createIndex(field, indexName, { unique: model.fields[field].unique });\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        // Handler for when the DB version is changed in another tab\r\n        indexedDBService.handleVersionChange = function (db) {\r\n            db.onversionchange = function () {\r\n                db.close();\r\n                $window.alert(\"A new version of this page is ready. Please reload!\");\r\n            };\r\n        };\r\n\r\n        indexedDBService.connect = function (dbName, dbVersion) {\r\n            var dfd = $q.defer();\r\n\r\n            var openRequest = $window.indexedDB.open(dbName, dbVersion);\r\n\r\n            openRequest.onupgradeneeded = function (event) {\r\n                indexedDBService.handleVersionChange(event.target.result);\r\n                indexedDBService.migrate(event.target.result);\r\n                dfd.resolve(event.target.result);\r\n            };\r\n\r\n            openRequest.onsuccess = function (event) {\r\n                indexedDBService.handleVersionChange(event.target.result);\r\n                dfd.resolve(event.target.result);\r\n            };\r\n\r\n            openRequest.onerror = function (event) {\r\n                dfd.reject(event.target.errorCode);\r\n            };\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        indexedDBService.create = function (db, theModel, modelInstance) {\r\n            var dfd = $q.defer();\r\n\r\n            var tx = db.transaction([theModel.dataSourceName], \"readwrite\");\r\n            var store = tx.objectStore(theModel.dataSourceName);\r\n            var req = store.add(modelInstance);\r\n\r\n            req.onsuccess = function () {\r\n                dfd.resolve(modelInstance);\r\n            };\r\n\r\n            req.onerror = function () {\r\n                dfd.reject(this.error);\r\n            };\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        indexedDBService.findOne = function (db, theModel, pk) {\r\n            var dfd = $q.defer();\r\n\r\n            var tx = db.transaction([theModel.dataSourceName]);\r\n            var store = tx.objectStore(theModel.dataSourceName);\r\n            var req = store.get(pk);\r\n\r\n            req.onsuccess = function () {\r\n                if (req.result) {\r\n                    dfd.resolve(req.result);\r\n                } else {\r\n                    dfd.resolve(null);\r\n                }\r\n            };\r\n            req.onerror = function () {\r\n                dfd.reject(this.error);\r\n            };\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        indexedDBService.find = function (db, theModel, includeDeleted) {\r\n            var dfd = $q.defer();\r\n\r\n            var tx = db.transaction([theModel.dataSourceName]);\r\n            var store = tx.objectStore(theModel.dataSourceName);\r\n            var req = store.openCursor();\r\n            var results = [];\r\n\r\n            req.onsuccess = function (event) {\r\n                var cursor = event.target.result;\r\n                if (cursor) {\r\n                    if (includeDeleted || !cursor.value[theModel.deletedFieldName]) {\r\n                        results.push(cursor.value);\r\n                    }\r\n                    cursor.continue();\r\n                } else {\r\n                    dfd.resolve(results);\r\n                }\r\n            };\r\n            req.onerror = function () {\r\n                dfd.reject(this.error);\r\n            };\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        indexedDBService.update = function (db, theModel, pk, modelInstance) {\r\n            var dfd = $q.defer();\r\n\r\n            var tx = db.transaction([theModel.dataSourceName], \"readwrite\");\r\n            var store = tx.objectStore(theModel.dataSourceName);\r\n            modelInstance[theModel.primaryKeyFieldName] = pk;\r\n\r\n            var updateReq = store.put(modelInstance);\r\n            updateReq.onsuccess = function () {\r\n                dfd.resolve(modelInstance);\r\n            };\r\n            updateReq.onerror = function () {\r\n                dfd.reject(this.error);\r\n            };\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        indexedDBService.remove = function (db, theModel, pk) {\r\n            var dfd = $q.defer();\r\n\r\n            var tx = db.transaction([theModel.dataSourceName], \"readwrite\");\r\n            var store = tx.objectStore(theModel.dataSourceName);\r\n\r\n            var req = store.delete(pk);\r\n            req.onsuccess = function () {\r\n                dfd.resolve(null);\r\n            };\r\n            req.onerror = function () {\r\n                dfd.reject(this.error);\r\n            };\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        indexedDBService.findByAssociation = function (db, model, pk, mappedBy) {\r\n            var dfd = $q.defer();\r\n\r\n            var tx = db.transaction([model.dataSourceName]);\r\n            var store = tx.objectStore(model.dataSourceName);\r\n            var index = store.index(mappedBy);\r\n            var req = index.openCursor();\r\n            var results = [];\r\n\r\n            req.onsuccess = function (event) {\r\n                var cursor = event.target.result;\r\n                if (cursor) {\r\n                    if (!cursor.value[model.deletedFieldName] && cursor.key === pk) {\r\n                        results.push(cursor.value);\r\n                    }\r\n                    cursor.continue();\r\n                } else {\r\n                    dfd.resolve(results);\r\n                }\r\n            };\r\n            req.onerror = function () {\r\n                dfd.reject(this.error);\r\n            };\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        return indexedDBService;\r\n\r\n    }\r\n]);","angular.module('recall.adapter.browserStorage').factory('recallWebSQLService', [\r\n    '$log',\r\n    '$q',\r\n    '$window',\r\n    'recall',\r\n\r\n    function ($log, $q, $window, recall) {\r\n\r\n        var webSQLService = {};\r\n\r\n        webSQLService.migrate = function (db) {\r\n            var dfd = $q.defer();\r\n\r\n            webSQLService.createTables(db).then(function () {\r\n                webSQLService.migrateTables(db).then(function () {\r\n                    dfd.resolve(null);\r\n                }, function (e) {\r\n                    dfd.reject(e);\r\n                });\r\n            }, function (e) {\r\n                dfd.reject(e);\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        webSQLService.connect = function (dbName, dbVersion, dbSize) {\r\n            var dfd = $q.defer();\r\n\r\n            try {\r\n                var theDb = $window.openDatabase(dbName, dbVersion.toString(), 'Recall WebSQL Database', dbSize);\r\n                webSQLService.migrate(theDb).then(function () {\r\n                    dfd.resolve(theDb);\r\n                }, function (e) {\r\n                    dfd.reject(e);\r\n                });\r\n            } catch (e) {\r\n                dfd.reject(e);\r\n            }\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        webSQLService.create = function (db, theModel, modelInstance) {\r\n            var dfd = $q.defer();\r\n\r\n            db.transaction(function (tx) {\r\n                var columns = [];\r\n                var columnValues = [];\r\n                var placeholders = [];\r\n                var field;\r\n                for (field in theModel.fields) {\r\n                    if (theModel.fields.hasOwnProperty(field) && modelInstance.hasOwnProperty(field)) {\r\n                        columns.push(\"`\" + field + \"`\");\r\n                        columnValues.push(webSQLService.convertValueToSQL(theModel.fields[field], modelInstance));\r\n                        placeholders.push('?');\r\n                    }\r\n                }\r\n                var sql = \"INSERT INTO `\" + theModel.dataSourceName + \"` (\" + columns.join(',') + \") VALUES (\" + placeholders.join(\",\") +\")\";\r\n                $log.debug(\"WebSQLService: \" + sql, columnValues);\r\n                tx.executeSql(sql, columnValues, function () {\r\n                    dfd.resolve(modelInstance);\r\n                }, function (tx, e) {\r\n                    dfd.reject(e);\r\n                });\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        webSQLService.findOne = function (db, theModel, pk) {\r\n            var dfd = $q.defer();\r\n\r\n            db.transaction(function (tx) {\r\n\r\n                var sql = \"SELECT * FROM `\" + theModel.dataSourceName + \"` WHERE `\" + theModel.primaryKeyFieldName + \"`=?\";\r\n                $log.debug(\"WebSQLService: \" + sql, [pk]);\r\n                tx.executeSql(sql, [pk], function (tx, response) {\r\n                    var results = webSQLService.transformSQLResult(theModel, response);\r\n                    if (results[0]) {\r\n                        dfd.resolve(results[0]);\r\n                    } else {\r\n                        dfd.resolve(null);\r\n                    }\r\n                }, function (tx, e) {\r\n                    dfd.reject(e);\r\n                });\r\n\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        webSQLService.find = function (db, theModel, includeDeleted) {\r\n            var dfd = $q.defer();\r\n\r\n            db.transaction(function (tx) {\r\n\r\n                var sql = \"SELECT * FROM `\" + theModel.dataSourceName + \"`\";\r\n                if (!includeDeleted && theModel.deletedFieldName) {\r\n                    sql += \" WHERE `\" + theModel.deletedFieldName + \"`=0\";\r\n                }\r\n\r\n                $log.debug(\"WebSQLService: \" + sql);\r\n                tx.executeSql(sql, [], function (tx, response) {\r\n                    var results = webSQLService.transformSQLResult(theModel, response);\r\n                    dfd.resolve(results);\r\n                }, function (tx, e) {\r\n                    dfd.reject(e);\r\n                });\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        webSQLService.update = function (db, theModel, pk, modelInstance) {\r\n            var dfd = $q.defer();\r\n\r\n            db.transaction(function (tx) {\r\n\r\n                var columns = [];\r\n                var columnNames = [];\r\n                var columnValues = [];\r\n                var placeholders = [];\r\n                var field;\r\n                for (field in theModel.fields) {\r\n                    if (theModel.fields.hasOwnProperty(field) && modelInstance.hasOwnProperty(field) && field !== theModel.primaryKeyFieldName) {\r\n                        columns.push(\"`\" + field + \"`=?\");\r\n                        columnValues.push(webSQLService.convertValueToSQL(theModel.fields[field], modelInstance));\r\n                        columnNames.push(\"`\" + field +  \"`\");\r\n                        placeholders.push(\"?\");\r\n                    }\r\n                }\r\n\r\n                columnValues.push(pk);\r\n\r\n                var sql = \"UPDATE `\" + theModel.dataSourceName + \"` SET \" + columns.join(',') + \" WHERE `\" + theModel.primaryKeyFieldName + \"`=?\";\r\n                $log.debug(\"WebSQLService: \" + sql, columnValues);\r\n                tx.executeSql(sql, columnValues, function () {\r\n                    dfd.resolve(modelInstance);\r\n                }, function (tx, e) {\r\n                    dfd.reject(e);\r\n                });\r\n\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        webSQLService.remove = function (db, theModel, pk) {\r\n            var dfd = $q.defer();\r\n\r\n            db.transaction(function (tx) {\r\n\r\n                var sql = \"DELETE FROM `\" + theModel.dataSourceName + \"` WHERE `\" + theModel.primaryKeyFieldName + \"`=?\";\r\n                $log.debug(\"WebSQLService: \" + sql, [pk]);\r\n                tx.executeSql(sql, [pk], function () {\r\n                    dfd.resolve(null);\r\n                }, function (tx, e) {\r\n                    dfd.reject(e);\r\n                });\r\n\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        webSQLService.findByAssociation = function (db, model, pk, mappedBy) {\r\n            var dfd = $q.defer();\r\n\r\n            var sql = \"SELECT * FROM `\" + model.dataSourceName + \"` WHERE `\" + mappedBy + \"`=?\";\r\n            if (model.deletedFieldName) {\r\n                sql += \" AND `\" + model.deletedFieldName + \"`=0\";\r\n            }\r\n\r\n            $log.debug(\"WebSQLService: \" + sql, [pk]);\r\n\r\n            db.transaction(function (tx) {\r\n                tx.executeSql(sql, [pk], function (tx, response) {\r\n                    var results = webSQLService.transformSQLResult(model, response);\r\n                    dfd.resolve(results);\r\n                }, function (tx, e) {\r\n                    dfd.reject(e);\r\n                });\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        var createTable = function (model, fields, tx) {\r\n            var dfd = $q.defer();\r\n\r\n            var sql = 'CREATE TABLE IF NOT EXISTS `' + model.dataSourceName + '` (' + fields.join(', ') + ')';\r\n            $log.debug(\"WebSQLService: \" + sql);\r\n            tx.executeSql(sql, [], function () {\r\n                dfd.resolve();\r\n            }, function (tx, e) {\r\n                dfd.reject(e);\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        var getModelFieldSQL = function (modelField) {\r\n            var modelFieldSQL = \"`\" + modelField.name + \"`\";\r\n            switch (modelField.type) {\r\n            case 'STRING':\r\n                modelFieldSQL += ' TEXT';\r\n                break;\r\n            case 'NUMBER':\r\n                modelFieldSQL += ' REAL';\r\n                break;\r\n            case 'DATE':\r\n                modelFieldSQL += ' TEXT';\r\n                break;\r\n            case 'BOOLEAN':\r\n                modelFieldSQL += ' INTEGER';\r\n                break;\r\n            default:\r\n                return false;\r\n            }\r\n\r\n            if (modelField.primaryKey) {\r\n                modelFieldSQL += ' PRIMARY KEY';\r\n            }\r\n            if (modelField.unique) {\r\n                modelFieldSQL += ' UNIQUE';\r\n            }\r\n            if (modelField.notNull) {\r\n                modelFieldSQL += ' NOT NULL';\r\n            }\r\n\r\n            return modelFieldSQL;\r\n        };\r\n\r\n        webSQLService.createTables = function (db) {\r\n            var dfd = $q.defer();\r\n\r\n            var promises = [];\r\n            var operations = [];\r\n\r\n            var i;\r\n            var model;\r\n            var field;\r\n            var column;\r\n            var fields;\r\n            var models = recall.getModels();\r\n\r\n            for (i = 0; i < models.length; i++) {\r\n                model = models[i];\r\n\r\n                fields = [];\r\n                for (field in model.fields) {\r\n                    if (model.fields.hasOwnProperty(field)) {\r\n                        column = getModelFieldSQL(model.fields[field]);\r\n\r\n                        if (!column) {\r\n                            return $q.reject('WebSQLService: Migrate - An unknown field type was found.');\r\n                        }\r\n\r\n                        fields.push(column);\r\n                    }\r\n                }\r\n                operations.push({model: model, fields: fields });\r\n            }\r\n\r\n            db.transaction(function (tx) {\r\n                for (i = 0; i < operations.length; i++) {\r\n                    promises.push(createTable(operations[i].model, operations[i].fields, tx));\r\n                }\r\n                $q.all(promises).then(function () {\r\n                    dfd.resolve();\r\n                }, function (e) {\r\n                    dfd.reject(e);\r\n                });\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        webSQLService.addColumnToTable = function (modelField, tableName, tx) {\r\n            var dfd = $q.defer();\r\n\r\n            var column = getModelFieldSQL(modelField);\r\n\r\n            if (!column) {\r\n                return $q.reject('WebSQLService: Migrate - An unknown field type was found.');\r\n            }\r\n\r\n            var sql = \"ALTER TABLE `\" + tableName + \"` ADD \" + column;\r\n            $log.debug(\"WebSQLService: \" + sql);\r\n            tx.executeSql(sql, [], function () {\r\n                dfd.resolve();\r\n            }, function (tx, e) {\r\n                dfd.reject(e);\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        webSQLService.migrateTable = function (model, tableRows, tx) {\r\n            var promises = [];\r\n\r\n            var i;\r\n            var row;\r\n            var tableSQL = null;\r\n            for (i = 0; i < tableRows.length; i++) {\r\n                row = tableRows[i];\r\n                if (row.tbl_name === model.dataSourceName) {\r\n                    tableSQL = row.sql;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (tableSQL) {\r\n                var field;\r\n                var missingFields = [];\r\n                for (field in model.fields) {\r\n                    // TODO: This needs to check if the field name is the same as the model name\r\n                    if (model.fields.hasOwnProperty(field) && tableSQL.indexOf(\"`\" + field + \"`\") === -1) {\r\n                        missingFields.push(model.fields[field]);\r\n                    }\r\n                }\r\n\r\n                for (i = 0; i < missingFields.length; i++) {\r\n                    promises.push(webSQLService.addColumnToTable(missingFields[i], model.dataSourceName, tx));\r\n                }\r\n            }\r\n\r\n            return $q.all(promises);\r\n        };\r\n\r\n        webSQLService.migrateTables = function (db) {\r\n            var dfd = $q.defer();\r\n\r\n            db.transaction(function (tx) {\r\n                var sql = \"SELECT tbl_name, sql from sqlite_master WHERE type = 'table'\";\r\n                $log.debug(\"WebSQLService: \" + sql);\r\n                tx.executeSql(sql, [], function (tx, result) {\r\n                    var model;\r\n                    var models = recall.getModels();\r\n                    var promises = [];\r\n\r\n                    var i;\r\n                    var tableRows = [];\r\n                    for (i = 0; i < result.rows.length; i++) {\r\n                        tableRows.push(result.rows.item(i));\r\n                    }\r\n\r\n                    for (i = 0; i < models.length; i++) {\r\n                        model = models[i];\r\n                        promises.push(webSQLService.migrateTable(model, tableRows, tx));\r\n                    }\r\n\r\n                    $q.all(promises).then(function () {\r\n                        dfd.resolve();\r\n                    }, function (e) {\r\n                        dfd.reject(e);\r\n                    });\r\n                }, function (tx, e) {\r\n                    dfd.reject(e);\r\n                });\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        webSQLService.convertValueToSQL = function (field, modelInstance) {\r\n            switch (field.type) {\r\n            case 'STRING':\r\n            case 'NUMBER':\r\n                return modelInstance[field.name];\r\n            case 'DATE':\r\n                if (modelInstance[field.name] instanceof Date) {\r\n                    return modelInstance[field.name].toISOString();\r\n                }\r\n                return new Date(modelInstance[field.name]).toISOString();\r\n            case 'BOOLEAN':\r\n                if (modelInstance[field.name] === true || modelInstance[field.name] === 1) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            }\r\n        };\r\n\r\n        var convertValueToModel = function (field, sqlResultInstance) {\r\n            if (field.type === \"BOOLEAN\") {\r\n                return sqlResultInstance[field.name] === 1;\r\n            }\r\n            return sqlResultInstance[field.name];\r\n        };\r\n\r\n        var getSQLModelObject = function (theModel, result) {\r\n            var field;\r\n            var obj = {};\r\n            for (field in theModel.fields) {\r\n                if (theModel.fields.hasOwnProperty(field) && result.hasOwnProperty(field)) {\r\n                    obj[field] = convertValueToModel(theModel.fields[field], result);\r\n                }\r\n            }\r\n            return obj;\r\n        };\r\n\r\n        webSQLService.transformSQLResult = function (theModel, response) {\r\n            var results = [];\r\n            var i;\r\n            for (i = 0; i < response.rows.length; i++) {\r\n                results.push(getSQLModelObject(theModel, response.rows.item(i)));\r\n            }\r\n\r\n            return results;\r\n        };\r\n\r\n        return webSQLService;\r\n\r\n    }\r\n]);","/*globals Dropbox*/\r\nangular.module('recall.adapter.dropboxDatastore', ['recall']).provider('recallDropboxDatastoreAdapter', [\r\n    function () {\r\n\r\n        var providerConfig = {};\r\n\r\n        // Sets the Dropbox Datastore client API Key\r\n        providerConfig.clientKey = null;\r\n        this.setClientKey = function (clientKey) {\r\n            providerConfig.clientKey = clientKey;\r\n            return this;\r\n        };\r\n\r\n        // Sets auth driver to use for the Dropbox Datastore. Uses the default if not set.\r\n        providerConfig.authDriver = null;\r\n        this.setAuthDriver = function (driver) {\r\n            providerConfig.authDriver = driver;\r\n            return this;\r\n        };\r\n\r\n        // Sets the default function to be used as a \"GUID\" generator\r\n        providerConfig.pkGenerator = function () {\r\n            function s4() {\r\n                return Math.floor((1 + Math.random()) * 0x10000)\r\n                    .toString(16)\r\n                    .substring(1);\r\n            }\r\n\r\n            return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\r\n                s4() + '-' + s4() + s4() + s4();\r\n        };\r\n        this.setPkGenerator = function (pkGenerator) {\r\n            providerConfig.pkGenerator = pkGenerator;\r\n            return this;\r\n        };\r\n\r\n        this.$get = [\r\n            '$log',\r\n            'recallBaseClientSideAdapter',\r\n            'recallDropboxDatastoreService',\r\n\r\n            function ($log, BaseClientSideAdapter, dropboxDatastoreService) {\r\n\r\n                if (Dropbox === undefined) {\r\n                    $log.error('DropboxDatastoreAdapter: Dropbox is required');\r\n                    return;\r\n                }\r\n\r\n                var connectionArguments = [providerConfig.clientKey, providerConfig.authDriver];\r\n                return new BaseClientSideAdapter(\"DropboxDatastoreAdapter\", dropboxDatastoreService, connectionArguments, providerConfig.pkGenerator);\r\n            }\r\n        ];\r\n    }\r\n]);","/*globals Dropbox*/\r\nangular.module('recall.adapter.dropboxDatastore').factory('recallDropboxDatastoreService', [\r\n    '$q',\r\n\r\n    function ($q) {\r\n\r\n        var dropboxDatastoreService = {};\r\n\r\n        dropboxDatastoreService.connect = function (clientKey, authDriver) {\r\n            var dfd = $q.defer();\r\n\r\n            if (!clientKey) {\r\n                return $q.reject(\"Client key not set\");\r\n            }\r\n\r\n            var client = new Dropbox.Client({key: clientKey});\r\n\r\n            if (authDriver) {\r\n                client.authDriver(authDriver);\r\n            }\r\n\r\n            client.authenticate({interactive: false}, function (error) {\r\n                if (error) {\r\n                    dfd.reject(error);\r\n                } else if (client.isAuthenticated()) {\r\n                    var datastoreManager = client.getDatastoreManager();\r\n                    datastoreManager.openDefaultDatastore(function (error, datastore) {\r\n                        if (error) {\r\n                            dfd.reject(error);\r\n                        } else {\r\n                            dfd.resolve(datastore);\r\n                        }\r\n                    });\r\n                } else {\r\n                    dfd.reject(\"Could not authenticate\");\r\n                }\r\n            });\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        dropboxDatastoreService.create = function (db, theModel, modelInstance) {\r\n            var dfd = $q.defer();\r\n\r\n            try {\r\n                var table = db.getTable(theModel.dataSourceName);\r\n\r\n                var pk = modelInstance[theModel.primaryKeyFieldName];\r\n                delete modelInstance[theModel.primaryKeyFieldName];\r\n\r\n                // Use get or insert to force the record primary key.\r\n                var result = table.getOrInsert(pk, modelInstance);\r\n\r\n                result = transformResult(theModel, result);\r\n                dfd.resolve(result);\r\n            } catch (e) {\r\n                dfd.reject(e);\r\n            }\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        dropboxDatastoreService.findOne = function (db, theModel, pk) {\r\n            var dfd = $q.defer();\r\n\r\n            try {\r\n                var table = db.getTable(theModel.dataSourceName);\r\n                var result = table.get(pk);\r\n\r\n                if (result) {\r\n                    result = transformResult(theModel, result);\r\n                    dfd.resolve(result);\r\n                } else {\r\n                    dfd.resolve(null);\r\n                }\r\n            } catch(e) {\r\n                dfd.reject(e);\r\n            }\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        dropboxDatastoreService.find = function (db, theModel, includeDeleted) {\r\n            var dfd = $q.defer();\r\n\r\n            try {\r\n                var table = db.getTable(theModel.dataSourceName);\r\n                var results = [];\r\n\r\n                if (!includeDeleted && theModel.deletedFieldName) {\r\n                    var query = {};\r\n                    query[theModel.deletedFieldName] = false;\r\n                    results = table.query(query);\r\n                } else {\r\n                    results = table.query();\r\n                }\r\n\r\n                var i;\r\n                for (i = 0; i < results.length; i++) {\r\n                    results[i] = transformResult(theModel, results[i]);\r\n                }\r\n\r\n                dfd.resolve(results);\r\n            } catch(e) {\r\n                dfd.reject(e);\r\n            }\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        dropboxDatastoreService.update = function (db, theModel, pk, modelInstance) {\r\n            var dfd = $q.defer();\r\n\r\n            try {\r\n                var table = db.getTable(theModel.dataSourceName);\r\n                var result = table.get(pk);\r\n                delete modelInstance[theModel.primaryKeyFieldName];\r\n\r\n                if (result) {\r\n\r\n                    result = updateResult(theModel, modelInstance, result);\r\n                    dfd.resolve(result);\r\n\r\n                } else {\r\n                    dfd.reject(null);\r\n                }\r\n            } catch(e) {\r\n                dfd.reject(e);\r\n            }\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        dropboxDatastoreService.remove = function (db, theModel, pk) {\r\n            var dfd = $q.defer();\r\n\r\n            try {\r\n                var table = db.getTable(theModel.dataSourceName);\r\n                var result = table.get(pk);\r\n\r\n                if (result) {\r\n                    result.deleteRecord();\r\n                }\r\n                dfd.resolve(null);\r\n            } catch(e) {\r\n                dfd.reject(e);\r\n            }\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        dropboxDatastoreService.findByAssociation = function (db, model, pk, mappedBy) {\r\n            var dfd = $q.defer();\r\n\r\n            try {\r\n                var table = db.getTable(model.dataSourceName);\r\n\r\n                var query = {};\r\n                query[model.deletedFieldName] = false;\r\n                var results = table.query(query);\r\n                var theResults = [];\r\n\r\n                var i;\r\n                for (i = 0; i < results.length; i++) {\r\n                    if (results[i].get(mappedBy) === pk) {\r\n                        theResults.push(transformResult(model, results[i]));\r\n                    }\r\n                }\r\n\r\n                dfd.resolve(theResults);\r\n            } catch (e) {\r\n                dfd.reject(e);\r\n            }\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        var transformResult = function (theModel, result) {\r\n            var rawObj = {};\r\n\r\n            var field;\r\n            for (field in theModel.fields) {\r\n                if (theModel.fields.hasOwnProperty(field)) {\r\n                    rawObj[field] = result.get(field);\r\n                }\r\n            }\r\n            rawObj[theModel.primaryKeyFieldName] = result.getId();\r\n\r\n            return rawObj;\r\n        };\r\n\r\n        var updateResult = function (theModel, modelInstance, result) {\r\n            var field;\r\n            for (field in theModel.fields) {\r\n                if (theModel.fields.hasOwnProperty(field)) {\r\n                    result.set(field, modelInstance[field]);\r\n                }\r\n            }\r\n            return transformResult(theModel, result);\r\n        };\r\n\r\n        return dropboxDatastoreService;\r\n\r\n    }\r\n]);","angular.module('recall.adapter.oDataREST', ['recall']).provider('recallODataRESTAdapter', [\r\n    function () {\r\n\r\n        var providerConfig = {};\r\n\r\n        // Sets the location of the server api endpoint\r\n        providerConfig.serverAPILocation = \"/api/\";\r\n        this.setServerAPILocation = function (serverAPILocation) {\r\n            if (serverAPILocation.substring(serverAPILocation.length - 1) !== \"/\") {\r\n                serverAPILocation += '/';\r\n            }\r\n            providerConfig.serverAPILocation = serverAPILocation;\r\n            return this;\r\n        };\r\n\r\n        // Sets the name of the results property in the server's response\r\n        providerConfig.resultsField = \"results\";\r\n        this.setResultsField = function (resultsField) {\r\n            providerConfig.resultsField = resultsField;\r\n            return this;\r\n        };\r\n\r\n        // Sets the name of the total count property in the server's response\r\n        providerConfig.totalCountFiled = \"totalCount\";\r\n        this.setTotalCountFiled = function (totalCountFiled) {\r\n            providerConfig.totalCountFiled = totalCountFiled;\r\n            return this;\r\n        };\r\n\r\n        this.$get = [\r\n            '$http',\r\n            '$log',\r\n            '$q',\r\n            'recallAdapterResponse',\r\n\r\n            function ($http,\r\n                      $log,\r\n                      $q,\r\n                      AdapterResponse) {\r\n\r\n                var adapter = {};\r\n\r\n                // Appends the query options to the URL\r\n                var getUrlWithOptions = function (url, queryOptions) {\r\n                    url += queryOptions ? queryOptions.parseOptions() : \"\";\r\n                    return url;\r\n                };\r\n\r\n                /**\r\n                 * Creates a new Entity\r\n                 * @param {Object} theModel The model of the entity to create\r\n                 * @param {Object} modelInstance The entity to create\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.create = function (theModel, modelInstance) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var url = providerConfig.serverAPILocation + theModel.dataSourceName;\r\n\r\n                    $http.post(url, modelInstance)\r\n                        .success(function (data, status, headers, config) {\r\n                            response = new AdapterResponse(data, 1, status, headers, config);\r\n                            $log.debug('ODataRESTAdapter: Create ' + theModel.modelName, response);\r\n                            dfd.resolve(response);\r\n                        })\r\n                        .error(function (error, status, headers, config) {\r\n                            response = new AdapterResponse(error, 0, status, headers, config);\r\n                            $log.error('ODataRESTAdapter: Create ' + theModel.modelName, response, modelInstance);\r\n                            dfd.reject(response);\r\n                        });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Finds a single entity given a primary key\r\n                 * @param {Object} theModel The model of the entity to find\r\n                 * @param {String|Number} pk The primary key of the entity to find\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use for $expand\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.findOne = function (theModel, pk, queryOptions) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    if (!pk) {\r\n                        response = new AdapterResponse(\"No Primary Key was supplied\", 0, AdapterResponse.BAD_REQUEST);\r\n                        $log.error('ODataRESTAdapter: FindOne ' + theModel.modelName, response, pk, queryOptions);\r\n                        return $q.reject(response);\r\n                    }\r\n\r\n                    var url = getUrlWithOptions(providerConfig.serverAPILocation + theModel.dataSourceName + \"/\" + pk, queryOptions);\r\n\r\n                    $http.get(url)\r\n                        .success(function (data, status, headers, config) {\r\n                            response = new AdapterResponse(data, 1, status, headers, config);\r\n                            $log.debug('ODataRESTAdapter: FindOne ' + theModel.modelName, response, pk, queryOptions);\r\n                            dfd.resolve(response);\r\n                        })\r\n                        .error(function (error, status, headers, config) {\r\n                            response = new AdapterResponse(error, 0, status, headers, config);\r\n                            $log.error('ODataRESTAdapter: FindOne ' + theModel.modelName, response, pk, queryOptions);\r\n                            dfd.reject(response);\r\n                        });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Finds a set of Model entities\r\n                 * @param {Object} theModel The model of the entities to find\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.find = function (theModel, queryOptions) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var url = getUrlWithOptions(providerConfig.serverAPILocation + theModel.dataSourceName, queryOptions);\r\n\r\n                    $http.get(url)\r\n                        .success(function (data, status, headers, config) {\r\n                            var results = data;\r\n                            var totalCount;\r\n\r\n                            if (providerConfig.resultsField) {\r\n                                results = data[providerConfig.resultsField];\r\n                                if (providerConfig.totalCountFiled && data[providerConfig.totalCountFiled]) {\r\n                                    totalCount = data[providerConfig.totalCountFiled];\r\n                                }\r\n                            }\r\n\r\n                            response = new AdapterResponse(results, totalCount, status, headers, config);\r\n                            $log.debug('ODataRESTAdapter: Find ' + theModel.modelName, response, queryOptions);\r\n                            dfd.resolve(response);\r\n                        })\r\n                        .error(function (error, status, headers, config) {\r\n                            response = new AdapterResponse(error, 0, status, headers, config);\r\n                            $log.error('ODataRESTAdapter: Find ' + theModel.modelName, response, queryOptions);\r\n                            dfd.reject(response);\r\n                        });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Updates a Model entity given the primary key of the entity\r\n                 * @param {Object} theModel The model of the entity to update\r\n                 * @param {String|Number} pk The primary key of the entity\r\n                 * @param {Object} modelInstance The entity to update\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.update = function (theModel, pk, modelInstance) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    if (!pk) {\r\n                        response = new AdapterResponse(\"No Primary Key was supplied\", 0, AdapterResponse.BAD_REQUEST);\r\n                        $log.error('ODataRESTAdapter: Update ' + theModel.modelName, response, modelInstance);\r\n                        return $q.reject(response);\r\n                    }\r\n\r\n                    var url = providerConfig.serverAPILocation + theModel.dataSourceName + \"/\" + pk;\r\n\r\n                    $http.put(url, modelInstance)\r\n                        .success(function (data, status, headers, config) {\r\n                            response = new AdapterResponse(data, 1, status, headers, config);\r\n                            $log.debug('ODataRESTAdapter: Update ' + theModel.modelName, response, modelInstance);\r\n                            dfd.resolve(response);\r\n                        })\r\n                        .error(function (error, status, headers, config) {\r\n                            response = new AdapterResponse(error, 0, status, headers, config);\r\n                            $log.error('ODataRESTAdapter: Update ' + theModel.modelName, response, modelInstance);\r\n                            dfd.reject(response);\r\n                        });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Removes an Entity given the primary key of the entity to remove\r\n                 * @param {Object} theModel The model of the entity to remove\r\n                 * @param {String|Number} pk The primary key of the entity\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.remove = function (theModel, pk) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    if (!pk) {\r\n                        response = new AdapterResponse(\"No Primary Key was supplied\", 0, AdapterResponse.BAD_REQUEST);\r\n                        $log.error('ODataRESTAdapter: Remove ' + theModel.modelName, response, pk);\r\n                        return $q.reject(response);\r\n                    }\r\n\r\n                    var url = providerConfig.serverAPILocation + theModel.dataSourceName + \"/\" + pk;\r\n\r\n                    $http({method: 'DELETE', url: url})\r\n                        .success(function (data, status, headers, config) {\r\n                            response = new AdapterResponse(data, 1, status, headers, config);\r\n                            $log.debug('ODataRESTAdapter: Remove ' + theModel.modelName, response, pk);\r\n                            dfd.resolve(response);\r\n                        })\r\n                        .error(function (error, status, headers, config) {\r\n                            response = new AdapterResponse(error, 0, status, headers, config);\r\n                            $log.error('ODataRESTAdapter: Remove ' + theModel.modelName, response, pk);\r\n                            dfd.reject(response);\r\n                        });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                /**\r\n                 * Takes an Array of entities and creates/updates/deletes them\r\n                 * @param {Object} theModel The model of the entities to synchronize\r\n                 * @param {Array} dataToSync An array of objects to create/update/delete\r\n                 * @param {String} lastSync An ISO Date String representing the last sync\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.synchronize = function (theModel, dataToSync, lastSync) {\r\n                    var dfd = $q.defer();\r\n                    var response;\r\n\r\n                    var url = providerConfig.serverAPILocation + theModel.dataSourceName;\r\n\r\n                    $http.put(url, {data: dataToSync, lastSync: lastSync})\r\n                        .success(function (data, status, headers, config) {\r\n                            var results = data;\r\n                            var totalCount;\r\n\r\n                            if (providerConfig.resultsField) {\r\n                                results = data[providerConfig.resultsField];\r\n                                if (providerConfig.totalCountFiled && data[providerConfig.totalCountFiled]) {\r\n                                    totalCount = data[providerConfig.totalCountFiled];\r\n                                }\r\n                            }\r\n\r\n                            response = new AdapterResponse(results, totalCount, status, headers, config);\r\n                            $log.debug('ODataRESTAdapter: Synchronize ' + theModel.modelName, response, dataToSync);\r\n                            dfd.resolve(response);\r\n                        })\r\n                        .error(function (error, status, headers, config) {\r\n                            response = new AdapterResponse(error, 0, status, headers, config);\r\n                            $log.error('ODataRESTAdapter: Synchronize ' + theModel.modelName, response, dataToSync);\r\n                            dfd.reject(response);\r\n                        });\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                return adapter;\r\n            }\r\n        ];\r\n    }\r\n]);","angular.module('recall.adapter.sync', ['recall']).provider('recallSyncAdapter', [\r\n    function () {\r\n\r\n        var providerConfig = {};\r\n\r\n        // Sets the master adapter\r\n        providerConfig.masterAdapter = \"\";\r\n        this.setMaster = function (masterAdapter) {\r\n            providerConfig.masterAdapter = masterAdapter;\r\n            return this;\r\n        };\r\n\r\n        // Sets the slave adapter\r\n        providerConfig.slaveAdapter = \"\";\r\n        this.setSlave = function (slaveAdapter) {\r\n            providerConfig.slaveAdapter = slaveAdapter;\r\n            return this;\r\n        };\r\n\r\n        this.$get = [\r\n            '$injector',\r\n            '$log',\r\n            '$q',\r\n            'recallAdapterResponse',\r\n            'recallLocalStorage',\r\n            'recallPredicate',\r\n            'recallPreparedQueryOptions',\r\n\r\n            function ($injector,\r\n                      $log,\r\n                      $q,\r\n                      AdapterResponse,\r\n                      localStorage,\r\n                      Predicate,\r\n                      PreparedQueryOptions) {\r\n\r\n                var adapter = {};\r\n\r\n                /**\r\n                 * Validates the Model during creation\r\n                 * @param {Object} theModel\r\n                 * @returns {Boolean} True if the model passes validation\r\n                 */\r\n                adapter.modelValidationHook = function (theModel) {\r\n                    var master = getMaster();\r\n                    var slave = getSlave();\r\n\r\n                    if (!master) {\r\n                        $log.error('SyncAdapter: Master Adapter not Set', this, theModel);\r\n                        return false;\r\n                    }\r\n                    if (!slave) {\r\n                        $log.error('SyncAdapter: Slave Adapter not Set', this, theModel);\r\n                        return false;\r\n                    }\r\n\r\n                    if (typeof master.synchronize !== 'function') {\r\n                        $log.error('SyncAdapter: Synchronize handler not found on the master adapter', this, theModel);\r\n                        return false;\r\n                    }\r\n                    if (typeof slave.synchronize !== 'function') {\r\n                        $log.error('SyncAdapter: Synchronize handler not found on the slave adapter', this, theModel);\r\n                        return false;\r\n                    }\r\n\r\n                    if (typeof master.modelValidationHook === 'function' && !master.modelValidationHook(theModel)) {\r\n                        return false;\r\n                    }\r\n                    if (typeof slave.modelValidationHook === 'function' && !slave.modelValidationHook(theModel)) {\r\n                        return false;\r\n                    }\r\n\r\n                    return true;\r\n                };\r\n\r\n                /**\r\n                 * Creates a new Entity on the Slave and attempts to sync to the Master\r\n                 * @param {Object} theModel The model of the entity to create\r\n                 * @param {Object} modelInstance The entity to create\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use for preferMaster\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.create = function (theModel, modelInstance, queryOptions) {\r\n                    if (queryOptions && queryOptions.preferMaster() === true) {\r\n                        return getMaster().create(theModel, modelInstance);\r\n                    } else {\r\n                        return getSlave().create(theModel, modelInstance);\r\n                    }\r\n                };\r\n\r\n                /**\r\n                 * Finds a single entity given a primary key on the Slave\r\n                 * @param {Object} theModel The model of the entity to find\r\n                 * @param {String|Number} pk The primary key of the entity to find\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use for $expand and preferMaster\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.findOne = function (theModel, pk, queryOptions) {\r\n                    var response;\r\n\r\n                    if (!pk) {\r\n                        response = new AdapterResponse(\"No Primary Key was supplied\", 0, AdapterResponse.BAD_REQUEST);\r\n                        $log.error('SyncAdapter: FindOne ' + theModel.modelName, response, pk, queryOptions);\r\n                        return $q.reject(response);\r\n                    }\r\n\r\n                    if (queryOptions && queryOptions.preferMaster() === true) {\r\n                        return getMaster().findOne(theModel, pk, queryOptions);\r\n                    } else {\r\n                        return getSlave().findOne(theModel, pk, queryOptions);\r\n                    }\r\n                };\r\n\r\n                /**\r\n                 * Finds a set of Model entities on the Slave\r\n                 * @param {Object} theModel The model of the entities to find\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.find = function (theModel, queryOptions) {\r\n                    if (queryOptions && queryOptions.preferMaster() === true) {\r\n                        return getMaster().find(theModel, queryOptions);\r\n                    } else {\r\n                        return getSlave().find(theModel, queryOptions);\r\n                    }\r\n                };\r\n\r\n                /**\r\n                 * Updates a Model entity on the Slave given the primary key of the entity. Attempts to sync to the Master.\r\n                 * @param {Object} theModel The model of the entity to update\r\n                 * @param {String|Number} pk The primary key of the entity\r\n                 * @param {Object} modelInstance The entity to update\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use for preferMaster\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.update = function (theModel, pk, modelInstance, queryOptions) {\r\n                    var response;\r\n\r\n                    if (!pk) {\r\n                        response = new AdapterResponse(\"No Primary Key was supplied\", 0, AdapterResponse.BAD_REQUEST);\r\n                        $log.error('SyncAdapter: Update ' + theModel.modelName, response, modelInstance);\r\n                        return $q.reject(response);\r\n                    }\r\n\r\n                    if (queryOptions && queryOptions.preferMaster() === true) {\r\n                        return getMaster().update(theModel, pk, modelInstance);\r\n                    } else {\r\n                        return getSlave().update(theModel, pk, modelInstance);\r\n                    }\r\n                };\r\n\r\n                /**\r\n                 * Removes an Entity from the Slave given the primary key of the entity to remove. Attempts to sync to the Master.\r\n                 * @param {Object} theModel The model of the entity to remove\r\n                 * @param {String|Number} pk The primary key of the entity\r\n                 * @param {PreparedQueryOptions} [queryOptions] The query options to use for preferMaster\r\n                 * @returns {promise} Resolved with an AdapterResponse\r\n                 */\r\n                adapter.remove = function (theModel, pk, queryOptions) {\r\n                    var response;\r\n\r\n                    if (!pk) {\r\n                        response = new AdapterResponse(\"No Primary Key was supplied\", 0, AdapterResponse.BAD_REQUEST);\r\n                        $log.error('SyncAdapter: Remove ' + theModel.modelName, response, pk);\r\n                        return $q.reject(response);\r\n                    }\r\n\r\n                    if (queryOptions && queryOptions.preferMaster() === true) {\r\n                        return getMaster().remove(theModel, pk);\r\n                    } else {\r\n                        return getSlave().remove(theModel, pk);\r\n                    }\r\n                };\r\n\r\n                /**\r\n                 * Manually Syncs the Slave and Master adapters\r\n                 * @param {Object|Array} theModel The model of the entities to synchronize or an array of models to synchronize\r\n                 * @param {Boolean} [force=false] If true, the last sync time will be cleared before sync effectively synchronizing all data.\r\n                 * @returns {promise} Resolved with an AdapterResponse for each model synchronized\r\n                 */\r\n                adapter.synchronize = function (theModel, force) {\r\n                    if (theModel instanceof Array) {\r\n                        var promises = [];\r\n                        var i;\r\n                        for (i = 0; i < theModel.length; i++) {\r\n                            if (force === true) {\r\n                                clearLastSyncTime(theModel[i]);\r\n                            }\r\n                            promises.push(processSyncRequest(theModel[i]));\r\n                        }\r\n                        return $q.all(promises);\r\n                    }\r\n                    if (force === true) {\r\n                        clearLastSyncTime(theModel);\r\n                    }\r\n                    return processSyncRequest(theModel);\r\n                };\r\n\r\n                var getAdapter = function (adapter) {\r\n                    return (typeof adapter === 'string') ? $injector.get(adapter) : adapter;\r\n                };\r\n                var getMaster = function () {\r\n                    return getAdapter(providerConfig.masterAdapter);\r\n                };\r\n                var getSlave = function () {\r\n                    return getAdapter(providerConfig.slaveAdapter);\r\n                };\r\n\r\n                /**\r\n                 * Represents the result of a sync operation\r\n                 * @param {Array} sent An array of entities sent to the remote adapter\r\n                 * @param {Array} returned An array of data objects returned from the remote adapter\r\n                 * @param {Number} totalProcessed The total number of entities processed in the sync operation\r\n                 * @param {String} status The operation's status message\r\n                 * @constructor\r\n                 */\r\n                var SyncResult = function (sent, returned, totalProcessed, status) {\r\n                    this.sent = sent;\r\n                    this.returned = returned;\r\n                    this.totalProcessed = totalProcessed;\r\n                    this.status = status;\r\n                };\r\n\r\n                /**\r\n                 * Retrieves the last sync time for a given model in ISO format\r\n                 * @param {Object} theModel The model initiating the sync (the sync time is stored per model)\r\n                 * @returns {String} The last sync date in ISO format\r\n                 */\r\n                var getLastSyncTime = function (theModel) {\r\n                    return localStorage.get(localStorage.keys.LAST_SYNC, theModel.modelName);\r\n                };\r\n\r\n                /**\r\n                 * Updates the last sync time for a model\r\n                 * @param {Object} theModel The model initiating the sync\r\n                 */\r\n                var updateLastSyncTimeToNow = function (theModel) {\r\n                    localStorage.set(localStorage.keys.LAST_SYNC, new Date().toISOString(), theModel.modelName);\r\n                };\r\n\r\n                /**\r\n                 * Removes the last sync times so the next sync synchronizes everything\r\n                 * @param theModel\r\n                 */\r\n                var clearLastSyncTime = function (theModel) {\r\n                    localStorage.remove(localStorage.keys.LAST_SYNC, theModel.modelName);\r\n                };\r\n\r\n                /**\r\n                 * Sends data from the local adapter to the remote adapter to update.\r\n                 * @param {Object} theModel The model initiating the sync\r\n                 * @param {Array} data An array of objects to send to the remote adapter to sync\r\n                 * @returns {promise}\r\n                 */\r\n                var sendSyncRequestData = function (theModel, data) {\r\n                    var lastSync = getLastSyncTime(theModel);\r\n                    return getMaster().synchronize(theModel, data, lastSync);\r\n                };\r\n\r\n                /**\r\n                 * Processes the data sent back from the remote adapter. This will update/create/delete records in the local\r\n                 * adapter\r\n                 * @param {Object} theModel The model initiating the sync\r\n                 * @param {Array} data An array of data objects to update/create/delete\r\n                 * @returns {promise}\r\n                 */\r\n                var processSyncResponseData = function (theModel, data) {\r\n                    var lastSync = getLastSyncTime(theModel);\r\n                    return getSlave().synchronize(theModel, data, lastSync);\r\n                };\r\n\r\n                /**\r\n                 * Initializes a sync request\r\n                 * @param {Object} theModel The model initiating the sync\r\n                 * @returns {promise}\r\n                 */\r\n                var processSyncRequest = function (theModel) {\r\n                    var dfd = $q.defer();\r\n                    var result;\r\n\r\n                    var syncRequestData = [];\r\n                    var syncResponseData = [];\r\n                    var totalItemsProcessed = 0;\r\n\r\n                    var handleError = function (e) {\r\n                        result = new SyncResult(syncRequestData, syncResponseData, totalItemsProcessed, e);\r\n                        $log.error('SyncAdapter: ' + theModel.modelName, result);\r\n                        dfd.reject(result);\r\n                    };\r\n\r\n                    var handleComplete = function () {\r\n                        result = new SyncResult(syncRequestData, syncResponseData, totalItemsProcessed, 'Complete');\r\n                        $log.debug('SyncAdapter: ' + theModel.modelName, 'Sync Complete', result);\r\n                        updateLastSyncTimeToNow(theModel);\r\n                        dfd.resolve(result);\r\n                    };\r\n\r\n                    $log.debug('SyncAdapter: ' + theModel.modelName + ' Sync Started');\r\n\r\n                    var lastSync = getLastSyncTime(theModel);\r\n                    var queryOptions = new PreparedQueryOptions();\r\n                    if (lastSync) {\r\n                        var predicate = new Predicate('lastModified').greaterThanOrEqualTo(lastSync);\r\n                        queryOptions.$filter(predicate);\r\n                    }\r\n\r\n                    getSlave().find(theModel, queryOptions, true).then(function (response) {\r\n                        $log.debug('SyncAdapter: Sending ' + response.count + ' local item(s) to sync');\r\n                        totalItemsProcessed += response.count;\r\n                        syncRequestData = response.data;\r\n                        sendSyncRequestData(theModel, response.data).then(function (syncResponse) {\r\n                            // TODO: Handle Conflicts\r\n\r\n                            $log.debug('SyncAdapter: Found ' + syncResponse.data.length + ' remote item(s) to sync');\r\n                            totalItemsProcessed += syncResponse.data.length;\r\n                            syncResponseData = syncResponse.data;\r\n\r\n                            if (syncResponse.data.length > 0) {\r\n                                processSyncResponseData(theModel, syncResponse.data).then(handleComplete, handleError);\r\n                            } else {\r\n                                // No data from server to sync\r\n                                handleComplete();\r\n                            }\r\n                        }, handleError);\r\n                    }, handleError);\r\n\r\n                    return dfd.promise;\r\n                };\r\n\r\n                return adapter;\r\n            }\r\n        ];\r\n    }\r\n]);","angular.module('recall').factory(\"recallAssociation\", [\r\n    '$injector',\r\n    '$log',\r\n    '$q',\r\n    'recallPredicate',\r\n    'recallPreparedQueryOptions',\r\n\r\n    function ($injector, $log, $q, Predicate, PreparedQueryOptions) {\r\n\r\n        /**\r\n         * Association class\r\n         * @param {Object|Association} definition\r\n         * @constructor\r\n         */\r\n        var Association = function (definition) {\r\n            this.invalid = false;\r\n\r\n            if (definition.type) {\r\n                this.type = definition.type;\r\n            } else if (typeof definition.hasOne === 'string') {\r\n                this.type = 'hasOne';\r\n            } else if (typeof definition.hasMany === 'string') {\r\n                this.type = 'hasMany';\r\n            }\r\n\r\n            this.modelName = definition.modelName || definition.hasOne || definition.hasMany;\r\n            this.alias = definition.as || definition.alias || this.modelName;\r\n            this.mappedBy = definition.mappedBy || definition.foreignKey;\r\n            this.getOptions = definition.getOptions || function () { return new PreparedQueryOptions(); };\r\n\r\n            if (!this.modelName || !this.type || !this.mappedBy) {\r\n                $log.error('Association: The association definition is invalid', definition);\r\n                this.invalid = true;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Gets the Association's Model\r\n         * @returns {Object} The model\r\n         */\r\n        Association.prototype.getModel = function () {\r\n            var recallService = $injector.get('recall');\r\n            return recallService.getModel(this.modelName);\r\n        };\r\n\r\n        /**\r\n         * Expands the association and adds it to the entity\r\n         * @param {Entity} entity The entity to add the expanded association to\r\n         * @returns {promise}\r\n         */\r\n        Association.prototype.expand = function (entity) {\r\n            var dfd = $q.defer();\r\n            var self = this;\r\n            var Model = self.getModel();\r\n\r\n            if (!Model) {\r\n                return $q.reject('Association: Expand could not find the association\\'s Model');\r\n            }\r\n\r\n            var queryOptions = self.getOptions(entity);\r\n\r\n            if (self.type === 'hasOne') {\r\n\r\n                Model.adapter.findOne(Model, entity[self.mappedBy], queryOptions).then(function (response) {\r\n                    entity[self.alias] = Model.getRawModelObject(response.data);\r\n                    // TODO: The association should be an entity and should have transformResult called\r\n                    entity.$entity.storedState[self.alias] = Model.getRawModelObject(response.data);\r\n                    $log.debug(\"Association: Expand\", self.type, self.alias, entity, response);\r\n                    dfd.resolve();\r\n                }, function (e) {\r\n                    $log.error(\"Association: Expand\", self.type, self.alias, entity, e);\r\n                    dfd.reject(e);\r\n                });\r\n\r\n            } else if (self.type === 'hasMany') {\r\n\r\n                var predicate = new Predicate(self.mappedBy).equals(entity.$getPrimaryKey());\r\n                var existingPredicate = queryOptions.$filter();\r\n                if (existingPredicate) {\r\n                    predicate = Predicate.join([predicate, existingPredicate]);\r\n                }\r\n                queryOptions.$filter(predicate);\r\n\r\n                Model.adapter.find(Model, queryOptions).then(function (response) {\r\n                    var base = [];\r\n                    var stored = [];\r\n                    // TODO: The associations should be entities and should have transformResult called\r\n                    var i;\r\n                    for (i = 0; i < response.data.length; i++) {\r\n                        base.push(Model.getRawModelObject(response.data[i]));\r\n                        stored.push(Model.getRawModelObject(response.data[i]));\r\n                    }\r\n                    entity[self.alias] = base;\r\n                    entity.$entity.storedState[self.alias] = stored;\r\n                    $log.debug(\"Association: Expand\", self.type, self.alias, entity, response);\r\n                    dfd.resolve();\r\n                }, function (e) {\r\n                    $log.error(\"Association: Expand\", self.type, self.alias, entity, e);\r\n                    dfd.reject(e);\r\n                });\r\n            } else {\r\n                $log.error(\"Association: Expand Association type not supported\", self.type, self.alias, entity);\r\n                dfd.reject(\"Association type not supported\");\r\n            }\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        return Association;\r\n    }\r\n]);","angular.module('recall').factory(\"recallEntity\", [\r\n    '$log',\r\n    '$q',\r\n\r\n    function ($log, $q) {\r\n\r\n        /**\r\n         * An Entity is an object that represents an instance of a Model. The Entity instance exposes save and remove\r\n         * operations as well as dirty checking and validation.\r\n         *\r\n         * @param {Object} [object] The object to construct the entity from\r\n         * @param {Object} model The model that created the Entity\r\n         * @param {Boolean} [persisted = false] Set to true if this model was created from an object that came from an adapter.\r\n         * @constructor\r\n         */\r\n        var Entity = function (object, model, persisted) {\r\n            model.extendFromRawObject(this, object || {});\r\n\r\n            Object.defineProperty(this, \"$entity\", {value: {\r\n                lastDirtyCheck: new Date().getTime(),\r\n                lastDirtyState: false,\r\n                persisted: persisted === true,\r\n                saveInProgress: false,\r\n                storedState: null\r\n            }});\r\n            Object.defineProperty(this, \"$model\", {value: model});\r\n\r\n            this.$convertAssociationsToEntities();\r\n            this.$storeState();\r\n        };\r\n\r\n        /**\r\n         * Retrieves the Primary Key for the Entity.\r\n         * @returns {String|Number} The Primary Key\r\n         */\r\n        Entity.prototype.$getPrimaryKey = function () {\r\n            return this[this.$model.primaryKeyFieldName];\r\n        };\r\n\r\n        /**\r\n         *\r\n         */\r\n        Entity.prototype.$convertAssociationsToEntities = function () {\r\n            var i;\r\n            var alias;\r\n            var ForeignModel;\r\n            var a;\r\n            for (i = 0; i < this.$model.associations.length; i++) {\r\n                alias = this.$model.associations[i].alias;\r\n                ForeignModel = this.$model.associations[i].getModel();\r\n\r\n                if (this.$model.associations[i].type === 'hasOne') {\r\n                    if (this[alias] !== undefined && !this[alias].$entity) {\r\n                        this[alias] = new ForeignModel.Entity(this[alias], this.$entity.persisted);\r\n                    }\r\n                } else if (this.$model.associations[i].type === 'hasMany') {\r\n                    if (this[alias] !== undefined && this[alias] instanceof Array) {\r\n                        for (a = 0; a < this[alias].length; a++) {\r\n                            if (!this[alias][a].$entity) {\r\n                                this[alias][a] = new ForeignModel.Entity(this[alias][a], this.$entity.persisted);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Expands a given association on an Entity\r\n         *\r\n         * @param {String} associationName The alias of the association to expand\r\n         * @returns {promise}\r\n         */\r\n        Entity.prototype.$expand = function (associationName) {\r\n            var association = this.$model.getAssociationByAlias(associationName);\r\n\r\n            if (!association) {\r\n                return $q.reject('Entity: $expand could not find the association.');\r\n            }\r\n\r\n            return association.expand(this);\r\n        };\r\n\r\n        /**\r\n         * Validates an entity against the model's field definition.\r\n         * @returns {Boolean} True if the model validation succeeds\r\n         */\r\n        Entity.prototype.$isValid = function () {\r\n            // TODO: This does not validate associations\r\n            var field;\r\n            var matchesType = false;\r\n            var fieldIsUndefined;\r\n            for (field in this.$model.fields) {\r\n                if (this.$model.fields.hasOwnProperty(field)) {\r\n                    fieldIsUndefined = (this[field] === null || this[field] === undefined);\r\n                    if (this.$model.fields[field].notNull === true && fieldIsUndefined) {\r\n                        $log.debug(\"Entity: $isValid returned false\", \"NotNull field was null\", field, this);\r\n                        return false;\r\n                    }\r\n                    switch (this.$model.fields[field].type) {\r\n                        case 'STRING':\r\n                            matchesType = typeof this[field] === 'string';\r\n                            break;\r\n                        case 'NUMBER':\r\n                            matchesType = typeof this[field] === 'number';\r\n                            break;\r\n                        case 'BOOLEAN':\r\n                            matchesType = this[field] === true || this[field] === false;\r\n                            break;\r\n                        case 'DATE':\r\n                            matchesType = this[field] instanceof Date || !isNaN(Date.parse(this[field]));\r\n                            break;\r\n                    }\r\n                    if (!matchesType && !fieldIsUndefined) {\r\n                        $log.debug(\"Entity: $isValid returned false\", field + \" was not a \" + this.$model.fields[field].type, this);\r\n                        return false;\r\n                    }\r\n                    if (typeof this.$model.fields[field].validate === \"function\" && !this.$model.fields[field].validate(this[field])) {\r\n                        $log.debug(\"Entity: $isValid returned false\", \"Custom validator failed\", field, this);\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n\r\n        /**\r\n         * Persists the model with the adapter. This will update the model if it exists in the adapter or create\r\n         * the model if it does not exist.\r\n         *\r\n         * @method $save\r\n         * @param {PreparedQueryOptions} queryOptions\r\n         * @returns {promise} Resolves with the model\r\n         */\r\n        Entity.prototype.$save = function (queryOptions) {\r\n            var dfd = $q.defer();\r\n            var self = this;\r\n\r\n            if (!self.$isValid()) {\r\n                $log.warn(\"Entity: $save: aborted\", self, self[self.$model.primaryKeyFieldName]);\r\n                self.$reset();\r\n                return $q.reject(\"aborted\");\r\n            }\r\n\r\n            self.$entity.saveInProgress = true;\r\n            var itemToSave = self.$model.preSave(self);\r\n\r\n            var updateSavedState = function (entity, succeeded) {\r\n                entity.$entity.saveInProgress = false;\r\n                if (succeeded !== false) {\r\n                    entity.$storeState();\r\n                    entity.$entity.persisted = true;\r\n                } else {\r\n                    entity.$reset();\r\n                }\r\n            };\r\n\r\n            // The model exists in the DB\r\n            if (self.$entity.persisted && itemToSave[self.$model.primaryKeyFieldName]) {\r\n                itemToSave = self.$model.preUpdate(itemToSave);\r\n\r\n                var pk = itemToSave[self.$model.primaryKeyFieldName];\r\n                self.$model.adapter.update(self.$model, pk, itemToSave, queryOptions).then(function (response) {\r\n                    var result = self.$model.transformResult(response.data);\r\n                    self.$model.extendFromRawObject(self, result);\r\n                    updateSavedState(self, true);\r\n                    $log.debug(\"Entity: $save: update\", self, itemToSave, response);\r\n                    dfd.resolve(self);\r\n                }, function (e) {\r\n                    updateSavedState(self, false);\r\n                    $log.error(\"Entity: $save: update\", self, itemToSave, e);\r\n                    dfd.reject(e);\r\n                });\r\n            } else {\r\n                // The model is new\r\n                itemToSave = self.$model.preCreate(itemToSave);\r\n                self.$model.adapter.create(self.$model, itemToSave, queryOptions).then(function (response) {\r\n                    var result = self.$model.transformResult(response.data);\r\n                    self.$model.extendFromRawObject(self, result);\r\n                    updateSavedState(self, true);\r\n                    $log.debug(\"Entity: $save: create\", self, itemToSave, response);\r\n                    dfd.resolve(self);\r\n                }, function (e) {\r\n                    updateSavedState(self, false);\r\n                    $log.error(\"Entity: $save: create\", self, itemToSave, e);\r\n                    dfd.reject(e);\r\n                });\r\n            }\r\n\r\n            return dfd.promise;\r\n        };\r\n\r\n        /**\r\n         * Removes the model from the adapter.\r\n         *\r\n         * @method $remove\r\n         * @param {PreparedQueryOptions} queryOptions\r\n         * @returns {promise}\r\n         */\r\n        Entity.prototype.$remove = function (queryOptions) {\r\n            if (this[this.$model.primaryKeyFieldName]) {\r\n                return this.$model.adapter.remove(this.$model, this[this.$model.primaryKeyFieldName], queryOptions);\r\n            }\r\n            $log.error('Entity: $remove', 'The primary key was not found');\r\n            return $q.reject(\"The primary key was not found.\");\r\n        };\r\n\r\n        /**\r\n         * Stores the model's state so that it can later be reset to the state if needed. This is called\r\n         * on $save so that the model's state is always at the latest save point.\r\n         *\r\n         * @method $storeState\r\n         */\r\n        Entity.prototype.$storeState = function () {\r\n            this.$entity.storedState = this.$model.getRawModelObject(this, false);\r\n            this.$entity.lastDirtyCheck = new Date().getTime();\r\n            this.$entity.lastDirtyState = false;\r\n        };\r\n\r\n        /**\r\n         * Checks to see if the properties have diverged from the stored state. If so, this means that\r\n         * the properties have been changed and have not been saved.\r\n         *\r\n         * @method $isDirty\r\n         * @returns {Boolean} True if the properties are different than what is in the stored state.\r\n         */\r\n        Entity.prototype.$isDirty = function () {\r\n            if (this.$entity.saveInProgress) {\r\n                return false;\r\n            }\r\n\r\n            if (!this.$entity.storedState) {\r\n                return false;\r\n            }\r\n\r\n            var now = new Date().getTime();\r\n            var delta = now - this.$entity.lastDirtyCheck;\r\n            if (this.$entity.lastDirtyCheck && delta < this.$model.dirtyCheckThreshold) {\r\n                return this.$entity.lastDirtyState;\r\n            }\r\n\r\n            this.$entity.lastDirtyCheck = new Date().getTime();\r\n\r\n            // TODO: This does not dirty check associations\r\n            var field;\r\n            var viewValue;\r\n            var storedValue;\r\n            for (field in this.$model.fields) {\r\n                if (this.$model.fields.hasOwnProperty(field)) {\r\n                    storedValue = this.$entity.storedState[field];\r\n                    viewValue = this[field];\r\n\r\n                    if (storedValue !== viewValue) {\r\n                        $log.debug(\"Entity: $isDirty\", this[this.$model.primaryKeyFieldName], true, delta);\r\n                        this.$entity.lastDirtyState = true;\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            $log.debug(\"Entity: $isDirty\", this[this.$model.primaryKeyFieldName], false, delta);\r\n            this.$entity.lastDirtyState = false;\r\n            return false;\r\n        };\r\n\r\n        /**\r\n         * Resets a model back to its stored state. This will reset any pending changes back to the\r\n         * entities last save or initial retrieval.\r\n         *\r\n         * @method $reset\r\n         * @returns {Array} A list of the changed field names and their before and after values\r\n         */\r\n        Entity.prototype.$reset = function () {\r\n            if (!this.$entity.storedState) {\r\n                this.$storeState();\r\n                return [];\r\n            }\r\n\r\n            var prop;\r\n            var changedProperties = [];\r\n\r\n            for (prop in this.$entity.storedState) {\r\n                if (this.$entity.storedState.hasOwnProperty(prop) && this[prop] !== this.$entity.storedState[prop]) {\r\n                    changedProperties.push({\r\n                        name: prop,\r\n                        before: this[prop],\r\n                        after: this.$entity.storedState[prop]\r\n                    });\r\n                    this[prop] = this.$entity.storedState[prop];\r\n                }\r\n            }\r\n\r\n            this.$entity.lastDirtyState = false;\r\n            this.$entity.lastDirtyCheck = new Date().getTime();\r\n\r\n            $log.debug(\"Entity: $reset\", this[this.$model.primaryKeyFieldName], changedProperties);\r\n            return changedProperties;\r\n        };\r\n\r\n        return Entity;\r\n    }\r\n]);","angular.module('recall').factory('recallLocalStorage', [\r\n    '$document',\r\n    '$window',\r\n\r\n    function ($document, $window) {\r\n\r\n        /**\r\n         * The localStorage utility helps manage the storage and retrieval of registered application data.\r\n         */\r\n        var storage = {\r\n            keys: {\r\n                LAST_SYNC: 'LAST_SYNC'\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Checks if the key is registered with the class.\r\n         *\r\n         * @param {String} key\r\n         * @returns {Boolean} True if the key exists\r\n         */\r\n        var keyExists = function (key) {\r\n            return storage.keys[key] !== undefined;\r\n        };\r\n\r\n        /**\r\n         * Appends a modifier to a key\r\n         * @param {String} key\r\n         * @param {String} modifier\r\n         * @returns {String} The key with the modifier appended.\r\n         */\r\n        var addKeyModifier = function (key, modifier) {\r\n            if (modifier) {\r\n                key += \"_\" + modifier;\r\n            }\r\n            return key;\r\n        };\r\n\r\n        /**\r\n         * Register a new key with the local storage service.\r\n         * @param {String} key\r\n         */\r\n        storage.registerKey = function (key) {\r\n            if (!keyExists(key)) {\r\n                storage.keys[key] = key;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Stores data by key in local browser storage.\r\n         *\r\n         * @param {String} key The key to use as the local storage name. Must be a key found in localStorage.keys.\r\n         * @param {String} value The string value to store.\r\n         * @param {String} keyModifier An additional identifier on the key.\r\n         */\r\n        storage.set = function (key, value, keyModifier) {\r\n            if (keyExists(key)) {\r\n                key = addKeyModifier(key, keyModifier);\r\n                if (storage.supportsLocalStorage()) {\r\n                    $window.localStorage.setItem(key, value);\r\n                } else {\r\n                    var life = 60 * 60 * 24 * 5;\r\n                    var v = encodeURIComponent(value);\r\n                    $document.cookie = key + '=' + v + '; max-age=' + life + ';';\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Retrieves stored data by key.\r\n         *\r\n         * @param {String} key The key of the data to retrieve. Must be a key found in localStorage.keys.\r\n         * @param {String} keyModifier An additional identifier on the key.\r\n         * @return {String} The string value stored.\r\n         */\r\n        storage.get = function (key, keyModifier) {\r\n            var value = \"\";\r\n\r\n            if (keyExists(key)) {\r\n                key = addKeyModifier(key, keyModifier);\r\n                if (storage.supportsLocalStorage()) {\r\n                    value = $window.localStorage.getItem(key) || \"\";\r\n                } else {\r\n                    var regexp = new RegExp(key + \"=([^;]+)\", \"g\");\r\n                    var c = regexp.exec($document.cookie);\r\n\r\n                    if (c) {\r\n                        value = decodeURIComponent(c[1]) ;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return value;\r\n        };\r\n\r\n        /**\r\n         * Removes stored data by key.\r\n         *\r\n         * @param {String} key The key of the data to remove. Must be a key found in localStorage.keys.\r\n         * @param {String} keyModifier An additional identifier on the key.\r\n         */\r\n        storage.remove = function (key, keyModifier) {\r\n            if (keyExists(key)) {\r\n                key = addKeyModifier(key, keyModifier);\r\n                if (storage.supportsLocalStorage()) {\r\n                    $window.localStorage.removeItem(key);\r\n                } else {\r\n                    $document.cookie = key + '=; max-age=0;';\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Checks if the browser supports html5 local storage.\r\n         *\r\n         * @private\r\n         * @returns {Boolean} True if the browser does support html5 local storage.\r\n         */\r\n        storage.supportsLocalStorage = function () {\r\n            try {\r\n                return 'localStorage' in $window && $window.localStorage !== null;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        };\r\n\r\n        return storage;\r\n    }\r\n]);","angular.module('recall').factory(\"recallModel\", [\r\n    '$log',\r\n    '$q',\r\n    'recallAssociation',\r\n    'recallEntity',\r\n    'recallModelField',\r\n\r\n    function ($log,\r\n              $q,\r\n              Association,\r\n              Entity,\r\n              ModelField) {\r\n\r\n        // Bubbles an error promise to the top.\r\n        var propagateError = function (e) {\r\n            return $q.reject(e);\r\n        };\r\n\r\n        /**\r\n         * A Model is in charge of defining a structure for a type of Entity. The model provides CRUD operations for\r\n         * that type of Entity as well as some other utility functions.\r\n         *\r\n         * Models should not be created directly. Instead, the recall service should be used as a proxy for creating\r\n         * models.\r\n         *\r\n         * @constructor\r\n         */\r\n        var Model = function (modelDefinition) {\r\n            this.modelName = modelDefinition.name;\r\n            this.dataSourceName = modelDefinition.dataSourceName || modelDefinition.name;\r\n\r\n            // Add the model definition to the Model as read only\r\n            Object.defineProperty(this, \"modelDefinition\", {value: modelDefinition, writable: false});\r\n\r\n            // Add a Constructor method to the Model for constructing new Entities from the Model: new Model.Entity();\r\n            var self = this;\r\n            Object.defineProperty(this, \"Entity\", {writable: false, configurable: false, value: function (obj, persisted) {\r\n                return( new Entity(obj, self, persisted === true) );\r\n            }});\r\n\r\n            this.fields = {};\r\n            this.associations = [];\r\n\r\n            this.dirtyCheckThreshold = 30;\r\n\r\n            this.primaryKeyFieldName = null;\r\n            this.lastModifiedFieldName = null;\r\n            this.deletedFieldName = null;\r\n            this.adapter = null;\r\n        };\r\n\r\n        Model.prototype.setLastModifiedFieldName = function (lastModifiedFieldName) {\r\n            this.lastModifiedFieldName = lastModifiedFieldName;\r\n        };\r\n\r\n        Model.prototype.setDeletedFieldName = function (deletedFieldName) {\r\n            this.deletedFieldName = deletedFieldName;\r\n        };\r\n\r\n        Model.prototype.setAdapter = function (adapter) {\r\n            this.adapter = adapter;\r\n        };\r\n\r\n        Model.prototype.setDirtyCheckThreshold = function (dirtyCheckThreshold) {\r\n            this.dirtyCheckThreshold = dirtyCheckThreshold;\r\n        };\r\n\r\n        // Initializes the fields using the common ModelField class\r\n        Model.prototype.initializeModelFields = function () {\r\n            var modelDefinitionFields = this.modelDefinition.fields;\r\n            var field;\r\n            var modelField;\r\n            var lastModifiedField;\r\n            var deletedField;\r\n            for (field in modelDefinitionFields) {\r\n                if (modelDefinitionFields.hasOwnProperty(field)) {\r\n                    modelField = new ModelField(field, modelDefinitionFields[field]);\r\n\r\n                    if (modelField.primaryKey) {\r\n                        this.primaryKeyFieldName = field;\r\n                    }\r\n\r\n                    if (modelField.invalid) {\r\n                        return false;\r\n                    } else {\r\n                        this.fields[field] = modelField;\r\n                    }\r\n\r\n                    if (field === this.lastModifiedFieldName) {\r\n                        lastModifiedField = modelField;\r\n                    }\r\n\r\n                    if (field === this.deletedFieldName) {\r\n                        deletedField = field;\r\n                    }\r\n                }\r\n            }\r\n            if (lastModifiedField && lastModifiedField.type !== \"DATE\") {\r\n                $log.error('Model: The last modified field is not a Date field');\r\n                return false;\r\n            }\r\n            if (this.lastModifiedFieldName && !lastModifiedField) {\r\n                this.fields[this.lastModifiedFieldName] = new ModelField(this.lastModifiedFieldName, {\r\n                    type: \"DATE\",\r\n                    index: true,\r\n                    getDefaultValue: function () {\r\n                        return new Date().toISOString();\r\n                    }\r\n                });\r\n            }\r\n            if (deletedField && deletedField.type !== \"BOOLEAN\") {\r\n                $log.error('Model: The deletedField field is not a Boolean field');\r\n                return false;\r\n            }\r\n            if (this.deletedFieldName && !deletedField) {\r\n                this.fields[this.deletedFieldName] = new ModelField(this.deletedFieldName, {\r\n                    type: \"BOOLEAN\",\r\n                    index: true,\r\n                    getDefaultValue: function () {\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n            return true;\r\n        };\r\n\r\n        // TODO: Support many to many associations\r\n        // Initialize the Model associations using the HasOneAssociation and HasManyAssociation classes\r\n        Model.prototype.initializeAssociations = function () {\r\n            var modelDefinitionAssociations = this.modelDefinition.associations;\r\n            if (!modelDefinitionAssociations) {\r\n                return;\r\n            }\r\n            var i;\r\n            var association;\r\n            for (i = 0; i < modelDefinitionAssociations.length; i++) {\r\n                association = new Association(modelDefinitionAssociations[i]);\r\n\r\n                if (association && !association.invalid) {\r\n                    if (association.type === 'hasOne') {\r\n                        if (!this.fields[association.mappedBy]) {\r\n                            // If no field is defined for the foreign key, define one assuming the same foreign key type.\r\n                            this.fields[association.mappedBy] = new ModelField(association.mappedBy, {\r\n                                type: this.fields[this.primaryKeyFieldName].type,\r\n                                index: association.mappedBy\r\n                            });\r\n                        } else {\r\n                            this.fields[association.mappedBy].index = association.mappedBy;\r\n                        }\r\n                    }\r\n\r\n                    this.associations.push(association);\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Gets a Model Association by the alias name. The alias is defined as the \"as\" property on an alias if\r\n         * defined and falls back to the model name if \"as\" is not defined.\r\n         *\r\n         * @param {String} alias The association's alias\r\n         * @returns {Object} The association object\r\n         */\r\n        Model.prototype.getAssociationByAlias = function (alias) {\r\n            var i;\r\n            for (i = 0; i < this.associations.length; i++) {\r\n                if (this.associations[i].alias === alias) {\r\n                    return this.associations[i];\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Extends an entity with a raw object. The raw object could be input from a controller or the result from\r\n         * an adapter.\r\n         *\r\n         * @param {Object} entity The entity to extend\r\n         * @param {Object} rawObject The object to extend from.\r\n         */\r\n        Model.prototype.extendFromRawObject = function (entity, rawObject) {\r\n            angular.extend(entity, this.getRawModelObject(rawObject));\r\n        };\r\n\r\n        /**\r\n         * Gets a raw representation of the model object to be used in adapter transactions. This returns an object\r\n         * in which only the Model defined fields are set. This also looks through expanded associations to set the\r\n         * foreignKey field for one to n associations and sets the association to the raw association object.\r\n         *\r\n         * @param {Object} modelEntity\r\n         * @param {Boolean} [includeExpandedAssociations = true] Include the expanded association in the raw object.\r\n         * @returns {Object} The raw object\r\n         */\r\n        Model.prototype.getRawModelObject = function (modelEntity, includeExpandedAssociations) {\r\n            var object = {};\r\n            var field;\r\n            for (field in this.fields) {\r\n                if (this.fields.hasOwnProperty(field)) {\r\n                    object[field] = modelEntity[field];\r\n                }\r\n            }\r\n            var i;\r\n            var alias;\r\n            var foreignKey;\r\n            var ForeignModel;\r\n            var a;\r\n            for (i = 0; i < this.associations.length; i++) {\r\n                alias = this.associations[i].alias;\r\n                ForeignModel = this.associations[i].getModel();\r\n\r\n                if (this.associations[i].type === 'hasOne') {\r\n                    if (modelEntity[alias] !== undefined && modelEntity[alias] !== null) {\r\n                        foreignKey = modelEntity[alias][ForeignModel.primaryKeyFieldName];\r\n                        object[this.associations[i].mappedBy] = foreignKey;\r\n\r\n                        if (includeExpandedAssociations !== false) {\r\n                            object[alias] = ForeignModel.getRawModelObject(modelEntity[alias]);\r\n                        }\r\n                    }\r\n                } else if (this.associations[i].type === 'hasMany' && includeExpandedAssociations !== false) {\r\n                    if (modelEntity[alias] !== undefined && modelEntity[alias] instanceof Array) {\r\n                        object[alias] = [];\r\n                        for (a = 0; a < modelEntity[alias].length; a++) {\r\n                            object[alias].push(ForeignModel.getRawModelObject(modelEntity[alias][a]));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Applies the default values on any undefined field in an entity.\r\n         *\r\n         * @param {Object} entity The entity to set the default values on\r\n         */\r\n        Model.prototype.applyDefaultValues = function (entity) {\r\n            var field;\r\n            for (field in this.fields) {\r\n                if (this.fields.hasOwnProperty(field)) {\r\n                    if (typeof this.fields[field].getDefaultValue === 'function' && entity[field] === undefined) {\r\n                        entity[field] = this.fields[field].getDefaultValue(entity);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Transforms all objects returned by adapter transactions. This calls the transformResult function defined\r\n         * in the model. This also recursively calls transformResult on all associations.\r\n         *\r\n         * @method transformResult\r\n         * @param {Object} resultEntity\r\n         * @returns {Object} The transformed result\r\n         */\r\n        Model.prototype.transformResult = function (resultEntity) {\r\n            var i;\r\n            var alias;\r\n            var ForeignModel;\r\n            var a;\r\n            for (i = 0; i < this.associations.length; i++) {\r\n                alias = this.associations[i].alias;\r\n                ForeignModel = this.associations[i].getModel();\r\n\r\n                if (this.associations[i].type === 'hasOne') {\r\n                    if (resultEntity[alias] !== undefined) {\r\n                        resultEntity[alias] = ForeignModel.transformResult(resultEntity[alias]);\r\n                    }\r\n                } else if (this.associations[i].type === 'hasMany') {\r\n                    if (resultEntity[alias] !== undefined && resultEntity[alias] instanceof Array) {\r\n                        for (a = 0; a < resultEntity[alias].length; a++) {\r\n                            resultEntity[alias][a] = ForeignModel.transformResult(resultEntity[alias][a]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            resultEntity = this.getRawModelObject(resultEntity);\r\n            if (typeof this.modelDefinition.transformResult === 'function') {\r\n                resultEntity = this.modelDefinition.transformResult(resultEntity);\r\n            }\r\n            return resultEntity;\r\n        };\r\n\r\n        /**\r\n         * Ran before the create and update adapter transactions. This calls the preSave function defined in the\r\n         * model.\r\n         *\r\n         * @method preSave\r\n         * @param {Object} entity\r\n         * @returns {Object} The raw transformed entity\r\n         */\r\n        Model.prototype.preSave = function (entity) {\r\n            entity = this.getRawModelObject(entity);\r\n            if (typeof this.modelDefinition.preSave === 'function') {\r\n                return this.modelDefinition.preSave(entity);\r\n            }\r\n            return entity;\r\n        };\r\n\r\n        /**\r\n         * Ran before the create adapter transaction. This applies the default values to any undefined fields and\r\n         * then calls the preCreate function defined in the model.\r\n         *\r\n         * @method preCreate\r\n         * @param {Object} rawEntity\r\n         * @returns {Object} The raw transformed entity\r\n         */\r\n        Model.prototype.preCreate = function (rawEntity) {\r\n            this.applyDefaultValues(rawEntity);\r\n            if (typeof this.modelDefinition.preCreate === 'function') {\r\n                return this.modelDefinition.preCreate(rawEntity);\r\n            }\r\n            return rawEntity;\r\n        };\r\n\r\n        /**\r\n         * Ran before the update adapter transaction. This calls the preUpdate function defined in the model.\r\n         *\r\n         * @method preUpdate\r\n         * @param {Object} rawEntity\r\n         * @returns {Object} The raw transformed entity\r\n         */\r\n        Model.prototype.preUpdate = function (rawEntity) {\r\n            if (typeof this.modelDefinition.preUpdate === 'function') {\r\n                return this.modelDefinition.preUpdate(rawEntity);\r\n            }\r\n            return rawEntity;\r\n        };\r\n\r\n        /**\r\n         * Retrieves a single model from the adapter given a primary key. Query options can be passed to determine\r\n         * select and expand operations.\r\n         *\r\n         * @method findOne\r\n         * @param {String} pk The primary key of the model to retrieve\r\n         * @param {Object} [queryOptions] Query options to use for retrieval\r\n         * @returns {promise} Resolves with the Entity\r\n         */\r\n        Model.prototype.findOne = function (pk, queryOptions) {\r\n            var self = this;\r\n            if (!pk) {\r\n                $log.error('Model: FindOne', 'The primary key was not supplied');\r\n                return $q.reject(\"The primary key was not supplied.\");\r\n            }\r\n\r\n            return this.adapter.findOne(this, pk, queryOptions).then(function (response) {\r\n                var result = self.transformResult(response.data);\r\n                var entity = new Entity(result, self, true);\r\n                $log.debug(\"Model: FindOne\", entity, response, queryOptions);\r\n                return entity;\r\n            }, propagateError);\r\n        };\r\n\r\n        /**\r\n         * Retrieves a list of models from the adapter. Query options can be passed to determine top, skip, order by,\r\n         * select, expand, and filter operations.\r\n         *\r\n         * @method find\r\n         * @param {Object} [queryOptions] Query options to use for retrieval\r\n         * @returns {promise} Resolves with data.results and data.totalCount where results are Entities\r\n         */\r\n        Model.prototype.find = function (queryOptions) {\r\n            var self = this;\r\n            return this.adapter.find(this, queryOptions).then(function (response) {\r\n                var results = [];\r\n                var i;\r\n                for (i = 0; i < response.data.length; i++) {\r\n                    results.push(new Entity(self.transformResult(response.data[i]), self, true));\r\n                }\r\n\r\n                var clientResponse = {\r\n                    results: results,\r\n                    totalCount: response.count\r\n                };\r\n                $log.debug(\"Model: Find\", clientResponse, response, queryOptions);\r\n                return clientResponse;\r\n            }, propagateError);\r\n        };\r\n\r\n        /**\r\n         * Removes the model from the adapter given a primary key.\r\n         *\r\n         * @method remove\r\n         * @param {String} pk The primary key of the model to remove\r\n         * @param {Object} [queryOptions] Query options\r\n         * @returns {promise}\r\n         */\r\n        Model.prototype.remove = function (pk, queryOptions) {\r\n            if (!pk) {\r\n                $log.error('Model: Remove', 'The primary key was not supplied');\r\n                return $q.reject(\"The primary key was not supplied.\");\r\n            }\r\n            return this.adapter.remove(this, pk, queryOptions);\r\n        };\r\n\r\n        return Model;\r\n    }\r\n]);","angular.module('recall').factory(\"recallModelField\", [\r\n    '$log',\r\n\r\n    function ($log) {\r\n\r\n        /**\r\n         * Model Field class to make all model fields consistent\r\n         * @param {String} name\r\n         * @param {Object | String} definition The Field Definition or the Field Type\r\n         * @constructor\r\n         */\r\n        var ModelField = function (name, definition) {\r\n            this.invalid = false;\r\n            this.name = name;\r\n\r\n            this.primaryKey = false;\r\n            this.unique = false;\r\n            this.index = false;\r\n            this.notNull = false;\r\n\r\n            if (typeof definition === 'string') {\r\n                this.type = definition.toUpperCase();\r\n            } else if (definition.primaryKey === true) {\r\n                asPrimaryKey(this, definition);\r\n            } else {\r\n                fromDefinition(this, definition);\r\n            }\r\n\r\n            if (!this.validateField()) {\r\n                $log.error('ModelField: The field definition is invalid', this, definition);\r\n            }\r\n        };\r\n\r\n        ModelField.prototype.validateField = function () {\r\n            if (!this.name || !this.type) {\r\n                this.invalid = true;\r\n                return false;\r\n            }\r\n            if (this.name.match(/[^\\w+]/) !== null) {\r\n                this.invalid = true;\r\n                return false;\r\n            }\r\n            this.invalid = false;\r\n            return true;\r\n        };\r\n\r\n        var asPrimaryKey = function (field, definition) {\r\n            // The adapter or the adapter's handler should enforce uniqueness of the primary key.\r\n            // The index on the primary key should be handled automatically without needing to specify an index.\r\n            // In order to pass validation during creation, the primary key should not be set as notNull.\r\n            // This of course should be enforced by the adapter or the adapter's handler.\r\n            field.primaryKey = true;\r\n            field.type = definition.type ? definition.type.toUpperCase() : null;\r\n            field.notNull = false;\r\n            field.unique = false;\r\n            field.index = false;\r\n\r\n            if (typeof definition.getDefaultValue === 'function') {\r\n                $log.warn('ModelField: getDefaultValue is ignored for the primary key');\r\n            }\r\n            if (typeof definition.validate === 'function') {\r\n                $log.warn('ModelField: validate is ignored for the primary key');\r\n            }\r\n        };\r\n\r\n        var fromDefinition = function (field, definition) {\r\n            field.type = definition.type ? definition.type.toUpperCase() : null;\r\n            field.unique = definition.unique === true;\r\n            field.index = (typeof definition.index === 'string') ? definition.index : (definition.index === true) ? field.name : false;\r\n            field.notNull = definition.notNull === true;\r\n\r\n            if (typeof definition.getDefaultValue === 'function') {\r\n                field.getDefaultValue = definition.getDefaultValue;\r\n            }\r\n            if (typeof definition.validate === 'function') {\r\n                field.validate = definition.validate;\r\n            }\r\n        };\r\n\r\n        return ModelField;\r\n    }\r\n]);","// Date.toISOString polyfill: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\r\nif (!Date.prototype.toISOString) {\r\n    (function () {\r\n\r\n        function pad(number) {\r\n            if (number < 10) {\r\n                return '0' + number;\r\n            }\r\n            return number;\r\n        }\r\n\r\n        Date.prototype.toISOString = function () {\r\n            return this.getUTCFullYear() +\r\n                '-' + pad(this.getUTCMonth() + 1) +\r\n                '-' + pad(this.getUTCDate()) +\r\n                'T' + pad(this.getUTCHours()) +\r\n                ':' + pad(this.getUTCMinutes()) +\r\n                ':' + pad(this.getUTCSeconds()) +\r\n                '.' + (this.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +\r\n                'Z';\r\n        };\r\n    }());\r\n}","angular.module('recall').factory('recallPredicate', [\r\n    function () {\r\n        /*\r\n         * BASED ON:\r\n         * Predicate\r\n         * version: 1.1.2\r\n         * author: David Hamilton\r\n         * license: https://github.com/nova706/PreparedQueryOptions/blob/master/LICENSE.txt (MIT)\r\n         * https://github.com/nova706/PreparedQueryOptions\r\n         *\r\n         */\r\n\r\n        /**\r\n         * A predicate is used for the $filter operator in a query. Predicates can be joined to query\r\n         * using a group of filters with the 'and' operator.\r\n         *\r\n         * This is a helper class for the PreparedQueryOptions class to assist in building complex\r\n         * filter clauses.\r\n         *\r\n         * @class Predicate\r\n         * @constructor\r\n         * @param {String} [property] The property to filter by.\r\n         * @param {Function} [parser] A function that returns the predicate string.\r\n         */\r\n        function Predicate(property, parser) {\r\n            this.property = property;\r\n            this.parser = parser;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Joins a provided set of predicates using the group operator and returns a new Predicate\r\n         *\r\n         * @method join\r\n         * @param {Predicate[]} predicates Array of predicates to join.\r\n         * @param {String} [groupOperator] The operator for the filter set ('and' 'or').\r\n         * @return {Predicate} Predicate object.\r\n         */\r\n        Predicate.join = function (predicates, groupOperator) {\r\n            if (predicates instanceof Array && predicates.length > 0) {\r\n                return new Predicate().join(predicates, groupOperator);\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Sets the property of a predicate\r\n         *\r\n         * @method setProperty\r\n         * @param {String} property\r\n         * @return {Predicate} Predicate object.\r\n         */\r\n        Predicate.prototype.setProperty = function (property) {\r\n            this.property = property;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operator to 'eq' and the value to the input parameter\r\n         *\r\n         * @method equals\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.equals = function (value) {\r\n            this.parser = function () {\r\n                return this.property + ' eq ' + escapeValue(value);\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operator to 'ne' and the value to the input parameter\r\n         *\r\n         * @method notEqualTo\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.notEqualTo = function (value) {\r\n            this.parser = function () {\r\n                return this.property + ' ne ' +  escapeValue(value);\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operator to 'gt' and the value to the input parameter\r\n         *\r\n         * @method greaterThan\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.greaterThan = function (value) {\r\n            this.parser = function () {\r\n                return this.property + ' gt ' +  escapeValue(value);\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operator to 'ge' and the value to the input parameter\r\n         *\r\n         * @method greaterThanOrEqualTo\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.greaterThanOrEqualTo = function (value) {\r\n            this.parser = function () {\r\n                return this.property + ' ge ' +  escapeValue(value);\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operator to 'lt' and the value to the input parameter\r\n         *\r\n         * @method lessThan\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.lessThan = function (value) {\r\n            this.parser = function () {\r\n                return this.property + ' lt ' +  escapeValue(value);\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operator to 'le' and the value to the input parameter\r\n         *\r\n         * @method lessThanOrEqualTo\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.lessThanOrEqualTo = function (value) {\r\n            this.parser = function () {\r\n                return this.property + ' le ' +  escapeValue(value);\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operation to substringof and the value to the input parameter\r\n         *\r\n         * @method contains\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.contains = function (value) {\r\n            this.parser = function () {\r\n                return 'substringof(' +  escapeValue(value) + ', ' + this.property + ')';\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operation to startswith and the value to the input parameter\r\n         *\r\n         * @method startsWith\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.startsWith = function (value) {\r\n            this.parser = function () {\r\n                return 'startswith(' + this.property + ', ' +  escapeValue(value) + ')';\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Modifies an existing predicate setting the operation to endswith and the value to the input parameter\r\n         *\r\n         * @method startsWith\r\n         * @param {String|Number|Boolean} (value) The value to match.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.endsWith = function (value) {\r\n            this.parser = function () {\r\n                return 'endswith(' + this.property + ', ' +  escapeValue(value) + ')';\r\n            };\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Joins an existing predicate with additional predicates using the group operator\r\n         *\r\n         * @method join\r\n         * @param {Predicate|Predicate[]} predicates A single predicate or an array of predicates to join to the existing one.\r\n         * @param {String} [groupOperator] The operator for the filter set ('and' 'or').\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.join = function (predicates, groupOperator) {\r\n            var initialPredicate;\r\n\r\n            if (this.property && typeof this.parser === 'function') {\r\n                initialPredicate = new Predicate(this.property, this.parser);\r\n            }\r\n\r\n            var newPredicates = [];\r\n            if (predicates instanceof Predicate) {\r\n                newPredicates.push(predicates);\r\n            } else if (predicates instanceof Array && predicates.length > 0) {\r\n                var i;\r\n                for (i = 0; i < predicates.length; i++) {\r\n                    if (predicates[i]) {\r\n                        newPredicates.push(predicates[i]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (newPredicates.length > 0) {\r\n                delete this.parser;\r\n                delete this.property;\r\n\r\n                this.joinedPredicates = (this.joinedPredicates) ? this.joinedPredicates.concat(newPredicates) : newPredicates;\r\n                if (groupOperator || !this.groupOperator) {\r\n                    this.groupOperator = (groupOperator === 'or') ? 'or' : 'and';\r\n                }\r\n                if (initialPredicate) {\r\n                    this.joinedPredicates.unshift(initialPredicate);\r\n                }\r\n            }\r\n\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Joins an existing predicate with additional predicates using the 'and' group operator\r\n         *\r\n         * @method and\r\n         * @param {Predicate|Predicate[]} predicates A single predicate or an array of predicates to join to the existing one.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.and = function (predicates) {\r\n            return this.join(predicates, 'and');\r\n        };\r\n\r\n        /**\r\n         * Joins an existing predicate with additional predicates using the 'or' group operator\r\n         *\r\n         * @method or\r\n         * @param {Predicate|Predicate[]} predicates A single predicate or an array of predicates to join to the existing one.\r\n         * @return {Predicate} Used for chaining function calls\r\n         */\r\n        Predicate.prototype.or = function (predicates) {\r\n            return this.join(predicates, 'or');\r\n        };\r\n\r\n        /**\r\n         * Evaluate an object to see if it matches the predicate filter conditions.\r\n         *\r\n         * @method test\r\n         * @param {Object} object The object to test against the predicate.\r\n         * @param {Boolean} [failOnMissingAssociation=true] Should the test fail when the a filter is performed against an expanded association that is not present\r\n         * @return {Boolean} True if the object matches the filter conditions.\r\n         */\r\n        Predicate.prototype.test = function (object, failOnMissingAssociation) {\r\n            return testPredicate(this, object, failOnMissingAssociation);\r\n        };\r\n\r\n        /**\r\n         * Builds and returns a URL parameter string based on the predicate.\r\n         *\r\n         * @method parsePredicate\r\n         * @param {Boolean} [nested = false] Used for building the nested group during recursion\r\n         * @returns {String}\r\n         */\r\n        Predicate.prototype.parsePredicate = function (nested) {\r\n            nested = (nested === true);\r\n            var urlString = '';\r\n\r\n            if (this.property && typeof this.parser === 'function') {\r\n                return this.parser();\r\n            }\r\n\r\n            if (this.joinedPredicates && this.joinedPredicates.length > 0) {\r\n                var i;\r\n                var predicate;\r\n                var predicateString;\r\n                for (i = 0; i < this.joinedPredicates.length; i++) {\r\n                    predicate = this.joinedPredicates[i];\r\n                    predicateString = predicate.parsePredicate(true);\r\n                    urlString += (i > 0) ? ' ' + this.groupOperator + ' ' + predicateString : predicateString;\r\n                }\r\n            }\r\n\r\n            return nested ? '(' + urlString + ')' : urlString;\r\n        };\r\n\r\n        /**\r\n         * Creates a predicate structure from a string\r\n         *\r\n         * @method fromString\r\n         * @param {String} predicateString\r\n         * @return {Predicate|null} null if the predicate could not be built from the string\r\n         */\r\n        Predicate.fromString = function (predicateString) {\r\n            if (typeof predicateString !== \"string\") {\r\n                return null;\r\n            }\r\n\r\n            // Extract all the filters out of the predicate string\r\n            var conditionMatcher = new RegExp(\"(substringof\\\\(.+?\\\\)|startswith\\\\(.+?\\\\)|endswith\\\\(.+?\\\\)|[\\\\w\\\\.]+?\\\\s(?:eq|ne|gt|ge|lt|le)\\\\s(?:\\\\w+|\\\\'.+?\\\\'))\", \"g\");\r\n            var filters = predicateString.match(conditionMatcher);\r\n\r\n            if (!filters) {\r\n                return null;\r\n            }\r\n\r\n            // Convert each filter into a predicate\r\n            var i;\r\n            for (i = 0; i < filters.length; i++) {\r\n                filters[i] = getPredicateFromSegment(filters[i]);\r\n                if (filters[i] === null) {\r\n                    return null;\r\n                }\r\n            }\r\n\r\n            if (filters.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            // Remove all predicates from string\r\n            i = 0;\r\n            predicateString = predicateString.replace(conditionMatcher, function () {\r\n                return i++;\r\n            });\r\n\r\n            if (filters.length === 1) {\r\n                if (predicateString.replace(/[0-9]|\\s|and|or/g, \"\") !== \"\") {\r\n                    return null;\r\n                }\r\n                return filters[0];\r\n            }\r\n\r\n            return buildPredicateFromMap(predicateString, filters);\r\n        };\r\n\r\n        /**\r\n         * Builds a predicate based on a predicate map and array of extracted filters\r\n         * @param {String} predicateMap A String representing a map of a predicate where the indexes map to the filters array\r\n         *                              \"1 and (2 or 3)\" where filters.length === 3\r\n         * @param {Predicate[]} filters An array of Predicates whose index map to the indexes on the predicateMap\r\n         * @returns {Predicate|Null} The resulting Predicate or null if the map is invalid\r\n         */\r\n        var buildPredicateFromMap = function (predicateMap, filters) {\r\n            var closeParenthesisIndex;\r\n            var openParenthesisIndex;\r\n            var groupString;\r\n            var filterIndexes;\r\n            var groupPredicate = null;\r\n            var groupFilters;\r\n            var operator;\r\n            var testNextLevel = true;\r\n\r\n            while (testNextLevel) {\r\n                closeParenthesisIndex = predicateMap.indexOf(')');\r\n                if (closeParenthesisIndex !== -1) {\r\n                    openParenthesisIndex = predicateMap.lastIndexOf('(', closeParenthesisIndex);\r\n                    groupString = predicateMap.substring(openParenthesisIndex + 1, closeParenthesisIndex);\r\n                    predicateMap = predicateMap.substring(0, openParenthesisIndex) + filters.length + predicateMap.substring(closeParenthesisIndex + 1);\r\n                } else {\r\n                    groupString = predicateMap;\r\n                    testNextLevel = false;\r\n                }\r\n\r\n                // If the group contains invalid characters then return null as an invalid predicate string.\r\n                if (groupString.replace(/[0-9]|\\s|and|or/g, \"\") !== \"\") {\r\n                    return null;\r\n                }\r\n\r\n                // If the group uses both 'and' and 'or' then return null as an invalid predicate string.\r\n                if (groupString.indexOf('and') >= 0 && groupString.indexOf('or') >= 0) {\r\n                    return null;\r\n                }\r\n\r\n                filterIndexes = groupString.match(/[0-9]+/g);\r\n                groupFilters = [];\r\n                var i;\r\n                for (i = 0; i < filterIndexes.length; i++) {\r\n                    groupFilters.push(filters[Number(filterIndexes[i])]);\r\n                }\r\n                operator = groupString.indexOf('or') >= 0 ? 'or' : 'and';\r\n                groupPredicate = new Predicate().join(groupFilters, operator);\r\n                filters.push(groupPredicate);\r\n            }\r\n\r\n            return groupPredicate;\r\n        };\r\n\r\n        /**\r\n         * Takes a predicate's value and if it is a string, adds single quotes around it.\r\n         *\r\n         * @method escapeValue\r\n         * @param {String|Boolean|Number|Date} value\r\n         * @returns {string} The string value\r\n         */\r\n        var escapeValue = function (value) {\r\n            if (value instanceof Date) {\r\n                value = value.toISOString();\r\n            }\r\n            return (typeof value === 'string') ? \"'\" + value + \"'\" : value.toString();\r\n        };\r\n\r\n        /**\r\n         * Returns the raw value of the predicate string\r\n         *\r\n         * @method convertValueToType\r\n         * @param {String} value\r\n         * @returns {String|Boolean|Number}\r\n         */\r\n        var convertValueToType = function (value) {\r\n            if (typeof value === 'string') {\r\n                if (value.indexOf(\"'\") >= 0) {\r\n                    return value.replace(/\\'/g, '');\r\n                }\r\n                if (value.toLowerCase() === 'true') {\r\n                    return true;\r\n                }\r\n                if (value.toLowerCase() === 'false') {\r\n                    return false;\r\n                }\r\n            }\r\n            if (!isNaN(value)) {\r\n                return Number(value);\r\n            }\r\n            return value;\r\n        };\r\n\r\n        /**\r\n         * Tests a predicate group to see if the object matches\r\n         * @param {Predicate} predicate\r\n         * @param {Object} object\r\n         * @returns {Boolean} True if the object matches the predicate\r\n         */\r\n        var testPredicateGroup = function (predicate, object) {\r\n            var result;\r\n            var i;\r\n            for (i = 0; i < predicate.joinedPredicates.length; i++) {\r\n                result = testPredicate(predicate.joinedPredicates[i], object);\r\n\r\n                // If the operator is 'and' and any of the filters do not match, return false.\r\n                if (predicate.groupOperator === 'and' && result === false) {\r\n                    return false;\r\n                }\r\n\r\n                // If the operator is 'or' and any of the filters match, return true.\r\n                if (predicate.groupOperator === 'or' && result === true) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            // The operator was 'and' and all of the filters matched or the operator was 'or' and none of the filters matched.\r\n            return predicate.groupOperator === 'and';\r\n        };\r\n\r\n        /**\r\n         * Tests an object to see if the filter conditions match a given predicate. Used for recursive tests.\r\n         *\r\n         * @param {Predicate} predicate\r\n         * @param {Object} object\r\n         * @param {Boolean} [failOnMissingAssociation=true] Should the test fail when the a filter is performed against an expanded association that is not present\r\n         */\r\n        var testPredicate = function (predicate, object, failOnMissingAssociation) {\r\n            if (predicate.joinedPredicates && predicate.joinedPredicates.length > 0) {\r\n                return testPredicateGroup(predicate, object);\r\n            }\r\n            if (predicate.property) {\r\n                var propertyPath = predicate.property.split('.');\r\n                var objectValue = object;\r\n                var i;\r\n                for (i = 0; i < propertyPath.length; i++) {\r\n                    if (objectValue.hasOwnProperty(propertyPath[i]) && objectValue[propertyPath[i]] !== undefined) {\r\n                        objectValue = objectValue[propertyPath[i]];\r\n                    } else {\r\n                        return (failOnMissingAssociation === false);\r\n                    }\r\n                }\r\n\r\n                var condition = predicate.parsePredicate();\r\n                if (condition.indexOf('(') >= 0) {\r\n                    return testComplexPredicate(condition, objectValue);\r\n                }\r\n                return testSimplePredicate(condition, objectValue);\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        /**\r\n         * Tests a complex predicate that uses startswith, endswith, or substringof\r\n         * @param {String} condition The Predicate condition\r\n         * @param {String|Number|Boolean} objectValue The value that is being tested\r\n         * @returns {Boolean} True if the object value matches the condition\r\n         */\r\n        var testComplexPredicate = function (condition, objectValue) {\r\n            var value;\r\n            var operator = condition.substr(0, condition.indexOf('('));\r\n            var start = condition.indexOf('(') + 1;\r\n            var end = condition.indexOf(')') - start;\r\n            var conditionParams = condition.substr(start, end);\r\n            conditionParams = conditionParams.replace(/\\'/g, '').split(', ');\r\n\r\n            switch (operator) {\r\n                case 'startswith':\r\n                    value = conditionParams[1].toLowerCase();\r\n                    return (objectValue.indexOf(value) === 0);\r\n                case 'endswith':\r\n                    value = conditionParams[1].toLowerCase();\r\n                    return (objectValue.indexOf(value) === objectValue.length - 1 - value.length);\r\n                case 'substringof':\r\n                    value = conditionParams[0].toLowerCase();\r\n                    return (objectValue.indexOf(value) >= 0);\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        /**\r\n         * Tests a simple predicate that uses lt, gt, le, ge, ne, or eq\r\n         * @param {String} condition The Predicate condition\r\n         * @param {String|Number|Boolean} objectValue The value that is being tested\r\n         * @returns {Boolean} True if the object value matches the condition\r\n         */\r\n        var testSimplePredicate = function (condition, objectValue) {\r\n            var conditionParams = condition.split(' ');\r\n            var operator = conditionParams[1];\r\n\r\n            var value = conditionParams.slice(2).join(' ');\r\n            value = convertValueToType(value);\r\n\r\n            // If both the predicate value and the object values are Date-like, convert them to dates to compare\r\n            if (objectValue instanceof Date && !isNaN(Date.parse(value))) {\r\n                value = Date.parse(value);\r\n                objectValue = objectValue.getTime();\r\n            } else if (typeof objectValue === 'string' && !isNaN(Date.parse(objectValue))) {\r\n                objectValue = Date.parse(objectValue);\r\n                value = Date.parse(value);\r\n            }\r\n\r\n            /* jshint eqeqeq: false */\r\n            switch (operator) {\r\n                case 'lt':\r\n                    return objectValue < value;\r\n                case 'gt':\r\n                    return objectValue > value;\r\n                case 'le':\r\n                    return objectValue <= value;\r\n                case 'ge':\r\n                    return objectValue >= value;\r\n                case 'ne':\r\n                    return objectValue != value;\r\n                case 'eq':\r\n                    return objectValue == value;\r\n            }\r\n            /* jshint eqeqeq: true */\r\n\r\n            return false;\r\n        };\r\n\r\n        /**\r\n         * Builds a predicate from a complex segment that uses startswith, endswith, or substringof\r\n         * @param {String} condition The predicate condition\r\n         * @returns {Predicate} The resulting Predicate\r\n         */\r\n        var getComplexPredicateFromSegment = function (condition) {\r\n            var predicate;\r\n            var value;\r\n            var parenPos = condition.indexOf('(');\r\n            var operator = condition.substring(0, parenPos);\r\n            var conditionParams = condition.substring(parenPos + 1, condition.indexOf(')')).split(', ');\r\n\r\n            switch (operator) {\r\n                case 'startswith':\r\n                    value = convertValueToType(conditionParams[1]);\r\n                    predicate = new Predicate(conditionParams[0]).startsWith(value);\r\n                    break;\r\n                case 'endswith':\r\n                    value = convertValueToType(conditionParams[1]);\r\n                    predicate = new Predicate(conditionParams[0]).endsWith(value);\r\n                    break;\r\n                case 'substringof':\r\n                    value = convertValueToType(conditionParams[0]);\r\n                    predicate = new Predicate(conditionParams[1]).contains(value);\r\n                    break;\r\n            }\r\n\r\n            return predicate;\r\n        };\r\n\r\n        /**\r\n         * Builds a predicate from a simple segment that uses eq, ne, gt, ge, lt, or le\r\n         * @param {String} condition The predicate condition\r\n         * @returns {Predicate} The resulting Predicate\r\n         */\r\n        var getSimplePredicateFromSegment = function (condition) {\r\n            var conditionParams = condition.split(' ');\r\n            var operator = conditionParams[1];\r\n            var value = convertValueToType(conditionParams.slice(2).join(' '));\r\n\r\n            var predicate = new Predicate(conditionParams[0]);\r\n\r\n            switch (operator) {\r\n                case 'eq':\r\n                    predicate.equals(value);\r\n                    break;\r\n                case 'ne':\r\n                    predicate.notEqualTo(value);\r\n                    break;\r\n                case 'gt':\r\n                    predicate.greaterThan(value);\r\n                    break;\r\n                case 'ge':\r\n                    predicate.greaterThanOrEqualTo(value);\r\n                    break;\r\n                case 'lt':\r\n                    predicate.lessThan(value);\r\n                    break;\r\n                case 'le':\r\n                    predicate.lessThanOrEqualTo(value);\r\n                    break;\r\n            }\r\n            return predicate;\r\n        };\r\n\r\n        /**\r\n         * Creates a predicate from a single condition eg: \"property eq 'value'\"\r\n         *\r\n         * @param {String} condition\r\n         * @return {Predicate} The predicate built from the condition\r\n         */\r\n        var getPredicateFromSegment = function (condition) {\r\n            if (condition.indexOf('(') >= 0) {\r\n                return getComplexPredicateFromSegment(condition);\r\n            }\r\n            return getSimplePredicateFromSegment(condition);\r\n        };\r\n\r\n        return Predicate;\r\n    }\r\n]);","angular.module('recall').factory('recallPreparedQueryOptions', [\r\n    'recallPredicate',\r\n\r\n    function (Predicate) {\r\n        /*\r\n         * BASED ON:\r\n         * PreparedQueryOptions\r\n         * version: 1.1.2\r\n         * author: David Hamilton\r\n         * license: https://github.com/nova706/PreparedQueryOptions/blob/master/LICENSE.txt (MIT)\r\n         * https://github.com/nova706/PreparedQueryOptions\r\n         *\r\n         */\r\n\r\n        /**\r\n         * PreparedQueryOptions are used to set, store and parse OData query parameters. Instead of passing\r\n         * multiple arguments to methods for each query option, simply pass the preparedQueryOptions object.\r\n         * Use the parseOptions method on the object to return an OData string for a query.\r\n         *\r\n         * @class PreparedQueryOptions\r\n         * @constructor\r\n         */\r\n        function PreparedQueryOptions() {\r\n            /**\r\n             * Stores the query options that have been set.\r\n             * @property options\r\n             * @type Object\r\n             * @default {}\r\n             */\r\n            this.options = {};\r\n        }\r\n\r\n        var isPredicate = function (object) {\r\n            return object && typeof object === \"object\" && typeof object.parsePredicate === \"function\";\r\n        };\r\n\r\n        /**\r\n         * Used in Sync Adapters to perform the CRUD operation against the Master instead of the Slave.\r\n         *\r\n         * @method preferMaster\r\n         * @param {Boolean} [preferMaster=false] Whether the SyncAdapter should prefer the slave or master.\r\n         * @return {PreparedQueryOptions|Boolean} PreparedQueryOptions object or the current preferMaster value.\r\n         */\r\n        PreparedQueryOptions.prototype.preferMaster = function (preferMaster) {\r\n            if (arguments.length === 0) {\r\n                return this.options.preferMaster || null;\r\n            }\r\n            if (preferMaster === null) {\r\n                delete this.options.preferMaster;\r\n                return this;\r\n            }\r\n            this.options.preferMaster = preferMaster === true;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets the number of results to retrieve. Passing a null top value will clear the top option. Negating the value\r\n         * will return the current top value.\r\n         *\r\n         * @method $top\r\n         * @param {Number} [top] Number of results to query for.\r\n         * @return {PreparedQueryOptions|Number} PreparedQueryOptions object or the current $top value.\r\n         */\r\n        PreparedQueryOptions.prototype.$top = function (top) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$top || null;\r\n            }\r\n            if (typeof top === 'number' && top >= 0) {\r\n                this.options.$top = top;\r\n            }\r\n            if (top === null) {\r\n                delete this.options.$top;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets the index of the first result to retrieve. Passing a null skip value will clear the skip option. Negating the\r\n         * value will return the current skip value.\r\n         *\r\n         * @method $skip\r\n         * @param {Number} [skip] The index of the first result to retrieve\r\n         * @return {PreparedQueryOptions|Number} PreparedQueryOptions object or the current $skip value.\r\n         */\r\n        PreparedQueryOptions.prototype.$skip = function (skip) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$skip || null;\r\n            }\r\n            if (typeof skip === 'number' && skip >= 0) {\r\n                this.options.$skip = skip;\r\n            }\r\n            if (skip === null) {\r\n                delete this.options.$skip;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets orderBy string. Passing a null order by value will clear the order by option. Negating the value will return\r\n         * the current order by value.\r\n         *\r\n         * @method $orderBy\r\n         * @param {String} [orderBy] The orderBy string used to retrieve the results in a sorted order.\r\n         * @return {PreparedQueryOptions|String} PreparedQueryOptions object or the current $orderby value.\r\n         */\r\n        PreparedQueryOptions.prototype.$orderBy = function (orderBy) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$orderby || null;\r\n            }\r\n            if (orderBy && typeof orderBy === 'string') {\r\n                this.options.$orderby = orderBy;\r\n            }\r\n            if (orderBy === null) {\r\n                delete this.options.$orderby;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets expand string. Passing a null expand value will clear the expand option. Negating the value will return the\r\n         * current expand value.\r\n         *\r\n         * @method $expand\r\n         * @param {String | Array} [foreignKey] The foreignKey to expand when retrieving the results.\r\n         * @return {PreparedQueryOptions|String} PreparedQueryOptions object or the current $expand value.\r\n         */\r\n        PreparedQueryOptions.prototype.$expand = function (foreignKey) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$expand || null;\r\n            }\r\n            if (typeof foreignKey === 'string') {\r\n                this.options.$expand = foreignKey;\r\n            } else if (foreignKey instanceof Array) {\r\n                this.options.$expand = foreignKey.join(',');\r\n            }\r\n            if (foreignKey === null) {\r\n                delete this.options.$expand;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets select string. Passing a null select value will clear the select option. Negating the value will return the\r\n         * current select value.\r\n         *\r\n         * @method $select\r\n         * @param {String | Array} [property] A single property name or array of property names to select.\r\n         * @return {PreparedQueryOptions|String} PreparedQueryOptions object or the current $select value.\r\n         */\r\n        PreparedQueryOptions.prototype.$select = function (property) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$select || null;\r\n            }\r\n            if (typeof property === 'string') {\r\n                this.options.$select = property;\r\n            } else if (property instanceof Array) {\r\n                this.options.$select = property.join(',');\r\n            }\r\n            if (property === null) {\r\n                delete this.options.$select;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Enables or disables inline count. Passing a null inline count value will clear the inline count option. Negating\r\n         * the value will return the current inline count value: \"allpages\" or null.\r\n         *\r\n         * @method $inlineCount\r\n         * @param {Boolean} [enable=true] Flag to enable or disable inline count.\r\n         * @return {PreparedQueryOptions|String} PreparedQueryOptions object or the current $inlinecount value.\r\n         */\r\n        PreparedQueryOptions.prototype.$inlineCount = function (enable) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$inlinecount || null;\r\n            }\r\n            if (enable !== false && enable !== null) {\r\n                this.options.$inlinecount = \"allpages\";\r\n            } else {\r\n                delete this.options.$inlinecount;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets the filter option. Include the Predicate class to assist in building complex filter clauses.\r\n         * Passing a null filter value will clear the filter option. Negating the value will return the current filter value.\r\n         *\r\n         * @method $filter\r\n         * @param {String | Predicate} [filter] The filter clause to use when retrieving the results.\r\n         * @return {PreparedQueryOptions|Predicate} PreparedQueryOptions object or the current $filter predicate.\r\n         */\r\n        PreparedQueryOptions.prototype.$filter = function (filter) {\r\n            if (arguments.length === 0) {\r\n                return this.options.$filter || null;\r\n            }\r\n            if (filter && typeof filter === 'string') {\r\n                this.options.$filter = Predicate.fromString(filter);\r\n            } else if (isPredicate(filter)) {\r\n                this.options.$filter = filter;\r\n            }\r\n            if (filter === null) {\r\n                delete this.options.$filter;\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Sets a custom query option parameter. Passing a null value will clear the filter. Negating the value will return\r\n         * the current custom filter value.\r\n         *\r\n         * @method custom\r\n         * @param {String} optionName The name of the option. Must not start with '$'.\r\n         * @param {String|Number|Boolean} [value] The string value of the option.\r\n         * @return {PreparedQueryOptions} PreparedQueryOptions object or the current custom filter value.\r\n         */\r\n        PreparedQueryOptions.prototype.custom = function (optionName, value) {\r\n            if (arguments.length === 1) {\r\n                return this.options[optionName] || null;\r\n            }\r\n            if (optionName && typeof optionName === 'string' && optionName.indexOf('$') !== 0 && value && (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean')) {\r\n                this.options[optionName] = value;\r\n            }\r\n            if (optionName && value === null) {\r\n                delete this.options[optionName];\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Extend existing query with options from another query. Only the original query will be modified. Any\r\n         * matching options will be overridden in the original query.\r\n         *\r\n         * @method extend\r\n         * @param {PreparedQueryOptions} preparedQueryOptions The prepared query objects with the properties to be added.\r\n         * @return {PreparedQueryOptions} PreparedQueryOptions object.\r\n         */\r\n        PreparedQueryOptions.prototype.extend = function (preparedQueryOptions) {\r\n            var key;\r\n            for (key in preparedQueryOptions.options) {\r\n                if (preparedQueryOptions.options.hasOwnProperty(key)) {\r\n                    this.options[key] = preparedQueryOptions.options[key];\r\n                }\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Builds and returns a URL parameter string based on the query options.\r\n         *\r\n         * @method parseOptions\r\n         * @returns {String}\r\n         * @example '$top=25&$skip=0'\r\n         */\r\n        PreparedQueryOptions.prototype.parseOptions = function () {\r\n            var parameters = '';\r\n\r\n            var appendSeparator = function () {\r\n                parameters += (parameters === '') ? '?' : '&';\r\n            };\r\n\r\n            var option;\r\n            for (option in this.options) {\r\n                if (this.options.hasOwnProperty(option)) {\r\n                    appendSeparator();\r\n                    if (isPredicate(this.options[option])) {\r\n                        parameters += option + '=' + this.options[option].parsePredicate();\r\n                    } else {\r\n                        parameters += option + '=' + this.options[option];\r\n                    }\r\n                }\r\n            }\r\n\r\n            return parameters;\r\n        };\r\n\r\n        /**\r\n         * Class method to create a new PreparedQueryOptions object from a simple object\r\n         *\r\n         * @method fromObject\r\n         * @param {Object} object the object to build from\r\n         * @returns {PreparedQueryOptions}\r\n         */\r\n        PreparedQueryOptions.fromObject = function (object) {\r\n            var preparedQueryOptions = new PreparedQueryOptions();\r\n            var property;\r\n            for (property in object) {\r\n                if (object.hasOwnProperty(property) && typeof preparedQueryOptions[property] === \"function\") {\r\n                    preparedQueryOptions[property](object[property]);\r\n                }\r\n            }\r\n            return preparedQueryOptions;\r\n        };\r\n\r\n        return PreparedQueryOptions;\r\n    }\r\n]);","/**\r\n * The recallProvider is the entry point for common configuration options. Specific adapters may have their own\r\n * configuration options\r\n */\r\nangular.module('recall').provider('recall', [\r\n    function () {\r\n        var config = {};\r\n\r\n        // The default adapter to use unless otherwise specified by the model Definition\r\n        config.adapter = null;\r\n        this.setAdapter = function (adapter) {\r\n            config.adapter = adapter;\r\n            return this;\r\n        };\r\n\r\n        // Time in milliseconds to throttle Entity dirty checking. This allows for multiple digest cycles to pass\r\n        // between checking if an Entity is dirty by examining its stored state\r\n        config.dirtyCheckThreshold = 30;\r\n        this.setDirtyCheckThreshold = function (dirtyCheckThreshold) {\r\n            config.dirtyCheckThreshold = dirtyCheckThreshold;\r\n            return this;\r\n        };\r\n\r\n        // The default last modified field name. To enable synchronization, this must be set.\r\n        config.lastModifiedFieldName = null;\r\n        this.setLastModifiedFieldName = function (lastModifiedFieldName) {\r\n            config.lastModifiedFieldName = lastModifiedFieldName;\r\n            return this;\r\n        };\r\n\r\n        // The default soft delete field name. To enable synchronization, this must be set.\r\n        config.deletedFieldName = null;\r\n        this.setDeletedFieldName = function (deletedFieldName) {\r\n            config.deletedFieldName = deletedFieldName;\r\n            return this;\r\n        };\r\n\r\n        this.$get = ['$injector', 'recallModel', function ($injector, Model) {\r\n\r\n            var service = {\r\n                adapter: config.adapter,\r\n                lastModifiedFieldName: config.lastModifiedFieldName,\r\n                deletedFieldName: config.deletedFieldName,\r\n                dirtyCheckThreshold: config.dirtyCheckThreshold,\r\n                models: {}\r\n            };\r\n\r\n            /**\r\n             * Get an array of the defined Models.\r\n             * @returns {Entity[]} The models\r\n             */\r\n            service.getModels = function () {\r\n                var theModels = [];\r\n                var model;\r\n                for (model in this.models) {\r\n                    if (this.models.hasOwnProperty(model)) {\r\n                        theModels.push(this.models[model]);\r\n                    }\r\n                }\r\n                return theModels;\r\n            };\r\n\r\n            /**\r\n             * Gets a defined model by its name\r\n             * @param {String} modelName\r\n             * @returns {Entity} The model or null if the model is not found\r\n             */\r\n            service.getModel = function (modelName) {\r\n                return this.models[modelName] || null;\r\n            };\r\n\r\n            /**\r\n             * Creates a model based on a definition.\r\n             * @param {Object} modelDefinition The definition of the model including fields and associations\r\n             * @param {Object|String} [adapter] The adapter that is used to perform the CRUD actions\r\n             * @returns {Object} The model\r\n             */\r\n            service.defineModel = function (modelDefinition, adapter) {\r\n                adapter = adapter || this.adapter;\r\n\r\n                // If the adapter is a string, assume it is the name of the adapter factory and inject it\r\n                adapter = (typeof adapter === 'string') ? $injector.get(adapter) : adapter;\r\n\r\n                // If there was no adapter set, then return out as the model can not be used.\r\n                if (!adapter) {\r\n                    return null;\r\n                }\r\n\r\n                // TODO: Validated the model definition\r\n                if (!modelDefinition || !modelDefinition.name) {\r\n                    return null;\r\n                }\r\n\r\n                // If the model is already defined, just return it.\r\n                if (this.models[modelDefinition.name]) {\r\n                    return this.models[modelDefinition.name];\r\n                }\r\n\r\n                var model = new Model(modelDefinition);\r\n                model.setLastModifiedFieldName(this.lastModifiedFieldName);\r\n                model.setDeletedFieldName(this.deletedFieldName);\r\n                model.setAdapter(adapter);\r\n                model.setDirtyCheckThreshold(this.dirtyCheckThreshold);\r\n\r\n                var fieldsValid = model.initializeModelFields();\r\n\r\n                if (!fieldsValid) {\r\n                    return null;\r\n                }\r\n\r\n                model.initializeAssociations();\r\n\r\n                // Call the model validation on the adapter after all Entity properties and methods are set.\r\n                if (typeof adapter.modelValidationHook === 'function' && !adapter.modelValidationHook(model)) {\r\n                    return null;\r\n                }\r\n\r\n                this.models[model.modelName] = model;\r\n\r\n                return model;\r\n            };\r\n\r\n            return service;\r\n        }];\r\n    }\r\n]);"]}